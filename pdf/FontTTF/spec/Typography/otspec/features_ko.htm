<HTML>
<HEAD>
<TITLE>OpenType Layout tag registry</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<LINK REL=STYLESHEET HREF="otspec.css" TYPE="text/css"></HEAD>
<BODY BGCOLOR="#FFFFFF" BOTTOMMARGIN="20" TOPMARGIN="0" LEFTMARGIN="0">		
	
<!--TOOLBAR_START--><!--TOOLBAR_EXEMPT--><!--TOOLBAR_END--><P><BR>

<CENTER><P>

<TABLE WIDTH=580 CELLSPACING=0 CELLPADDING=0 BORDER=0>

<TR>
<TD HEIGHT=1 WIDTH=20><IMG SRC="pixel.gif" WIDTH=20 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=60><IMG SRC="pixel.gif" WIDTH=60 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=480><IMG SRC="pixel.gif" WIDTH=480 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=20><IMG SRC="pixel.gif" WIDTH=20 HEIGHT=1 ALT=""></TD>
</TR>
<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=5><IMG SRC="toprule.gif" WIDTH=580 HEIGHT=5></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD WIDTH=560 COLSPAN=3 VALIGN=TOP><FONT FACE="Verdana, Arial, Helvetica" SIZE=1 CLASS=detail>
	<A HREF="/typography/default.asp">Microsoft Typography</A>
	 | <A HREF="/typography/creators.htm">Developer information</A>
         | <A HREF="/typography/default.htm">Specifications</A>
	 | <A HREF="ttoreg.htm">OpenType Layout tag registry</A>
</FONT></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=20><IMG SRC="baserule.gif" WIDTH=580 HEIGHT=20 ALT=""></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD WIDTH=60 VALIGN=TOP></TD>
<TD WIDTH=480 VALIGN=TOP>
<P><BR>

<P>
<BR>
<B>Registered features - <i>definitions and implementations</i></B>
<P>
<A HREF="features_ae.htm">a - e</A>
 | 
<A HREF="features_fj.htm">f - j</A>
 | 
k - o
 | 
<A HREF="features_pt.htm">p - t</A>
 | 
<A HREF="features_uz.htm">u - z</A>

<P>
<BR>

        <a name="kern"></a><b>Tag: </b>'kern'</p>
       <p><i>Friendly name: </i>Kerning</p>
       <p><i>Registered by: </i>Microsoft/Adobe</p>
       <p><i>Function: </i>Adjusts amount of space between glyphs, generally to provide 
        optically consistent spacing between glyphs. Although a well-designed typeface 
        has consistent inter-glyph spacing overall, some glyph combinations require 
        adjustment for improved legibility. Besides standard adjustment in the 
        horizontal direction, this feature can supply size-dependent kerning data via 
        device tables, &quot;cross-stream&quot; kerning in the Y text direction, and 
        adjustment of glyph placement independent of the advance adjustment. Note that 
        this feature may apply to runs of more than two glyphs, and would not be used 
        in monospaced fonts. Also note that this feature does not apply to text set 
        vertically.</p>
       <p><i>Example: </i>The o is shifted closer to the T in the combination 
        &quot;To.&quot;</p>
       <p><i>Recommended implementation: </i>The font stores a set of adjustments for 
        pairs of glyphs (GPOS lookup type 2 or 8). These may be stored as one or more 
        tables matching left and right classes, &amp;/or as individual pairs. 
        Additional adjustments may be provided for larger sets of glyphs (e.g. 
        triplets, quadruplets, etc.) to overwrite the results of pair kerns in 
        particular combinations.</p>
       <p><i>Application interface: </i>The application passes a sequence of GIDs to 
        the kern table, and gets back adjusted positions (XPlacement, XAdvance, 
        YPlacement and YAdvance) for those GIDs. When using the type 2 lookup on a run 
        of glyphs, it's critical to remember to not consume the last glyph, but to keep 
        it available as the first glyph in a subsequent run (this is a departure from 
        normal lookup behavior).</p>
       <p><i>UI suggestion: </i>This feature should be active by default for horizontal 
        text setting. Applications may wish to allow users to add further 
        manually-specified adjustments to suit specific needs and tastes.</p>
       <p><i>Script/language sensitivity: </i>None.</p>
       <p><i>Feature interaction: </i>If 'kern' is activated, 'palt' must also be 
        activated if it exists. (If 'palt' is activated, there is no requirement that 
        'kern' must also be activated.) May be used in addition to any other feature 
        except those which result in fixed (uniform) advance widths (e.g. <a href="features_fj.htm#fwid">
         fwid</a>, <a href="features_fj.htm#halt">halt</a>, <a href="features_fj.htm#hwid">hwid</a>, <a href="features_pt.htm#qwid">qwid</a>
        and <a href="features_pt.htm#twid">twid</a>).
       </p>
       <p><br>
       <p><br>
        <a name="lfbd"></a><b>Tag: </b>'lfbd'</p>
       <p><i>Friendly name: </i>Left Bounds</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>Aligns glyphs by their apparent left extents at the left 
        ends of horizontal lines of text, replacing the default behavior of aligning 
        glyphs by their origins. This feature is called by the Optical Bounds (
<a href="#opbd">opbd</a>) 
        feature above.</p>
       <p><i>Example: </i>Succeeding lines beginning with T, D and W would shift to the 
        left by varying amounts when the text is left-justified and this feature is 
        applied.</p>
       <p><i>Recommended implementation: </i>Values for affected glyphs describe the 
        amount by which the placement and advance width should be altered (GPOS lookup 
        type 1).</p>
       <p><i>Application interface: </i>For GIDs found in the lfbd coverage table, the 
        application passes a GID to the table and gets back a new XPlacement and 
        XAdvance value.</p>
       <p><i>UI suggestion: </i>This feature is called by an application when the user 
        invokes the <a href="#opbd">opbd</a> feature.</p>
       <p><i>Script/language sensitivity: </i>None.</p>
       <p><i>Feature interaction: </i>Should not be applied to glyphs which use 
        fixed-width features (e.g. <a href="features_fj.htm#fwid">
         fwid</a>, <a href="features_fj.htm#halt">halt</a>, <a href="features_fj.htm#hwid">hwid</a>, <a href="features_pt.htm#qwid">qwid</a>
        and <a href="features_pt.htm#twid">twid</a>) or vertical 
        features (e.g. 
<a href="features_uz.htm#vert">vert</a>, 
<a href="features_uz.htm#vrt2">vrt2</a>, 
<a href="features_uz.htm#vpal">vpal</a>, 
<a href="features_uz.htm#valt">valt</a> and 
<a href="features_uz.htm#vhal">vhal</a>). Is called by 
        the <a href="#opbd">opbd</a> feature.</p>
       <p><br>
        <a name="liga"></a><b>Tag: </b>'liga'</p>
       <p><i>Friendly name: </i>Standard Ligatures</p>
       <p><i>Registered by: </i>Microsoft/Adobe</p>
       <p><i>Function: </i>Replaces a sequence of glyphs with a single glyph which is 
        preferred for typographic purposes. This feature covers the ligatures which the 
        designer/manufacturer judges should be used in normal conditions.</p>
       <p><i>Example: </i>The glyph for ffl replaces the sequence of glyphs f f l.</p>
       <p><i>Recommended implementation: </i>The liga table maps sequences of glyphs to 
        corresponding ligatures (GSUB lookup type 4). Ligatures with more components 
        must be stored ahead of those with fewer components in order to be found. The 
        set of standard ligatures will vary by design and script.</p>
       <p><i>Application interface: </i>For sets of GIDs found in the liga coverage 
        table, the application passes the sequence of GIDs to the table and gets back a 
        single new GID. Note that full sequences must be passed.</p>
       <p><i>UI suggestion: </i>This feature serves a critical function in some 
        contexts, and should be active by default.</p>
       <p><i>Script/language sensitivity: </i>Applies to virtually all scripts.</p>
       <p><i>Feature interaction: </i>This feature may be used in combination with 
        other substitution (GSUB) features, whose results it may override.</p>
       <P><BR><A NAME="ljmo"></A><B>Tag: </B>&quot;ljmo&quot;
       <P><I>Friendly name: </I>Leading Jamo Forms
       <P><I>Registered by: </I>Microsoft
       <P><I>Function: </I>Substitutes the leading jamo form of a cluster.
       <P><I>Example: </I>In Hangul script, the jamo cluster is composed of three parts (leading consonant, vowel, and trailing consonant). When a sequence of leading class jamos are found, their combined leading jamo form is 
       substituted.
       <P><I>Recommended implementation: </I>The <B>ljmo</B>
       table maps the sequence required to convert a series of jamos into its leading jamo form 
       (GSUB lookup type 4).
       <P><I>Application interface: </I>For substitutions defined in the <B>ljmo</B>
       table, the application passes the sequence of GIDs to the feature, and gets 
       back the GID for the leading jamo form.<P>
        <I>UI suggestion: </I>This feature should be on by default.<P>
        <I>Script/language sensitivity: </I>Required for Hangul script when Ancient Hangul writing system is supported.<P>
        <I>Feature interaction: </I>This feature overrides the results of all other features.<P>
       <p><br>
        <a name="lnum"></a><b>Tag: </b>'lnum'</p>
       <p><i>Friendly name: </i>Lining Figures</p>
       <p><i>Registered by: </i>Adobe (Modified by Adobe, this is the newer 
        description)</p>
       <p><i>Function: </i>This feature changes selected figures from oldstyle to the 
        default lining form.</p>
       <p><i>Example: </i>The user invokes this feature in order to get lining figures, 
        which fit better with all-capital text. Various characters designed to be used 
        with figures may also be covered by this feature. In cases where lining figures 
        are the default form, this feature would undo previous substitutions.</p>
       <p><i>Recommended implementation: </i>The lnum table maps each oldstyle figure, 
        and any associated characters to the corresponding lining form (GSUB lookup 
        type 1).</p>
       <p><i>Application interface: </i>For GIDs found in the lnum coverage table, the 
        application passes a GID to the onum table and gets back a new GID. Even if the 
        current figures resulted from an earlier substitution, it may not be correct to 
        simply revert to the original GIDs, because of interaction with the figure 
        width features, so it's best to use this table.</p>
       <p><i>UI suggestion: </i>This feature should be inactive by default. Users can 
        switch between the lining and oldstyle sets by turning this feature on or off. 
        Note that this feature is distinct from the figure width features (<a href="features_pt.htm#pnum">pnum</a>
        and <a href="features_pt.htm#tnum">tnum</a>). When the user invokes this feature, the 
        application may wish to inquire whether a change in width is also desired.</p>
       <p><i>Script/language sensitivity: </i>None.</p>
       <p><i>Feature interaction: </i>This feature overrides the results of the 
        Oldstyle Figures feature (
<a href="#onum">onum</a>).</p>
       <P><BR>
        <a name="locl"></a><b>Tag: </b>'locl'</P>
       <p><i>Friendly name: </i>Localized Forms</p>
       <p><i>Registered by: </i>Tiro Typeworks/Adobe
       </p>
       <p><i>Function: </i>Many scripts used to write multiple languages over wide 
        geographical areas have developed localized variant forms of specific letters, 
        which are used by individual literary communities. For example, a number of 
        letters in the Bulgarian and Serbian alphabets have forms distinct from their 
        Russian counterparts and from each other. In some cases the localized form 
        differs only subtly from the script 'norm', in others the forms are radically 
        distinct. This feature enables localized forms of glyphs to be substituted for 
        default forms.</p>
       <p><i>Example: </i>The user applies this feature to text to enable localized 
        Bulgarian forms of Cyrillic letters; alternatively, the feature might enable 
        localized Russian forms in a Bulgarian manufactured font in which the Bulgarian 
        forms are the default characters.</p>
       <p><i>Recommended implementation: </i>For a given Unicode value, the font 
        contains glyphs for two or more locales. The locl table maps GIDs for default 
        forms to GIDs for corresponding localized alternatives. These are one-to-one 
        substitutions (GSUB lookup type 1).</p>
       <p><i>Application interface: </i>Localized forms are associated with specific 
        languages and are activated by language tags. Which glyph is used as the 
        localized form should be determined by the language the user has specified. The 
        user can switch localized forms by selecting a new language, or may enable 
        default forms by switching off the locl feature.</p>
       <p><i>UI suggestion: </i>This feature should be active by default.</p>
       <p><i>Script/language sensitivity: </i>Applies to all scripts and languages; but 
        of course behavior differs by script and language.</p>
       <p><i>Feature interaction: </i>This feature can be used in combination with any 
        other feature. It replaces and extends the earlier locale-specific tags zhcn, 
        zhtw, jajp, kokr and vivn which had been defined for CJKV scripts.</p>
       <p><br>
        <a name="mark"></a><b>Tag: </b>'mark'</p>
       <p><i>Friendly name: </i>Mark Positioning</p>
       <p><i>Registered by: </i>Microsoft</p>
       <p><i>Function: </i>Positions mark glyphs with respect to base glyphs.</p>
       <I>Example: </I>In the Arabic script, positioning the Hamza above the Yeh.
       <P>
        <I>Recommended implementation:</I>
       This feature may be implemented as a MarkToBase Attachment lookup (GPOS 
       LookupType = 4) or a MarkToLigature Attachment lookup (GPOS LookupType = 5).<P>
        <I>Application interface: </I>For GIDs found in the <B>mark</B>
       coverage table, the application gets back the positioning or position 
       adjustment values for the mark glyph.<p><i>UI suggestion: </i>This feature should be active by default.</p>
       <P>
        <I>Script/language sensitivity: </I>
       None.<P>
        <I>Feature interaction: </I>None.</P>
       <P><BR>
        <A NAME="med2"></A><B>Tag: </B>
       &quot;med2&quot;<P>
        <I>Friendly name: </I>
       Medial Form #3
       <P>
        <I>Registered by: </I>
       Microsoft<P>
        <I>Function: </I>
       Replaces Alaph glyphs in the middle of Syriac words when the preceding base 
       character cannot be joined to.
       <P>
        <I>Example: </I>When an Alaph is preceded by a Waw, the Alaph would be replaced 
        by an appropriate form.
        <BR>
       This feature is used only for the Syriac script alaph character.
       <P>
        <I>Recommended implementation: </I>The <B>med2</B>
       table maps default alphabetic forms to corresponding medial forms (GSUB lookup 
       type 5).
       <P>
        <I>Application interface: </I>
       The application is responsible for noting word boundaries. For GIDs in the 
       middle of words and found in the med2 coverage table, the application passes a 
       GID to the feature and gets back a new GID.
       <P>
        <I>UI suggestion: </I>
       This feature should be on by default.
       <P>
        <I>Script/language sensitivity: </I>
       Used only with the Syriac script.
       <P>
        <I>Feature interaction: </I>
       This feature may be used in combination with other substitution (GSUB) 
       features, whose results it may override. See also init and fina.<P>
       <p><br>
        <a name="medi"></a><b>Tag: </b>'medi'</p>
       <p><i>Friendly name: </i>Medial Forms</p>
       <p><i>Registered by: </i>Microsoft/Adobe</p>
       <p><i>Function: </i>Replaces glyphs in the middles of words (i.e. following a 
        beginning and preceding an end) with alternate forms designed for this use. 
        Note: This is different from the default form, which is designed for 
        stand-alone use. This is common in Latin connecting scripts, and required in 
        various non-Latins like Arabic.</p>
       <p><i>Example: </i>In the typeface Caflisch Script, the y and p in the word 
        'type' are replaced by the y.med and p.med forms.</p>
       <p><i>Recommended implementation: </i>The medi table maps default alphabetic 
        forms to corresponding medial forms (GSUB lookup type 1).</p>
       <p><i>Application interface: </i>The application is responsible for noting word 
        boundaries. For GIDs in the middles of words and found in the medi coverage 
        table, the application passes a GID to the feature and gets back a new GID.</p>
       <p><i>UI suggestion: </i>This feature should be active by default.</p>
       <p><i>Script/language sensitivity: </i>Can be used in any alphabetic script.</p>
       <p><i>Feature interaction: </i>This feature may be used in combination with 
        other substitution (GSUB) features, whose results it may override. See also <a href="features_fj.htm#init">
         init</a> and <a href="features_fj.htm#fina">fina</a>.</p>
       <p><br>
        <a name="mgrk"></a><b>Tag: </b>'mgrk'</p>
       <p><i>Friendly name: </i>Mathematical Greek</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>Replaces standard typographic forms of Greek glyphs with 
        corresponding forms commonly used in mathematical notation (which are a subset 
        of the Greek alphabet).</p>
       <p><i>Example: </i>The user applies this feature to U+03A3 (Sigma), and gets 
        U+2211 (summation).</p>
       <p><i>Recommended implementation: </i>The mgrk table maps Greek glyphs to the 
        corresponding forms used for mathematics (GSUB lookup type 1).</p>
       <p><i>Application interface: </i>For GIDs found in the mgrk coverage table, the 
        application passes a GID to the feature table and gets back a new GID. Note: 
        This is a change of semantic value. Besides the original character codes, the 
        application should store the code for the new character.</p>
       <p><i>UI suggestion: </i>This feature should be off by default in most 
        applications. Math-oriented applications may want to activate this feature by 
        default.</p>
       <p><i>Script/language sensitivity: </i>Could apply to any font which includes 
        coverage for the Greek script.</p>
       <p><i>Feature interaction: </i>This feature may be used in combination with 
        other substitution (GSUB) features, whose results it may override.</p>
       <P><BR>
        <A NAME="mkmk"></A><B>Tag: </B>
       &quot;mkmk&quot;<P>
        <I>Friendly name: </I>
       Mark to Mark Positioning<P>
        <I>Registered by: </I>
       Microsoft<P>
        <I>Function: </I>
       Positions marks with respect to other marks. Required in various non-Latin 
       scripts like Arabic.<P>
        <I>Example: </I>
       In Arabic, the ligaturised mark Ha with Hamza above it; can also be obtained by 
       positioning these marks relative to one another.
       <P>
        <I>Recommended implementation: </I>
       This feature may be implemented as a MarkToMark Attachment lookup (GPOS lookup 
       type 6).<P>
        <I>Application interface: </I>
       The application gets back positioning values or positional adjustments for 
       marks.
      <p><i>UI suggestion: </i>This feature should be active by default.</p>
      <P>
        <I>Script/language sensitivity: </I>
       None.
       <P>
        <I>Feature interaction: </I>
       None.
       <P>
       <p><br>
        <a name="mset"></a><b>Tag: </b>'mset'</p>
       <p><i>Registered by: </i>Microsoft</p>
       <p><i>Function: </i>Positions Arabic combining marks in fonts for Windows 95 
        using glyph substitution</p>
       <I>Example: </I>In Arabic, the Hamza is positioned differently when placed 
       above a Yeh Barree as compared to the Alef.<P>
       <p><i>Windows 95 implementation: </i>In contrast to the &quot;mark&quot; 
        feature, &quot;mset&quot; uses glyph substitution to combine marks and base 
        glyphs. It replaces a default mark glyph with a correctly positioned mark 
        glyph. The font designer specifies the position of the mark when describing the 
        mark's contour in the font file. Microsoft's Arabic fonts, created for Windows 
        95, use a contextual substitution lookup (GSUB LookupType = 5) to implement the 
        &quot;mset&quot; feature.</p>
       <p><br>
        <a name="nalt"></a><b>Tag: </b>'nalt'</p>
       <p><i>Friendly name: </i>Alternate Annotation Forms</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>Replaces default glyphs with various notational forms (e.g. 
        glyphs placed in open or solid circles, squares, parentheses, diamonds or 
        rounded boxes). In some cases an annotation form may already be present, but 
        the user may want a different one.</p>
       <p><i>Example: </i>The user invokes this feature to get U+3200 (the circled form 
        of 'ga') from U+3131 (hangul 'ga').</p>
       <p><i>Recommended implementation: </i>The nalt table maps GIDs for various 
        standard forms to one or more corresponding annotation forms. While many of 
        these substitutions are one-to-one (GSUB lookup type 1), others require a 
        selection from a set (GSUB lookup type 3). The manufacturer may choose to build 
        two tables (one for each lookup type) or only one which uses lookup type 3 for 
        all substitutions. If more than one form is present, the set of forms for each 
        character should be ordered consistently - both within the font and across the 
        family.</p>
       <p><i>Application interface: </i>For GIDs found in the nalt coverage table, the 
        application passes a GID and gets back a set of new GIDs, then stores the one 
        selected by the user.</p>
       <p><i>UI suggestion: </i>This feature should be inactive by default. The 
        application must provide a means for the user to select the desired form from 
        the set returned by the table. It can note the position of the selected form in 
        a set of alternates, and offer the glyph at that position as the default 
        selection the next time this feature is invoked. In the absence of such prior 
        information, the application may assume that the first glyph in a set is the 
        preferred form, so the font developer should order them accordingly.</p>
       <p><i>Script/language sensitivity: </i>Used mostly in CJKV fonts, but can apply 
        to European scripts.</p>
       <p><i>Feature interaction: </i>This feature is mutually exclusive with all other 
        features, which should be turned off when it's applied, except the 
<a href="features_uz.htm#vert">vert</a> and 
<a href="features_uz.htm#vrt2">vrt2</a> features, which may be used in addition.</p>
       <P><BR>
        <A NAME="nlck"></A><B>Tag: </B>
       &quot;nlck&quot;<P>
        <I>Friendly name: </I>
       NLC Kanji Forms<P>
        <I>Registered by: </I>
       Adobe Systems Inc.<P>
        <I>Function: </I>
       The National Language Council (NLC) of Japan has defined
 new glyph shapes for a number of JIS characters. The 'nlck'
    feature is used to access those glyphs.</p><P>
        <I>Example: </I>
       The glyph <img src="nlc1.gif">
 is replaced
 by the glyph <img src="nlc2.gif">
.
       <P>
        <I>Recommended implementation:</i> One-for-one substitution of non-NLC glyphs by the corresponding NLC glyph.<P>
        <I>UI suggestion: </I>
       This feature should be off by default.<P>
        <I>Script/language sensitivity: </I>
       Used only with Kanji script.<P>
        <I>Feature interaction: </I>
       This feature is exclusive with the 'jp78', 'jp83', 'jp90' and similar features. It can be combined with the 'palt', 'vpal', 'vert' and 'vrt2' features.<P>

       <P><BR>
        <A NAME="nukt"></A><B>Tag: </B>
       &quot;nukt&quot;<P>
        <I>Friendly name: </I>
       Nukta Forms<P>
        <I>Registered by: </I>
       Microsoft<P>
        <I>Function: </I>
       Produces Nukta forms in Indic scripts.<P>
        <I>Example: </I>
       In Hindi (Devanagari script), a consonant when combined with a nukta gives its 
       nukta form.
       <P>
        <I>Recommended implementation: </I>The <B>nukt</B>
       table maps the sequence of a consonant followed by a nukta to the consonant's 
       nukta form (GSUB lookup type 4).<P>
        <I>Application interface: </I>
       The application passes the sequence of GIDs (consonant and nukta), to the 
       table, and gets back the GID for the nukta form.<P>
        <I>UI suggestion: </I>
       This feature should be on by default.<P>
        <I>Script/language sensitivity: </I>
       Required in Indic scripts.<P>
        <I>Feature interaction: </I>
       This feature overrides the results of all other features.<P>
       <p><br>
        <a name="numr"></a><b>Tag: </b>'numr'</p>
       <p><i>Friendly name: </i>Numerators</p>
       <p><i>Registered by: </i>Adobe
       </p>
       <p><i>Function: </i>Replaces selected figures which precede a slash with 
        numerator figures, and replaces the typographic slash with the fraction slash.</p>
       <p><i>Example: </i>In the string 11/17 selected by the user, the application 
        turns the 11 into numerators, and the slash into a fraction slash when the user 
        applies the fraction feature (<a href="features_fj.htm#frac">frac</a>).</p>
       <p><i>Recommended implementation: </i>The numr table maps sets of figures and 
        related characters to corresponding numerator glyphs in the font. It also maps 
        the typographic slash (U+002F) to the fraction slash (U+2044). All mappings are 
        one-to-one (GSUB lookup type 1).</p>
       <p><i>Application interface: </i>For GIDs found in the numr coverage table, the 
        application passes a GID to the table and gets back a new GID.</p>
       <p><i>UI suggestion: </i>This feature should normally be called by an 
        application when the user applies the <a href="features_fj.htm#frac">frac</a> feature.</p>
       <p><i>Script/language sensitivity: </i>None.</p>
       <p><i>Feature interaction: </i>This feature supports <a href="features_fj.htm#frac">frac</a>. 
        It may be used in combination with other substitution (GSUB) features, whose 
        results it may override.</p>
       <p><br>
        <a name="onum"></a><b>Tag: </b>'onum'</p>
       <p><i>Friendly name: </i>Oldstyle Figures</p>
       <p><i>Registered by: </i>Microsoft/Adobe</p>
       <p><i>Function: </i>This feature changes selected figures from the default 
        lining style to oldstyle form.</p>
       <p><i>Example: </i>The user invokes this feature to get oldstyle figures, which 
        fit better into the flow of normal upper- and lowercase text. Various 
        characters designed to be used with figures may also have oldstyle versions.</p>
       <p><i>Recommended implementation: </i>The onum table maps each lining figure, 
        and any associated characters, to the corresponding oldstyle form (GSUB lookup 
        type 1).</p>
       <p><i>Application interface: </i>For GIDs found in the onum coverage table, the 
        application passes a GID to the onum table and gets back a new GID.</p>
       <p><i>UI suggestion: </i>Users can switch between the lining and oldstyle sets 
        by turning this feature on or off. Note: This feature is separate from the 
        figure-width features <a href="features_pt.htm#pnum">pnum</a> and <a href="features_pt.htm#tnum">tnum</a>. 
        When the user changes figure style, the application may want to query whether a 
        change in width is also desired.</p>
       <p><i>Script/language sensitivity: </i>None.</p>
       <p><i>Feature interaction: </i>This feature overrides the results of the Lining 
        Figures feature (<a href="#lnum">lnum</a>).</p>
       <p><br>
        <a name="opbd"></a><b>Tag: </b>'opbd'</p>
       <p><i>Friendly name: </i>Optical Bounds</p>
       <p><i>Registered by: </i>Adobe (Modified by Adobe, this is the newer 
        description)</p>
       <p><i>Function: </i>Aligns glyphs by their apparent left or right extents in 
        horizontal setting, or apparent top or bottom extents in vertical setting, 
        replacing the default behavior of aligning glyphs by their origins. Another 
        name for this behavior would be visual justification. The optical edge of a 
        given glyph is only indirectly related to its advance width or bounding box; 
        this feature provides a means for getting true visual alignment.</p>
       <p><i>Example: </i>Succeeding lines beginning with T, D and W would shift to the 
        left by varying amounts when the text is left-justified and this feature is 
        applied. Succeeding lines ending with r, h and y would likewise shift to the 
        right by differing degrees when the text is right-justified and this feature is 
        applied.</p>
       <p><i>Recommended implementation: </i>Values for affected glyphs are defined 
        with a separate record for left, right, top, and bottom. Each record describes 
        the amount by which the placement and advance width should be altered (GPOS 
        lookup type 1).</p>
       <p><i>Application interface: </i>For GIDs found in the opbd coverage table, the 
        application calls one of two related tables, depending on the position of the 
        glyph. For glyphs at the left end of a horizontal line, it calls the <a href="#lfbd">
         lfbd</a> table, for glyphs at the right end of a horizontal line, it calls the <a href="features_pt.htm#rtbd">
         rtbd</a> table.</p>
       <p><i>UI suggestion: </i>This feature should be active by default. It 
        effectively changes the line length, so justification algorithms should account 
        for this adjustment.</p>
       <p><i>Script/language sensitivity: </i>None.</p>
       <p><i>Feature interaction: </i>Should not be applied to glyphs which use 
        fixed-width features (e.g. 
<a href="features_fj.htm#fwid">fwid</a>, 
<a href="features_fj.htm#halt">halt</a>, 
<a href="features_fj.htm#hwid">hwid</a>, 
<a href="features_pt.htm#qwid">qwid</a> and 
<a href="features_pt.htm#twid">twid</a>)
or vertical features (e.g. 
<a href="features_uz.htm#vert">vert</a>, 
<a href="features_uz.htm#vrt2">vrt2</a>, 
<a href="features_uz.htm#vpal">vpal</a>, 
<a href="features_uz.htm#valt">valt</a> and 
<a href="/typography/features_uz.htm#vhal">vhal</a>). Uses 
<a href="#lfbd"> lfbd</a> and 
<a href="features_pt.htm#rtbd">rtbd</a> features.</p>
       <p><br>
        <a name="ordn"></a><b>Tag: </b>'ordn'</p>
       <p><i>Friendly name: </i>Ordinals</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>Replaces default alphabetic glyphs with the corresponding 
        ordinal forms for use after figures. One exception to the follows-a-figure rule 
        is the numero character (U+2116), which is actually a ligature substitution, 
        but is best accessed through this feature.</p>
       <p><i>Example: </i>The user applies this feature to turn 2.o into 2.<sup>o</sup> 
        (abbreviation for secundo).</p>
       <p><i>Recommended implementation: </i>The ordn table maps various lowercase 
        letters to corresponding ordinal forms in a chained context (GSUB lookup type 
        6), and the sequence No to the numero character (GSUB lookup type 4).</p>
       <p><i>Application interface: </i>For sets of GIDs found in the clig coverage 
        table, the application passes the sequence of GIDs to the table and gets back 
        new GIDs. Note that full sequences must be passed. Note: This may be a change 
        of semantic value. Besides the original character codes, the application should 
        store the code for the new character.</p>
       <p><i>UI suggestion: </i>This feature should be off by default.</p>
       <p><i>Script/language sensitivity: </i>Applies mostly to Latin script.</p>
       <p><i>Feature interaction: </i>This feature may be used in combination with 
        other substitution (GSUB) features, whose results it may override.</p>
       <p><br>
        <a name="ornm"></a><b>Tag: </b>'ornm'</p>
       <p><i>Friendly name: </i>Ornaments</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>This is a dual-function feature, which uses two input 
        methods to give the user access to ornament glyphs (e.g. fleurons, dingbats and 
        border elements) in the font. One method replaces the bullet character with a 
        selection from the full set of available ornaments; the other replaces specific 
        &quot;lower ASCII&quot; characters with ornaments assigned to them. The first 
        approach supports the general or browsing user; the second supports the power 
        user.</p>
       <p><i>Example: </i>The user inputs qwwwwwwwwwe to form the top of a flourished 
        box in Adobe Caslon, or inputs the bullet character, then chooses the thistle 
        dingbat.</p>
       <p><i>Recommended implementation: </i>The ornm table maps all ornaments in a 
        font to the bullet character (GSUB lookup type 3) and each ornament in a font 
        to a corresponding alphanumeric character (GUSB lookup type 1). The 
        manufacturer may choose to build two tables (one for each lookup type) or only 
        one which uses lookup type 3 for all substitutions. As in any one-from-many 
        substitution, alternates present in more than one face should be ordered 
        consistently across a family, so that those alternates can work correctly when 
        switching between family members.</p>
       <p><i>Application interface: </i>When this feature is invoked, the application 
        must note whether the selected text is the bullet character (U+2022) or 
        alphanumeric characters. In the first case, it passes the GID for bullet to the 
        ornm table and gets back a set of GIDs, and gives the user a means to select 
        from among them. In the second case, for GIDs found in the ornm coverage table, 
        it passes GIDs to the ornm table and gets back new GIDs.</p>
       <p><i>UI suggestion: </i>This feature should be inactive by default. When more 
        than one GID is returned (the bullet case), an application could display the 
        forms sequentially in context, or present a palette showing all the forms at 
        once, or give the user a choice between these approaches. Once the user has 
        selected a specific ornament, that one should be the default selection the next 
        time the bullet is typed. In the absence of such prior information, the 
        application may assume that the first ornament in a set is the preferred form, 
        so the font developer should order them accordingly.</p>
       <p><i>Script/language sensitivity: </i>None.</p>
       <p><i>Feature interaction: </i>This feature is mutually exclusive with all other 
        substitution (GSUB) features, which should be turned off when it's applied.</p>

<P>
<FONT FACE="Verdana, Arial, Helvetica" SIZE=1 CLASS=detail>
<P CLASS=detail><BR><BR>
this page was last updated 14 October 2002<BR>
&copy; 2002 Microsoft Corporation. All rights reserved. <A HREF="/info/cpyright.htm">Terms of use</A>.<BR>
comments to the MST group: 
<A HREF="/typography/about.htm">how to contact us</A> 
<P>&nbsp;
</FONT>


</TD>
<TD WIDTH=20></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD COLSPAN=2 WIDTH=540></TD>
<TD WIDTH=20></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=5><IMG SRC="toprule.gif" WIDTH=580 HEIGHT=5 ALT=""></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD WIDTH=560 COLSPAN=3 VALIGN=TOP><FONT FACE="Verdana, Arial, Helvetica" SIZE=1 CLASS=detail>
	<A HREF="/typography/default.asp">Microsoft Typography</A>
	 | <A HREF="/typography/creators.htm">Developer information</A>
         | <A HREF="/typography/default.htm">Specifications</A>
	 | <A HREF="ttoreg.htm">OpenType Layout tag registry</A>
</FONT></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=20><IMG SRC="baserule.gif" WIDTH=580 HEIGHT=20></TD>
</TR>
</TABLE>

</CENTER>
</BODY>
</HTML>
