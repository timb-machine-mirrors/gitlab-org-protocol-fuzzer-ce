<HTML>
<HEAD>
<TITLE>OpenType Layout</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<LINK REL=STYLESHEET HREF="otspec.css" TYPE="text/css"></HEAD>
<BODY BGCOLOR="#FFFFFF" BOTTOMMARGIN="20" TOPMARGIN="0" LEFTMARGIN="0">


		
		
		
		
		
		
		
		
		
		
		

		
	
<!--TOOLBAR_START--><!--TOOLBAR_EXEMPT--><!--TOOLBAR_END--><P><BR>

<CENTER><P>

<TABLE WIDTH=580 CELLSPACING=0 CELLPADDING=0 BORDER=0>

<TR>
<TD HEIGHT=1 WIDTH=20><IMG SRC="pixel.gif" WIDTH=20 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=60><IMG SRC="pixel.gif" WIDTH=60 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=480><IMG SRC="pixel.gif" WIDTH=480 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=20><IMG SRC="pixel.gif" WIDTH=20 HEIGHT=1 ALT=""></TD>
</TR>
<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=5><IMG SRC="toprule.gif" WIDTH=580 HEIGHT=5></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD WIDTH=560 COLSPAN=3 VALIGN=TOP><FONT FACE="Verdana, Arial, Helvetica" SIZE=1 CLASS=detail>
	<A HREF="http://www.microsoft.com/typography/default.asp">Microsoft Typography</A>
	 | <A HREF="http://www.microsoft.com/typography/creators.htm">Developer...</A>
	 | <A HREF="default.htm">OpenType specification</A>
	 | OpenType Layout
</FONT></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=10><IMG SRC="midrule.gif" WIDTH=580 HEIGHT=10 ALT=""></TD>
</TR>


<TR>
<TD WIDTH=20></TD>
<TD WIDTH=60 VALIGN=TOP></TD>
<TD WIDTH=480 VALIGN=TOP>
<P><BR>
<FONT FACE="Verdana, Arial, Helvetica" SIZE=5 CLASS=heading>Advanced Typographic Extensions - OpenType Layout</FONT>

<P>
The Advanced Typographic tables (OpenType Layout tables) extend the functionality of fonts with either TrueType or CFF outlines. OpenType Layout fonts contain additional information that extends the capabilities of the fonts to support high-quality international typography:

<UL>
<LI>OpenType Layout fonts allow a rich mapping between characters and glyphs, which supports ligatures, positional forms, alternates, and other substitutions.
<LI>OpenType Layout fonts include information to support features for two-dimensional positioning and glyph attachment.
<LI>OpenType Layout fonts contain explicit script and language information, so a text-processing application can adjust its behavior accordingly.
<LI>OpenType Layout fonts have an open format that allows font developers to define their own typographical features.
</UL>

<P>
This overview introduces the power and flexibility of the OpenType Layout font model. The OpenType Layout tables are described in more detail in the <A HREF="otff.htm#otttables">"Font File Tables"</A> section of the OpenType specification.

<P>
OpenType Layout Common Table Formats are documented in the chapter <A HREF="CHAPTER2.htm">&quot;OpenType Layout Common Table Formats&quot;</A>.
<P>
Registered OpenType Layout Tags for scripts, languages, and baselines, are documented in the chapter <A HREF="TTOREG.htm">&quot;OpenType Layout Registered Features&quot;</A>.

<P> 
<BR>
<B>OpenType Layout at a Glance</B>
<P>
OpenType Layout addresses complex typographical issues that especially affect people using text-processing applications in multi-lingual and non-Latin environments. 
<P>
OpenType Layout fonts may contain alternative forms of characters and mechanisms for accessing them. For example, in Arabic, the shape of a character often varies with the character's position in a word. As shown here, the ha character will take any of four shapes, depending on whether it stands alone or whether it falls at the beginning, middle, or end of a word. OpenType Layout helps a text-processing application determine which variant to substitute when composing&nbsp;text.
<P>

<TABLE CELLPADDING=10 BORDER=0 BGCOLOR=#F0F0F0><TR><TD>
<IMG WIDTH=254 HEIGHT=61 ALT="DIAGRAM" SRC="fig1a.gif">
</TD></TR>
</TABLE>

<P CLASS=caption><B>Figure 1a</B> Isolated, initial, medial, and final forms of the Arabic character&nbsp;ha.

<P>
<BR>
Similarly, OpenType Layout helps an application use the correct forms of characters when text is positioned vertically instead of horizontally, such as with Kanji. For example, Kanji uses alternative forms of parentheses when positioned vertically.
<P>

<TABLE BORDER=0 CELLPADDING=10 BGCOLOR=#F0F0F0><TR><TD>
<IMG WIDTH=240 HEIGHT=88 ALT="DIAGRAM" SRC="fig1b.gif">
</TD></TR>
</TABLE>

<P CLASS=caption><B>Figure 1b</B> Alternative forms of parentheses used when positioning Kanji vertically.

<P><BR>
The OpenType Layout font format also supports the composition and decomposition of ligatures. For example, English, French, and other languages based on Latin can substitute a single ligature, such as &quot;fi&quot;, for its component glyphs - in this case, &quot;f&quot; and &quot;i&quot;. Conversely, the individual &quot;f&quot; and &quot;i&quot; glyphs could replace the ligature, possibly to give a text-processing application more flexibility when spacing glyphs to fill a line of justified&nbsp;text.
<P>

<TABLE BORDER=0 CELLPADDING=10 BGCOLOR=#F0F0F0><TR>
<TD><IMG WIDTH=201 HEIGHT=59 ALT="DIAGRAM" SRC="fig1c.gif">
</TD></TR>
</TABLE>

<P CLASS=CAPTION>
<B>Figure 1c</B> Two Latin glyphs and their associated ligature.</FONT>

<P>
<BR>


<TABLE BORDER=0 CELLPADDING=10 BGCOLOR=#F0F0F0><TR><TD>
<IMG WIDTH=277 HEIGHT=68 ALT="DIAGRAM" SRC="fig1d.gif">
</TD></TR></TABLE>

<P CLASS=caption><B>Figure 1d</B> Three Arabic glyphs and their associated ligature.

<P><BR>
Glyph substitution is just one way OpenType Layout extends font capabilities. Using precise X and Y coordinates for positioning glyphs, OpenType Layout fonts also can identify points for attaching one glyph to another to create cursive text and glyphs that need diacritical or other special&nbsp;marks.
<P>OpenType Layout fonts also may contain baseline information that specifies how to position glyphs horizontally or vertically. Because baselines may vary from one script (set of characters) to another, this information is especially useful for aligning text that mixes glyphs from scripts for different languages.
<P><BR>

<TABLE BORDER=0 CELLPADDING=10 BGCOLOR=#F0F0F0><TR><TD>
<IMG WIDTH=426 HEIGHT=62 ALT="DIAGRAM" SRC="fig1e.gif"></TD></TR>
</TABLE>

<P CLASS=caption><B>Figure 1e</B> A line of text, baselines adjusted, mixing Latin and Arabic&nbsp;scripts.
<P>
<BR>
<B>TrueType versus OpenType Layout</B>
<P>
A TrueType font is a collection of several tables that contain different types of data: glyph outlines, metrics, bitmaps, mapping information, and much more. OpenType Layout fonts contain all this basic information, plus additional tables containing information for advanced typography.
<P> 
Text-processing applications - referred to as &quot;clients&quot; of OpenType Layout - can retrieve and parse the information in OpenType Layout tables. So, for example, a text-processing client can choose the correct character shapes and space them&nbsp;properly.
<P> 
As much as possible, the tables of OpenType Layout define only the information that is specific to the font layout. The tables do not try to encode information that remains constant within the conventions of a particular language or the typography of a particular script. Such information that would be replicated across all fonts in a given language belongs in the text-processing application for that language, not in the&nbsp;fonts.
<P><BR>
<B>OpenType Layout Terminology</B>
<P>
The OpenType Layout model is organized around glyphs, scripts, language systems, and&nbsp;features.
<P>
<BR>
<I>Characters versus glyphs</I>
<P> 
Users don't view or print characters: a user views or prints <I>glyphs</I>. A glyph is a representation of a character. The character &quot;capital letter A&quot; is represented by the glyph &quot;A&quot; in Times New Roman Bold and &quot;A&quot; in Arial Bold. A font is a collection of glyphs. To retrieve glyphs, the client uses information in the &quot;cmap&quot; table of the font, which maps the client's character codes to glyph indices in the&nbsp;table.
<P>
Glyphs can also represent combinations of characters and alternative forms of characters: glyphs and characters do not strictly correspond one-to-one. For example, a user might type two characters, which might be better represented with a single ligature glyph. Conversely, the same character might take different forms at the beginning, middle, or end of a word, so a font would need several different glyphs to represent a single character. OpenType Layout fonts contain a table that provides a client with information about possible glyph substitutions.
<P>

<TABLE BORDER=0 CELLPADDING=10 BGCOLOR=#F0F0F0><TR><TD>
<IMG  WIDTH=250 HEIGHT=58 ALT="DIAGRAM" SRC="fig1f.gif"></TD></TR>
</TABLE>
<P CLASS=CAPTION><B>Figure 1f</B> Multiple glyphs for the ampersand character.

<P><BR>
<I>Scripts</I>
<P>
A script is composed of a group of related characters, which may be used by one or more languages. Latin, Arabic, and Thai are examples of scripts. A font may use a single script, or it may use many scripts. Within an OpenType Layout font, scripts are identified by unique <NOBR>4-byte <I>tags</I>.</NOBR>
<P>

<TABLE BORDER=0 CELLPADDING=10 BGCOLOR=#F0F0F0><TR><TD>
<IMG WIDTH=172 HEIGHT=53 ALT="DIAGRAM" SRC="fig1g.gif"></TD></TR>
</TABLE>

<P CLASS=CAPTION><B>Figure 1g</B> Glyphs in the Latin, Kanji, and Arabic scripts.

<P><BR>
<I>Language systems</I><P>
Scripts, in turn, may be divided into language systems. For example, the Latin script is used to write English, French, or German, but each language has its own special requirements for text processing. A font developer can choose to provide information that is tailored to the script, to the language system, or to&nbsp;both. 
<P> Language systems, unlike scripts, are not necessarily evident when a text-processing client examines the characters being used. To avoid ambiguity, the user or the operating system needs to identify the language system. Otherwise, the client will use the default language-system information provided with each&nbsp;script.
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0><TR><TD>
<IMG  WIDTH=316 HEIGHT=152 ALT="DIAGRAM" SRC="fig1h.gif"></TD></TR>
</TABLE>

<P CLASS=CAPTION><B>Figure 1h</B> Differences in the English, French, and German language system.

<P>
<BR>
<I>Features</I>
<P>
Features define the basic functionality of the font. A font that contains tables to handle diacritical marks will have a &quot;mark&quot; feature. A font that supports substitution of vertical glyphs will have a &quot;vert&quot; &nbsp;feature.
<P>
The OpenType Layout feature model provides great flexibility to font developers because features do not have to be predefined by Microsoft Corporation. Instead, font developers can work with application developers to determine useful features for fonts, add such features to OpenType Layout fonts, and enable client applications to support such&nbsp;features.

<P>
<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0><TR><TD>
<IMG  WIDTH=375 HEIGHT=482 ALT="DIAGRAM" SRC="fig1i.gif"></TD></TR>
</TABLE>

<P CLASS=CAPTION><B>Figure 1i</B> The relationship of scripts, language systems, features, and lookups for substitution and positioning tables.
<P>
<BR>
<I>OpenType Layout tables</I>
<P>
OpenType Layout comprises five new tables: GSUB, GPOS, BASE, JSTF, and GDEF. These tables and their formats are discussed in detail in the chapters that follow this&nbsp;overview.
<P>
GSUB: Contains information about glyph substitutions to handle single glyph substitution, one-to-many substitution (ligature decomposition), aesthetic alternatives, multiple glyph substitution (ligatures), and contextual glyph substitution.
<P>
GPOS: Contains information about X and Y positioning of glyphs to handle single glyph adjustment, adjustment of paired glyphs, cursive attachment, mark attachment, and contextual glyph positioning. <P>BASE: Contains information about baseline offsets on a script-by-script basis.<P>JSTF: Contains justification information, including whitespace and Kashida adjustments.<P>GDEF: Contains information about all individual glyphs in the font: type (simple glyph, ligature, or combining mark), attachment points (if any), and ligature caret (if a ligature&nbsp;glyph).
<P>
Common Table Formats: Several <A HREF="chapter2.htm">common table formats</A> are used by the OpenType Layout tables.
<P>
<BR>
<B>Text processing with OpenType Layout fonts</B>
<P>
A text-processing client follows a standard process to convert the string of characters entered by a user into positioned glyphs. To produce text with OpenType Layout&nbsp;fonts:

<OL>
<LI>Using the cmap table in the font, the client converts the character codes into a string of glyph&nbsp;indices.
<LI>Using information in the GSUB table, the client modifies the resulting string, substituting positional or vertical glyphs, ligatures, or other alternatives as appropriate.
<LI>Using positioning information in the GPOS table and baseline offset information in the BASE table, the client then positions the&nbsp;glyphs.
<LI>Using <I>design coordinates</I> the client determines device-independent line breaks. Design coordinates are high-resolution and device-independent.
<LI>Using information in the JSTF table, the client justifies the lines, if the user has specified such&nbsp;alignment.
<LI>The operating system rasterizes the line of glyphs and renders the glyphs in <I>device coordinates</I> that correspond to the resolution of the output&nbsp;device.
</OL>
<P>
Throughout this process the text-processing client keeps track of the association between the character codes for the original text and the glyph indices of the final, rendered text. In addition, the client may save language and script information within the text stream to clearly associate character codes with typographical behavior.
<P>
<BR>
<B>OpenType Layout fonts in Windows&nbsp;95</B><P>
The core system fonts in the Middle East and Far East versions of Windows 95 are OpenType Layout fonts. These fonts demonstrate aspects of OpenType Layout's versatility.
<P>
<BR>
<I>Middle East Windows 95</I><P>
Middle East Windows 95 uses several Arabic OpenType Layout fonts: fixed regular weight, proportional regular weight, fixed bold, and proportional bold. These fonts take advantage of many glyph substitution features available in OpenType Layout, namely simple substitution (one-to-one contextual), ligature substitution (many-to-one), and mark set substitutions. In Middle East Windows 95, the operating system itself handles glyph substitution, using data in the GSUB table of each&nbsp;font.
<P>
<BR>
<I>Far East Windows 95</I><P>
Far East Windows 95 also uses several OpenType Layout fonts: fixed serif, proportional serif, fixed sans serif, and proportional sans serif. The Japanese fonts take advantage of a subset of OpenType Layout features, including vertical glyph substitution and baseline positioning. As with Middle East Windows 95, the operating system in Far East Windows 95 will handle glyph substitution, using data in the GSUB table in each font. However, the text-processing client will need to handle baseline positioning, using data in the BASE table in each&nbsp;font.
<P>
<FONT FACE="Verdana, Arial, Helvetica" SIZE=1><P CLASS=detail><BR><BR>
	this page was last updated 22 March 2001<BR>
	&copy; 2001 Microsoft Corporation. All rights reserved. <A HREF="http://www.microsoft.com/Misc/cpyright.htm">Terms of use</A>.<BR>
	comments to the MST group: 
	<A HREF="/typography/about.htm">how to contact us</A>.
	<P>&nbsp;
</FONT>
</TD>
<TD WIDTH=20></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD COLSPAN=2 WIDTH=540></TD>
<TD WIDTH=20></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=10><IMG SRC="midrule.gif" WIDTH=580 HEIGHT=10 ALT=""></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD WIDTH=560 COLSPAN=3 VALIGN=TOP><FONT FACE="Verdana, Arial, Helvetica" SIZE=1 CLASS=detail>
	<A HREF="http://www.microsoft.com/typography/default.asp">Microsoft Typography</A>
	 | <A HREF="http://www.microsoft.com/typography/creators.htm">Developer...</A>
	 | <A HREF="default.htm">OpenType specification</A>
	 | OpenType Layout
</FONT></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=20><IMG SRC="baserule.gif" WIDTH=580 HEIGHT=20></TD>
</TR>
</TABLE>

</CENTER>
</BODY>
</HTML>



