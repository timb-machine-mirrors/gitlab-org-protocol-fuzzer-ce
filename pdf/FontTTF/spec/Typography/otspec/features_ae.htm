<HTML>
<HEAD>
<TITLE>OpenType Layout tag registry</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<LINK REL=STYLESHEET HREF="otspec.css" TYPE="text/css"></HEAD>
<BODY BGCOLOR="#FFFFFF" BOTTOMMARGIN="20" TOPMARGIN="0" LEFTMARGIN="0">		
	
<!--TOOLBAR_START--><!--TOOLBAR_EXEMPT--><!--TOOLBAR_END--><P><BR>

<CENTER><P>

<TABLE WIDTH=580 CELLSPACING=0 CELLPADDING=0 BORDER=0>

<TR>
<TD HEIGHT=1 WIDTH=20><IMG SRC="pixel.gif" WIDTH=20 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=60><IMG SRC="pixel.gif" WIDTH=60 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=480><IMG SRC="pixel.gif" WIDTH=480 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=20><IMG SRC="pixel.gif" WIDTH=20 HEIGHT=1 ALT=""></TD>
</TR>
<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=5><IMG SRC="toprule.gif" WIDTH=580 HEIGHT=5></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD WIDTH=560 COLSPAN=3 VALIGN=TOP><FONT FACE="Verdana, Arial, Helvetica" SIZE=1 CLASS=detail>
	<A HREF="/typography/default.asp">Microsoft Typography</A>
	 | <A HREF="/typography/creators.htm">Developer information</A>
         | <A HREF="/typography/default.htm">Specifications</A>
	 | <A HREF="ttoreg.htm">OpenType Layout tag registry</A>
</FONT></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=20><IMG SRC="baserule.gif" WIDTH=580 HEIGHT=20 ALT=""></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD WIDTH=60 VALIGN=TOP></TD>
<TD WIDTH=480 VALIGN=TOP>
<P><BR>

<P>
<BR>
<B>Registered features - <i>definitions and implementations</i></B>
<P>
a - e
 | 
<A HREF="features_fj.htm">f - j</A>
 | 
<A HREF="features_ko.htm">k - o</A>
 | 
<A HREF="features_pt.htm">p - t</A>
 | 
<A HREF="features_uz.htm">u - z</A>

<P>
<BR>
        <a name="aalt"></a><b>Tag: </b>'aalt'</p>
       <p><i>Friendly name: </i>Access All Alternates</p>
       <p><i>Registered by: </i>Adobe
       </p>
       <p><i>Function: </i>This feature makes all variations of a selected character 
        accessible. This serves several purposes: An application may not support the 
        feature by which the desired glyph would normally be accessed; the user may 
        need a glyph outside the context supported by the normal substitution, or the 
        user may not know what feature produces the desired glyph. Since many-to-one 
        substitutions are not covered, ligatures would not appear in this table unless 
        they were variant forms of another ligature.</p>
       <p><i>Example: </i>A user inputs the P in Poetica, and is presented with a 
        choice of the four standard capital forms, the eight swash capital forms, the 
        initial capital form and the small capital form.</p>
       <p><i>Recommended implementation: </i>The aalt table groups glyphs into semantic 
        units. These units include the glyph which represents the default form for the 
        underlying Unicode value stored by the application. While many of these 
        substitutions are one-to-one (GSUB lookup type 1), others require a selection 
        from a set (GSUB lookup type 3). The manufacturer may choose to build two 
        tables (one for each lookup type) or only one which uses lookup type 3 for all 
        substitutions. As in any one-from-many substitution, alternates present in more 
        than one face should be ordered consistently across a family, so that those 
        alternates can work correctly when switching between family members. This 
        feature should be ordered first in the font, to take precedence over other 
        features.</p>
       <p><i>Application interface: </i>The application determines the GID for the 
        default form of a given character (Unicode value with no features applied). It 
        then checks to see whether the GID is found in the aalt coverage table. If so, 
        the application passes this value to the feature table and gets back the GIDs 
        in the associated group.</p>
       <p><i>UI suggestion: </i>While most one-from-many substitution features can be 
        applied globally with reasonable results, aalt is not designed to support this 
        use. The application should indicate to the user which glyphs in the user's 
        document have alternative forms (i.e which are in the coverage table for aalt). 
        When the user selects one of those glyphs and applies the aalt feature, an 
        application could display the forms sequentially in context, or present a 
        palette showing all the forms at once, or give the user a choice between these 
        approaches. The application may assume that the first glyph in a set is the 
        preferred form, so the font developer should order them accordingly. When only 
        one alternate exists, this feature could toggle directly between the alternate 
        and default forms.</p>
       <p><i>Script/language sensitivity: </i>None.</p>
       <p><i>Feature interaction: </i>This feature may be used in combination with 
        other features.</p>

       <P><BR>
        <a name="abvf"></a><B>Tag: </B>'abvf'</P>
       <p><i>Friendly name: </i>Above-base Forms</p>
       <p><i>Registered by: </i>Microsoft</p>
       <p><i>Function: </i>Substitutes the above-base form of a vowel.</p>
       <p><i>Example: </i>In complex scripts like Khmer, the vowel OE must be split into 
        a pre-base form and an above-base form. The above-base form of OE would be substituted to form the 
        correct piece of the letter that is displayed above the base consonant.
       </p>
       <p><i>Recommended implementation: </i>This feature substitutes the GID for OE with the above part of the glyph (GSUB lookup type 1).</p>
       <p><i>Application interface: </i>In a sequence where a split vowel with an above form is used, 
        the application must insert the pre-base glyph into the correct location and then apply the
        above-base form feature. The application gets back the GID for the correct form for the piece
        that is placed above the base glyph. The application may also choose to position this glyph if 
        required, after this feature is called.
       </p>
       <p><i>UI suggestion: </i>This feature should be on by default.</p>
       <p><i>Script/language sensitivity: </i>Required in Khmer script.</p>
       <p><i>Feature interaction: </i>This feature overrides the results of all other 
        features.
       </p>
       <P><BR>
        <a name="abvm"></a><b>Tag: </b>'abvm'</P>
       <p><i>Friendly name: </i>Above-base Mark Positioning</p>
       <p><i>Registered by: </i>Microsoft</p>
       <p><i>Function: </i>Positions marks above base glyphs.
       </p>
       <p><i>Example: </i>In complex scripts like Devanagari (Indic), the Anuswar needs 
        to be positioned above the base glyph. This base glyph can be a base consonant 
        or conjunct. The base glyph and the presence/absence of other marks above the 
        base glyph decides the location of the Anuswar, so that they do not overlap 
        each other.</p>
       <p><i>Recommended implementation: </i>The <B>abvm</B> table provides positioning 
        information (x,y) to enable mark positioning (GPOS lookup type 4, 5).</p>
       <p><i>Application interface: </i>The application must define the GIDs of the 
        base glyphs above which marks need to be positioned, and the marks themselves. 
        If these are located in the coverage table, the application passes the sequence 
        to the <B>abvm </B>table and gets the positioning values (x,y) or positioning 
        adjustments for the mark in return.
       </p>
       <p><i>UI suggestion: </i>This feature should be on by default.</p>
       <p><i>Script/language sensitivity: </i>Required in Indic scripts.</p>
       <p><i>Feature interaction: </i>Can be used to position default marks; or those 
        that have been selected from a number of alternates based on contextual 
        requirement using a feature like <a href="#abvs">abvs</a>.</p>
       <p><br>
        <a name="abvs"></a><b>Tag: </b>'abvs'</p>
       <p><i>Friendly name: </i>Above-base Substitutions</p>
       <p><i>Registered by: </i>Microsoft</p>
       <p><i>Function: </i>Substitutes a ligature for a base glyph and mark that's 
        above it.
       </p>
       <p><i>Example: </i>In complex scripts like Kannada (Indic), the vowel sign for 
        the vowel I which a mark, is positioned above base consonants. This mark 
        combines with the consonant Ga to form a ligature.
       </p>
       <p><i>Recommended implementation: </i>Lookups for this feature map each sequence 
        of consonant and vowel sign to the corresponding ligature in the font (GSUB 
        lookup type 4).</p>
       <p><i>Application interface: </i>The application must define the GIDs of the 
        base glyphs and the mark that combines with it to form a ligature. The 
        application passes the sequence to the <B>abvs</B> table. If these are located 
        in the coverage table, it gets the GID for the ligature in return.
       </p>
       <p><i>UI suggestion: </i>This feature should be on by default.</p>
       <p><i>Script/language sensitivity: </i>Required in Indic scripts.</p>
       <p><i>Feature interaction: </i>None.
       </p>
       <p><br>
        <a name="afrc"></a><b>Tag: </b>'afrc'</p>
       <p><i>Friendly name: </i>Alternative Fractions</p>
       <p><i>Registered by: </i>Microsoft</p>
       <p><i>Function: </i>Replaces figures separated by a slash with an alternative 
        form.</p>
       <p><i>Example: </i>The user enters 3/4 in a recipe and get the threequarters nut 
        fraction.</p>
       <p><i>Recommended implementation: </i>The afrc table maps sets of figures 
        separated by slash (U+002F) or fraction (U+2044) characters to corresponding 
        fraction glyphs in the font (GSUB lookup type 4).</p>
       <p><i>Application interface: </i>The application must define the full sequence 
        of GIDs to be replaced. When the full sequence is found in the frac coverage 
        table, the application passes the sequence to the afrc table and gets a new GID 
        in return.</p>
       <p><i>UI suggestion: </i>This feature should be off by default.</p>
       <p><i>Script/language sensitivity: </i>None.</p>
       <p><i>Feature interaction: </i>This feature overrides the results of all other 
        features.</p>
       <p><br>
        <a name="akhn"></a><b>Tag: </b>'akhn'</p>
       <p><i>Friendly name: </i>Akhand</p>
       <p><i>Registered by: </i>Microsoft</p>
       <p><i>Function: </i>
       Preferentially substitutes a sequence of characters with a ligature. This 
       substitution is done irrespective of any characters that may precede or follow 
       the sequence.
       <p><i>Example: </i>In complex scripts like Devanagari (Indic), the sequence Ka, 
        Halant, Ssa should always produce the ligature Kssa, irrespective of characters 
        that precede/follow the above given sequence. The Kssa is identified in 
        Devanagari as an Akhand character (meaning unbreakable).
       </p>
       <p><i>Recommended implementation: </i>This feature maps the sequences for 
        generating Akhands defined in the given script, to the ligature they form (GSUB 
        lookup type 4).</p>
       <p><i>Application interface: </i>The application passes the full sequence of 
        GIDs. If these are located in the coverage table of the Akhand table, the 
        application gets back the GID for the akhand ligature in return.
       </p>
       <p><i>UI suggestion: </i>This feature should be on by default.</p>
       <p><i>Script/language sensitivity: </i>Required in most Indic scripts.</p>
       <p><i>Feature interaction: </i>This feature overrides the results of all other 
        features.
       </p>
       <P><BR>
        <a name="blwf"></a><B>Tag: </B>'blwf'</P>
       <p><i>Friendly name: </i>Below-base Forms</p>
       <p><i>Registered by: </i>Microsoft</p>
       <p><i>Function: </i>Substitutes the below-base form of a consonant in conjuncts.</p>
       <p><i>Example: </i>In complex scripts like Oriya (Indic), the consonant Va has a 
        below-base form that is used to generate conjuncts. Given a sequence Gha, 
        Virama (Halant), Va; the below-base form of Va would be substituted to form the 
        conjunct GhVa.
       </p>
       <p><i>Recommended implementation: </i>This feature substitutes the GID sequence 
        of consonant followed by (virama) halant; by the GID of the below base form of 
        the consonant (GSUB lookup type 4).</p>
       <p><i>Application interface: </i>In a conjunct formation sequence, if a 
        consonant is identified as having a below base form, the application gets back 
        the GID for this. The application may also choose to position this glyph if 
        required, after this feature is called.
       </p>
       <p><i>UI suggestion: </i>This feature should be on by default.</p>
       <p><i>Script/language sensitivity: </i>Required in a number of Indic scripts.</p>
       <p><i>Feature interaction: </i>This feature overrides the results of all other 
        features.
       </p>
       <P><BR>
        <a name="blwm"></a><b>Tag: </b>'blwm'</P>
       <p><i>Friendly name: </i>Below-base Mark Positioning</p>
       <p><i>Registered by: </i>Microsoft</p>
       <p><i>Function: </i>Positions marks below base glyphs.
       </p>
       <p><i>Example: </i>In complex scripts like Gujarati (Indic), the vowel sign U 
        needs to be positioned below base consonant/conjuncts that form the base glyph. 
        This position can vary depending on the base glyph, as well as the 
        presence/absence of other marks below the base glyph.</p>
       <p><i>Recommended implementation: </i>The <B>blwm</B> table provides positioning 
        information (x,y) to enable mark positioning (GPOS lookup type 4, 5).</p>
       <p><i>Application interface: </i>The application must define the GIDs of the 
        base glyphs below which marks need to be positioned, and the marks themselves. 
        If these are located in the coverage table, the application passes the sequence 
        to the <B>blwm </B>table and gets the positioning values (x,y) or positioning 
        adjustments for the mark in return.
       </p>
       <p><i>UI suggestion: </i>This feature should be on by default.</p>
       <p><i>Script/language sensitivity: </i>Required in Indic scripts.</p>
       <p><i>Feature interaction: </i>Can be used to position default marks; or those 
        that have been selected from a number of alternates based on contextual 
        requirement using a feature like <a href="#blws">blws</a>.
       </p>
       <P><BR>
        <A NAME="blws"></A><B>Tag: </B>
       &quot;blws&quot;<P>
        <I>Friendly name: </I>
       Below-base Substitutions<P>
        <I>Registered by: </I>
       Microsoft<P>
        <I>Function: </I>
       Produces ligatures that comprise of base glyph and below-base forms.
       <P>
        <I>Example: </I>
       In the Malayalam script (Indic), the conjunct Kla, requires a ligature which is 
       formed using the base glyph Ka and the below-base form of consonant La. This 
       feature can also be used to substitute ligatures formed using base glyphs and 
       below base matras in Indic scripts.<P>
        <I>Recommended implementation: </I>The <B>blws</B>
       table maps the identified conjunct forming sequences; or consonant vowel sign 
       sequences; to their ligatures (GSUB lookup type 4).<P>
        <I>Application interface: </I>For GIDs found in the <B>blws</B>
       coverage table, the application passes the sequence of GIDs to the table, and 
       gets back the GID for the ligature.<P>
        <I>UI suggestion: </I>
       This feature should be on by default.<P>
        <I>Script/language sensitivity: </I>
       Required in Indic scripts.<P>
        <I>Feature interaction: </I>
       This feature overrides the results of all other features.<P>
       <p><br>
       <p><br>
        <a name="calt"></a><b>Tag: </b>'calt'</p>
       <p><i>Friendly name: </i>Contextual Alternates</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>In specified situations, replaces default glyphs with 
        alternate forms which provide better joining behavior. Used in script typefaces 
        which are designed to have some or all of their glyphs join.</p>
       <p><i>Example: </i>In Caflisch Script, o is replaced by o.alt2 when followed by 
        an ascending letterform.</p>
       <p><i>Recommended implementation: </i>The calt table specifies the context in 
        which each substitution occurs, and maps one or more default glyphs to 
        replacement glyphs (GSUB lookup type 6).</p>
       <p><i>Application interface: </i>The application passes sequences of GIDs to the 
        feature table, and gets back new GIDs. Note that full sequences must be passed.</p>
       <p><i>UI suggestion: </i>This feature should be active by default.</p>
       <p><i>Script/language sensitivity: </i>Not applicable to ideographic scripts.</p>
       <p><i>Feature interaction: </i>This feature may be used in combination with 
        other substitution (GSUB) features, whose results it may override.</p>
       <p><br>
        <a name="case"></a><b>Tag: </b>'case'</p>
       <p><i>Friendly name: </i>Case-Sensitive Forms</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>Shifts various punctuation marks up to a position that works 
        better with all-capital sequences or sets of lining figures; also changes 
        oldstyle figures to lining figures. By default, glyphs in a text face are 
        designed to work with lowercase characters. Some characters should be shifted 
        vertically to fit the higher visual center of all-capital or lining text. Also, 
        lining figures are the same height (or close to it) as capitals, and fit much 
        better with all-capital text.</p>
       <p><i>Example: </i>The user selects a block of text and applies this feature. 
        The dashes, bracketing characters, guillemet quotes and the like shift up to 
        match the capitals, and oldstyle figures change to lining figures.</p>
       <p><i>Recommended implementation: </i>The font may implement this change by 
        substituting different glyphs (GSUB lookup type 1) or by repositioning the 
        original glyphs (GPOS lookup type 1).</p>
       <p><i>Application interface: </i>The application queries whether specific GIDs 
        are found in the coverage table for the case feature. If so, it passes these 
        IDs to the table and gets back either new GIDs or positional adjustments 
        (XPlacement and YPlacement).</p>
       <p><i>UI suggestion: </i>It would be good to apply this feature (or turn it off) 
        by default when the user changes case on a sequence of more than one character. 
        Applications could also detect words consisting only of capitals, and apply 
        this feature based on user preference settings.</p>
       <p><i>Script/language sensitivity: </i>Applies only to European scripts; 
        particularly prominent in Spanish-language setting.</p>
       <p><i>Feature interaction: </i>This feature overrides the results of other 
        features affecting the figures (e.g. <a href="features_ko.htm#onum">onum</a> and <a href="features_pt.htm#tnum">
         tnum</a>).</p>
       <P><BR>
        <A NAME="ccmp"></A><B>Tag: </B>
       &quot;ccmp&quot;<P>
        <I>Friendly name: </I>
       Glyph Composition/Decomposition
       <P>
        <I>Registered by: </I>
       Microsoft<P>
        <I>Function: </I>
       To minimize the number of glyph alternates, it is sometimes desired to 
       decompose a character into two glyphs. Additionally, it may be preferable to 
       compose two characters into a single glyph for better glyph processing. This 
       feature permits such composition/decompostion. The feature should be processed 
       as the first feature processed, and should be processed only when it is called.<P>
        <I>Example: </I>
       In Syriac, the character 0x0732 is a combining mark that has a dot above AND a 
       dot below the base character. To avoid multiple glyph variants to fit all base 
       glyphs, the character is decomposed into two glyphs...a dot above and a dot 
       below. These two glyphs can then be correctly placed using GPOS. In Arabic it 
       might be preferred to combine the shadda with fatha (0x0651, 0x064E) into a 
       ligature before processing shapes. This allows the font vendor to do special 
       handling of the mark combination when doing further processing without 
       requiring larger contextual rules.
       <P>
        <I>Recommended implementation: </I>The <B>ccmp</B>
       table maps the character sequence to its corresponding ligature (GSUB lookup 
       type 4) or string of glyphs (GSUB lookup type 2). When using GSUB lookup type 
       4, sequences that are made up of larger number of glyphs must be placed before 
       those that require fewer glyphs.<P>
        <I>Application interface: </I>For GIDs found in the <B>ccmp</B>
       coverage table, the application passes the sequence of GIDs to the table, and 
       gets back the GID for the ligature, or GIDs for the multiple substitution.
       <P>
        <I>UI suggestion: </I>
       This feature should be on by default.<P>
        <I>Script/language sensitivity: </I>
       None.<P>
        <I>Feature interaction: </I>This feature needs to be implemented prior to any 
        other feature.</P>
       <P><BR>
       <p><a name="clig"></a><b>Tag: </b>'clig'</p>
       <p><i>Friendly name: </i>Contextual Ligatures</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>Replaces a sequence of glyphs with a single glyph which is 
        preferred for typographic purposes. Unlike other ligature features, clig 
        specifies the context in which the ligature is recommended. This capability is 
        important in some script designs and for swash ligatures.</p>
       <p><i>Example: </i>The glyph for ft replaces the sequence f t in Bickham Script, 
        except when preceded by an ascending letter.</p>
       <p><i>Recommended implementation: </i>The clig table maps sequences of glyphs to 
        corresponding ligatures in a chained context (GSUB lookup type 8). Ligatures 
        with more components must be stored ahead of those with fewer components in 
        order to be found. The set of contextual ligatures will vary by design and 
        script.</p>
       <p><i>Application interface: </i>For sets of GIDs found in the clig coverage 
        table, the application passes the sequence of GIDs to the table and gets back a 
        single new GID. Note that full sequences must be passed. Note: This may include 
        a change of character code. Besides the original character code, the 
        application should store the code for the new character.</p>
       <p><i>UI suggestion: </i>This feature should be active by default.</p>
       <p><i>Script/language sensitivity: </i>Applies to virtually all scripts.</p>
       <p><i>Feature interaction: </i>This feature may be used in combination with 
        other substitution (GSUB) features, whose results it may override. See also <a href="#dlig">
         dlig</a>.</p>
       <p><br>
       </p>
       <p><a name="cpsp"></a><b>Tag: </b>'cpsp'</p>
       <p><i>Friendly name: </i>Capital Spacing</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>Globally adjusts inter-glyph spacing for all-capital text. 
        Most typefaces contain capitals and lowercase characters, and the capitals are 
        positioned to work with the lowercase. When capitals are used for words, they 
        need more space between them for legibility and esthetics. This feature would 
        not apply to monospaced designs. Of course the user may want to override this 
        behavior in order to do more pronounced letterspacing for esthetic reasons.</p>
       <p><i>Example: </i>The user sets a title in all caps, and the Capital Spacing 
        feature opens the spacing.</p>
       <p><i>Recommended implementation: </i>The cpsp table stores alternate advance 
        widths for the capital letters covered, generally increasing them by a uniform 
        percentage (GPOS lookup type 1).</p>
       <p><i>Application interface: </i>For GIDs found in the cpsp coverage table, the 
        application passes a sequence of GIDs to the cpsp table and gets back a set of 
        XPlacement and XAdvance adjustments. The application may rely on the user to 
        apply this feature (e.g., by selecting text for a change to all-caps) or apply 
        its own heuristics for recognizing words consisting of capitals.</p>
       <p><i>UI suggestion: </i>This feature should be on by default. Applications may 
        want to allow the user to respecify the percentage to fit individual tastes and 
        functions.</p>
       <p><i>Script/language sensitivity: </i>Should not be used in connecting scripts 
        (e.g. most Arabic).</p>
       <p><i>Feature interaction: </i>May be used in addition to any other feature 
        (note specifically that this feature is additive with other GPOS features like <a href="features_ko.htm#kern">
         kern</a>).</p>
       <P><BR>
        <a name="cswh"></a><b>Tag: </b>'cswh'</P>
       <p><i>Friendly name: </i>Contextual Swash</p>
       <p><i>Registered by: </i>Adobe
       </p>
       <p><i>Function: </i>This feature replaces default character glyphs with 
        corresponding swash glyphs in a specified context. Note that there may be more 
        than one swash alternate for a given character.</p>
       <p><i>Example: </i>The user sets the word &quot;HOLIDAY&quot; in Poetica with 
        this feature active, and is presented with a choice of three alternate forms 
        appropriate for an initial H and one alternate appropriate for a medial L.</p>
       <p><i>Recommended implementation: </i>The cswh table maps GIDs for default forms 
        to those for one or more corresponding swash forms in a chained context, which 
        may require a selection from a set (GSUB lookup type 8). If several styles of 
        swash are present across the font, the set of forms for each character should 
        be ordered consistently.</p>
       <p><i>Application interface: </i>For GIDs found in the cswh coverage table, the 
        application passes the GIDs to the swsh table and gets back one or more new 
        GIDs. If more than one GID is returned, the application must provide a means 
        for the user to select the one desired.</p>
       <p><i>UI suggestion: </i>This feature should be inactive by default. When more 
        than one GID is returned, an application could display the forms sequentially 
        in context, or present a palette showing all the forms at once, or give the 
        user a choice between these approaches. The application may assume that the 
        first glyph in a set is the preferred form, so the font developer should order 
        them accordingly.</p>
       <p><i>Script/language sensitivity: </i>Does not apply to ideographic scripts.</p>
       <p><i>Feature interaction: </i>This feature may be used in combination with 
        other substitution (GSUB) features, whose results it may override. See also <a href="features_pt.htm#swsh">
         swsh</a> and <a href="features_fj.htm#init">init</a>.</p>
       <P><BR>
        <A NAME="curs"></A><B>Tag: </B>
       &quot;curs&quot;<P>
        <I>Friendly name: </I>
       Cursive Positioning<P>
        <I>Registered by: </I>
       Microsoft<P>
        <I>Function: </I>
       In cursive scripts like Arabic, this feature cursively positions adjacent 
       glyphs.<P>
        <I>Example: </I>
       In Arabic, the Meem followed by a Reh are cursively positioned by overlapping 
       the exit point of the Meem on the entry point of the Reh.<P>
        <I>Recommended implementation: </I>The <B>curs</B>
       table provides entry and exit points (x,y) for glyphs to be cursively 
       positioned (GPOS lookup type 3).<P>
        <I>Application interface: </I>
       For GIDs located in the coverage table, the application gets back positioning 
       point locations for the preceding and following glyphs.<P>
        <I>UI suggestion: </I>
       This feature could be made active or inactive by default, at the user's 
       preference.<P>
        <I>Script/language sensitivity: </I>
       Can be used in any cursive script.<P>
        <I>Feature interaction: </I>
       None.
       <P>
       <p><br>
       </p>

       <P><a name="c2pc"></a><B>Tag:</B>'c2pc'</P>
       <P><I>Friendly name:</I> Petite Capitals From Capitals</P>
       <P><I>Registered by:</I> Tiro Typeworks / Emigre</P>
       <P><I>Function:</I> This feature turns capital characters into petite capitals. 
        It is generally used for words which would otherwise be set in all caps, such 
        as acronyms, but which are desired in petite-cap form to avoid disrupting the 
        flow of text. See the <A href="#pcap">pcap</A> feature description for notes on the 
        relationship of caps, smallcaps and petite caps.</P>
       <P><I>Example:</I> The user types UNICEF or NASA, applies c2pc and gets petite 
        cap text.</P>
       <P><I>Recommended implementation:</I> The c2pc table maps capital glyphs to the 
        corresponding petite cap forms (GSUB lookup type 1).</P>
       <P><I>Application interface:</I> For GIDs found in the c2pc coverage table, the 
        application passes GIDs to the c2pc table, and gets back new GIDs.</P>
       <P><I>UI suggestion:</I> This feature should be off by default.</P>
       <P><I>Script/language sensitivity:</I> Applies only to scripts with both upper- 
        and lowercase forms (e.g. Latin, Cyrillic, Greek).</P>
       <P><I>Feature interaction:</I> This feature may be used in combination with other 
        substitution (GSUB) features, whose results it may override. Also see <A href="#pcap">
         pcap</A>.</P>
       <p>
       </p>
       <p><a name="c2sc"></a><b>Tag: </b>'c2sc'</p>
       <p><i>Friendly name: </i>Small Capitals From Capitals</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>This feature turns capital characters into small capitals. 
        It is generally used for words which would otherwise be set in all caps, such 
        as acronyms, but which are desired in small-cap form to avoid disrupting the 
        flow of text.</p>
       <p><i>Example: </i>The user types UNICEF or SCUBA, applies c2sc and gets small 
        cap text.</p>
       <p><i>Recommended implementation: </i>The c2sc table maps capital glyphs to the 
        corresponding small-cap forms (GSUB lookup type 1).</p>
       <p><i>Application interface: </i>For GIDs found in the c2sc coverage table, the 
        application passes GIDs to the c2sc table, and gets back new GIDs.</p>
       <p><i>UI suggestion: </i>This feature should be off by default.</p>
       <p><i>Script/language sensitivity: </i>Applies only to European scripts 
        (Cyrillic, Greek &amp; Latin), which have capital forms.</p>
       <p><i>Feature interaction: </i>This feature may be used in combination with 
        other substitution (GSUB) features, whose results it may override. Also see <a href="features_pt.htm#smcp">
         smcp</a>.</p>
       <P><BR>
        <A NAME="dist"></A><B>Tag: </B>
       &quot;dist&quot;<P>
        <I>Friendly name: </I>
       Distances<P>
        <I>Registered by: </I>
       Microsoft<P>
        <I>Function: </I>
       Provides a means to control distance between glyphs.<P>
        <I>Example: </I>
       In the Devanagari (Indic) script, the distance between the vowel sign U and a 
       consonant can be adjusted using this.
       <P>
        <I>Recommended implementation: </I>The <B>dist</B>
       table provides distances by which a glyph needs to move towards or away from 
       another glyph (GPOS lookup type 2).<P>
        <I>Application interface: </I>For GIDs found in the <B>dist</B>
       coverage table, the application passes their GID to the table and gets back the 
       distance that needs to be maintained between them.<P>
        <I>UI suggestion: </I>
       This feature could be made active or inactive by default, at the user's 
       preference.<P>
        <I>Script/language sensitivity: </I>
       Required in Indic scripts.<P>
        <I>Feature interaction: </I>
       None.
       <P>
       <p><br>
        <a name="dlig"></a><b>Tag: </b>'dlig'</p>
       <p><i>Friendly name: </i>Discretionary Ligatures</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>Replaces a sequence of glyphs with a single glyph which is 
        preferred for typographic purposes. This feature covers those ligatures which 
        may be used for special effect, at the user's preference.</p>
       <p><i>Example: </i>The glyph for ct replaces the sequence of glyphs c t, or 
        U+322E (Kanji ligature for &quot;Friday&quot;) replaces the sequence U+91D1 
        U+66DC U+65E5.</p>
       <p><i>Recommended implementation: </i>The dlig table maps sequences of glyphs to 
        corresponding ligatures (GSUB lookup type 4). Ligatures with more components 
        must be stored ahead of those with fewer components in order to be found. The 
        set of discretionary ligatures will vary by design and script.</p>
       <p><i>Application interface: </i>For sets of GIDs found in the dlig coverage 
        table, the application passes the sequence of GIDs to the table and gets back a 
        single new GID. Note that full sequences must be passed. This may include a 
        change of character code. Besides the original character code, the application 
        should store the code for the new character.</p>
       <p><i>UI suggestion: </i>This feature should be off by default.</p>
       <p><i>Script/language sensitivity: </i>Applies to virtually all scripts.</p>
       <p><i>Feature interaction: </i>This feature may be used in combination with 
        other substitution (GSUB) features, whose results it may override. See also <a href="#clig">
         clig</a>.</p>
       <p><br>
        <a name="dnom"></a><b>Tag: </b>'dnom'</p>
       <p><i>Friendly name: </i>Denominators</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>Replaces selected figures which follow a slash with 
        denominator figures.</p>
       <p><i>Example: </i>In the string 11/17 selected by the user, the application 
        turns the 17 into denominators when the user applies the fraction feature (<a href="/typography/features_fj.htm#frac">frac</a>).</p>
       <p><i>Recommended implementation: </i>The dnom table maps sets of figures and 
        related characters to corresponding numerator glyphs in the font (GSUB lookup 
        type 1).</p>
       <p><i>Application interface: </i>For GIDs found in the dnom coverage table, the 
        application passes a GID to the table and gets back a new GID.</p>
       <p><i>UI suggestion: </i>This feature should normally be called by an 
        application when the user applies the frac feature.</p>
       <p><i>Script/language sensitivity: </i>None.</p>
       <p><i>Feature interaction: </i>This feature supports <a href="features_fj.htm#frac">frac</a>. 
        It may be used in combination with other substitution (GSUB) features, whose 
        results it may override.</p>
       <p><br>
        <a name="expt"></a><b>Tag: </b>'expt'</p>
       <p><i>Friendly name: </i>Expert Forms</p>
       <p><i>Registered by: </i>Adobe</p>
       <p><i>Function: </i>Like the JIS78 Forms described above, this feature replaces 
        standard forms in Japanese fonts with corresponding forms preferred by 
        typographers. Although most of the JIS78 substitutions are included, the expert 
        substitution goes on to handle many more characters.</p>
       <p><i>Example: </i>The user would invoke this feature to replace kanji character 
        U+5516 with U+555E.</p>
       <p><i>Recommended implementation: </i>The expt table maps many default (JIS90) 
        GIDs to corresponding alternates (GSUB lookup type 1).</p>
       <p><i>Application interface: </i>For GIDs found in the expt coverage table, the 
        application passes the GIDs to the table and gets back one new GID for each. 
        Note: This is a change of character code. Besides the original character code, 
        the application should store the code for the new character.</p>
       <p><i>UI suggestion: </i>Applications may choose to have this feature active or 
        inactive by default, depending on their target markets.</p>
       <p><i>Script/language sensitivity: </i>Applies only to Japanese.</p>
       <p><i>Feature interaction: </i>This feature is mutually exclusive with all other 
        features, which should be turned off when it's applied, except the
<a href="features_pt.htm#palt">palt</a>, 
<a href="features_uz.htm#vpal">vpal</a>, 
<a href="features_uz.htm#vert">vert</a> and 
<a href="features_uz.htm#vrt2">vrt2</a> 
features, which may be used in addition.</p>
      

<P>
<FONT FACE="Verdana, Arial, Helvetica" SIZE=1 CLASS=detail>
<P CLASS=detail><BR><BR>
this page was last updated 14 October 2002<BR>
&copy; 2002 Microsoft Corporation. All rights reserved. <A HREF="/info/cpyright.htm">Terms of use</A>.<BR>
comments to the MST group: 
<A HREF="/typography/about.htm">how to contact us</A> 
<P>&nbsp;
</FONT>


</TD>
<TD WIDTH=20></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD COLSPAN=2 WIDTH=540></TD>
<TD WIDTH=20></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=5><IMG SRC="toprule.gif" WIDTH=580 HEIGHT=5 ALT=""></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD WIDTH=560 COLSPAN=3 VALIGN=TOP><FONT FACE="Verdana, Arial, Helvetica" SIZE=1 CLASS=detail>
	<A HREF="/typography/default.asp">Microsoft Typography</A>
	 | <A HREF="/typography/creators.htm">Developer information</A>
         | <A HREF="/typography/default.htm">Specifications</A>
	 | <A HREF="ttoreg.htm">OpenType Layout tag registry</A>
</FONT></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=20><IMG SRC="baserule.gif" WIDTH=580 HEIGHT=20></TD>
</TR>
</TABLE>

</CENTER>
</BODY>
</HTML>
