<?xml version="1.0" encoding="utf-8"?>
<Peach  xmlns="http://peachfuzzer.com/2012/Peach"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://peachfuzzer.com/2012/Peach /peach/peach.xsd"
        author="Deja Vu Security, LLC"
        description="BGP4 PIT StateModels"
        version="0.0.1">

    <!-- Copyright (c) Deja Vu Security, LLC 2014 -->

    <Include ns="DataModels" src="file:##Path##/_Common/Models/Net/BGP_Data.xml"/>

    <StateModel name="BGP_FSM" initialState="Idle">
        <State name="Idle">
            <Action type="changeState" ref="Connect"/>
        </State>



        <State name="Connect">
            <Action name="BGP4Open" type="output">
                <DataModel ref="DataModels:BGP4Open"/>
                <Data fileName="##Path##/_Common/Samples/Net/BGP/Connect/"/>
            </Action>
            <Action type="changeState" ref="OpenSent"/>
        </State>
        

        <!-- Active state for TCP Errors Connect implies proper connectivity -->
        
        
        <State name="OpenSent">
            <Action name="BGP4Recv" type="input">
                <DataModel ref="DataModels:BGP4"/>
            </Action>
            <Action type="changeState" ref="Idle"
                    when="False"/> <!-- TODO: When message type is not open -->

            <Action name="BGP4SendKeepalive" type="output">
                <DataModel ref="DataModels:BGP4Keepalive"/>
                <!-- Constant, no user data -->
            </Action>

            <Action type="changeState" ref="OpenConfirm"/>
        </State>
        
        
        <State name="OpenConfirm">
            <Action name="BGP4Recv" type="input">
                <DataModel ref="DataModels:BGP4"/>
            </Action>
            <Action type="changeState" ref="Idle"
                    when="False"/> <!-- TODO: When message type is not keepalive -->

            <Action type="changeState" ref="Established"/>
        </State>
        
        
        <State name="Established">
            <Action name="BGP4Send" type="output">
                <DataModel name="Packet">
                    <Choice name="Types">
                        <Block name="Update" ref="DataModels:BGP4Update">
                        </Block>
                        <Block name="Notification" ref="DataModels:BGP4Update"/>
                        <Block name="Keepalive" ref="DataModels:BGP4Keepalive"/>
                        <Block name="RouteRefresh" ref="DataModels:BGP4RouteRefresh"/>
                        <Block name="RouteRefreshWithORF" ref="DataModels:BGP4RouteRefreshWithORF"/>
                        <Block name="DynamicCapbility" ref="DataModels:BGP4DynamicCapbility"/>
                    </Choice>
                </DataModel>
                <Data fileName="##Path##/_Common/Samples/Net/BGP/Established"/>
                <!--
                <Data fileName="##Path##/_Common/Samples/Net/BGP/Established">
                    <Field name="BGP4Update.MessageData.PathAttribs.PathAttribTypes.ORIGINATOR_ID.Value.BGPIdentifier" value="##BGPIdentifier##"/>
                    <Field name="BGP4Open.MessageData.BGPIdentifier" value="##BGPIdentifier##"/>
                </Data>
                -->
            </Action>

            <!-- Blindly send input -->
            <!-- TODO: peek at input

            def TCP.enableZeroRead(Context):
                context.test.publishers[0].setProperty("Timeout", Peach.Core.Variant(0))
                context.test.publishers[0].setProperty("NoReadException", Peach.Core.Variant('true'))

            def TCP.disableZeroRead(context):
                context.test.publishers[0].setProperty("Timeout", Peach.Core.Variant(3000))
                context.test.publishers[0].setProperty("NoReadException", Peach.Core.Variant('false'))

            <Action name="Receive" type="input"
                    onStart="TCP.enableZeroRead(Context)"
                    onComplete="TCP.disableZeroRead(Context)">
                <DataModel name="Packet" ref="TCPv4:InIPv4PacketOrNone"/>
            </Action>

            <DataModel name="InIPv4PacketOrNone">
                <Choice name="PacketOrNone">
                    <Block name="InIPv4Packet" ref="IPv4:Packet">
                        <Number name="Header.Protocol" size="8" endian="big" valueType="hex" value="06" token="true"/>
                        <Block name="Payload" ref="TCP:Packet">
                            <Block name="Header.OptionsAndPadding" />
                        </Block>
                    </Block>

                    <Block name="None" />
                </Choice>
            </DataModel>
-->


        </State>


    </StateModel>

</Peach>
