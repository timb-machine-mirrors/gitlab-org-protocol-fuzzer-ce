{
	"qa": [
		{
			"id": 0,
			"type": "intro",
			"qref":"/partials/fault-intro.html",
			"next":1
		},
		{
			"id": 1,
			"q": "Do you want to detect the faults from your local machine or from a remote machine?",
			"type": "choice",
			"key":"IsLocal",
			"choice": [
				{ "value":true,	"a": "From a local machine.",	"next":4 },
				{ "value":false, "a": "From a remote machine.","next":2 }
			]
		},
		{
			"id":2,
			"q": "What is the remote machine hostname or IP address?",
			"type": "string",
			"key": "AgentUrl",
			"next": 3
		},
		{
			"id":3,
			"q":"What is the remote machine operating system?",
			"type":"choice",
			"key":"OS",
			"choice":[
				{ "value":"windows", "a":"Windows", "next": 1000 },
				{ "value":"osx", "a":"Apple OS X", "next": 4200 },
				{ "value":"linux", "a":"Linux (Ubuntu, Redhat, SUSE, etc.)", "next": 3100 }
			],
			"next":4
		},
		{
			"id":4,
			"q":null,
			"type":"jump",
			"key":"LocalOS",
			"choice":[
				{ "value":"windows", "next":1000 },
				{ "value":"osx", "next":4200 },
				{ "value":"linux", "next":3100 }
				]
		},
		{
			"id": 1000,
			"q": "How would you like to detect a faulting condition in your target?",
			"type": "choice",
			"choice":[
				{ "value": 0, "a":"Detect whether a process or service has misbehaved (such as early exit, crashes, and interesting exceptions).", "next":1100 },
				{ "value": 1, "a":"Detect the availability of a remote device.", "next":4100 },
				{ "value": 2, "a":"Detect an error message via the serial port.", "next":4300 },
				{ "value": 3, "a":"Detect an error message via syslog.", "next":4400 }
			]
		},
		{
			"id": 1100,
			"q": "Which process or service should detect the fault?",
			"type":"choice",
			"choice":[
				{ "value": 0, "a":"User process started by command line.", "next":1110 },
				{ "value": 1, "a":"Windows service process.", "next":1120},
				{ "value": 2, "a":"Currently running process. Note: This should only be selected if the process cannot be started via the command line. Once the process crashes, fuzzing will be halted.", "next":1130 }
			]
		},
		{
			"id":1110,
			"q":"Where is executable located (full path name)? Peach includes macro defines for Peach working directory as well as the current working directory.",
			"type":"string",
			"required": true,
			"key":"WinDbgExecutable",
			"next":1111
		},
		{
			"id":1111,
			"q":"What are the program arguments? Macro defines are available, see expandable listing below.",
			"type":"string",
			"required": false,
			"key":"WinDbgArguments",
			"next":1140
		},
		{
			"id":1120,
			"q":"What is the name of the Windows Service?",
			"type":"string",
			"key":"WinDbgService",
			"required": true,
			"next":1140
		},
		{
			"id":1130,
			"q":"What is the process name that you want to detect faults for?",
			"type":"string",
			"key":"WinDbgProcessName",
			"next":1141,
			"required": true
		},
		{
			"id":1140,
			"q":"When do you want to start the process/service?",
			"type":"choice",
			"key":"WinDbgStart",
			"choice":[
				{"value":"StartOnEachIteration","a":"Once per fuzzing run, and after a fault is detected (best for network fuzzing).", "next":1141},
				{"value":"RestartOnEachTest","a":"At the start of every iteration.", "next":1141},
				{"value":"StartOnCall", "a":"At the end of every iteration (best for file fuzzing).", "next":1141}
			]
		},
		{
			"id":1141,
			"q":"What is the Windows Debugging Tools path? If Windows Debugging Tools are not installed, please install now using the Windows SDK installer. If you leave this value blank, Peach will try to detect where the Windows Debugging Tools are installed to.",
			"type":"string",
			"key":"WinDbgPath",
			"required": false,
			"next":1142
		},
		{
			"id":1142,
			"q":"If the process/service exists early, should that be considered a fault?",
			"type":"choice",
			"key":"WinDbgFaultOnEarlyExit", 
			"choice":[
				{ "value":true,"a":"Yes, if my process exists early, record that as a fault. This is common for network fuzzing.", "next":1143 },
				{ "value":false, "a":"No, it's okay if my process/service exits early. This is common for file fuzzing.", "next":1143 }
			]
		},
		{
			"id":1143,
			"q":"Would you like to ignore first chance guardpage exceptions? If you are unsure than don't ignore these exceptions. If you are fuzzing Adobe Acrobat then select to ignore.",
			"type":"choice",
			"key":"WinDbgIgnoreFirstChanceGuardPage", 
			"choice":[
				{ "value":false,"a":"No, do not ignore them." },
				{ "value":true,"a":"Yes, ignore them." }
			]
		},
		{
			"id":3100,
			"q":"What is executable to run? This should include the full path. Peach includes macro defines for Peach working directory as well as the current working directory.",
			"type":"string",
			"key":"LinuxDebugerExecutable",
			"required":true,
			"next":3101
		},
		{
			"id":3101,
			"q":"What are the arguments to the program? Macro defines are available, see expandable listing below.",
			"type":"string",
			"required": false,
			"key":"LinuxDebugerArguments",
			"next":3102
		},
		{
			"id":3102,
			"q":"When do you want to start the process?",
			"type":"choice",
			"key":"LinuxDebuggerStart",
			"choice":[
				{"value":"StartOnEachIteration","a":"Once per fuzzing run, and after a fault is detected? For network fuzzing, this is the most likely selection.", "next": 3103},
				{"value":"RestartOnEachTest", "a":"At the start of every iteration?", "next": 3103},
				{"value":"StartOnCall", "a":"At the end of every iteration? For file fuzzing, this is the most likely selection.", "next": 3103}
			]
		},
		{
			"id":3103,
			"q":"If the process exists early, should that be considered a fault?",
			"type":"choice",
			"key":"LinuxDebugerFaultOnEarlyExit",
			"choice":[
				{ "value":true,"a":"Yes, if my process exists early, record that as a fault. This is common for network fuzzing.", "next": 3104 },
				{ "value":false, "a":"No, it's okay if my process/service exits early. This is common for file fuzzing.", "next": 3104 }
			]
		},
		{
			"id":3104,
			"q":"What is the full path to the GDB executable? If left blank Peach will search the path for GDB.",
			"type":"string",
			"key":"LinuxDebugGdbPath",
			"required":false
		},
		{
			"id":4100,
			"q":"What is the hostname or IP address of the device to check for availability. This check will be performed using the ICMP PING packets. The device must be configured to respond to such packets. You can check this using the command line ping program.",
			"type":"string",
			"key":"PingHost",
			"required": true,
			"next":4101
		},
		{
			"id":4101,
			"q":"Do you want to trigger a fault when the device is available, or not available?",
			"type":"choice",
			"key":"PingFaultOnSuccess", 
			"choice":[
				{"value":false, "a":"Fault when the device is not available.", "next": 4102 },
				{"value":true, "a":"Fault when the device is available.", "next": 4102 }
			]
		},
		{
			"id":4102,
			"q":"How many times should we try contacting the device to determine it's availability?",
			"key":"PingRetryCount",
			"type":"range",
			"rangeMin":1,
			"rangeMax":999999,
			"required": false
		},
		{
			"id":4200,
			"q":"What is executable to run? This should include the full path. Peach includes macro defines for Peach working directory as well as the current working directory.",
			"type":"string",
			"key":"ProcessExecutable",
			"next":4201,
			"required": true
		},
		{
			"id":4201,
			"q":"What are the arguments to the program? Macro defines are available, see expandable listing below.",
			"type":"string",
			"required": false,
			"key":"ProcessArguments",
			"next":4202
		},
		{
			"id":4202,
			"q":"When do you want to start the process?",
			"type":"choice",
			"key":"ProcessStart",
			"choice":[
				{"value":"StartOnEachIteration","a":"Once per fuzzing run, and after a fault is detected? For network fuzzing, this is the most likely selection.", "next": 4203},
				{"value":"RestartOnEachTest", "a":"At the start of every iteration?", "next": 4203},
				{"value":"StartOnCall", "a":"At the end of every iteration? For file fuzzing, this is the most likely selection.", "next": 4203}
			]
		},
		{
			"id":4203,
			"q":"If the process exists early, should that be considered a fault?",
			"type":"choice",
			"key":"ProcessFaultOnEarlyExit", 
			"choice":[
				{ "value":true,"a":"Yes, if my process exists early, record that as a fault. This is common for network fuzzing." },
				{ "value":false,"a":"No, it's okay if my process/service exits early. This is common for file fuzzing." }
			]
		},
		{
			"id":4300,
			"q":"What is the serial port the target is connected to?",
			"type":"string",
			"key":"SerialPortPort",
			"next":4301,
			"required":true
		},
		{
			"id":4301,
			"q":"What baud rate should be used to communicate with the target?",
			"key":"SerialPortBaudRate",
			"type":"range",
			"rangeMin":1,
			"rangeMax":999999,
			"value":115200,
			"next":4302,
			"required": true
		},
		{
			"id":4302,
			"q":"What is the number of data bits per byte?",
			"key":"SerialPortDataBits",
			"type":"choice",
			"choice":[
				{ "value":"8","a":"8","next":4303 },
				{ "value":"7","a":"7","next":4303 },
				{ "value":"6","a":"6","next":4303 },
				{ "value":"5","a":"5","next":4303 }
			],
			"value":"8",
			"required": true
		},
		{
			"id":4303,
			"q":"What is the parity-checking protocol to use?",
			"key":"SerialPortParity",
			"type":"choice",
			"choice":[
				{ "value":"None","a":"None","next":4304 },
				{ "value":"Odd","a":"Odd","next":4304 },
				{ "value":"Even","a":"Even","next":4304 },
				{ "value":"Mark","a":"Mark","next":4304 },
				{ "value":"Space","a":"Space","next":4304 }
			],
			"value":"None",
			"required": true
		},
		{
			"id":4304,
			"q":"What is the number of stop bits per byte?",
			"key":"SerialPortStopBits",
			"type":"choice",
			"choice":[
				{ "value":"One","a":"1","next":4305 },
				{ "value":"OnePointFive","a":"1.5","next":4305 },
				{ "value":"Two","a":"2","next":4305 }
			],
			"value":"One",
			"required": true
		},
		{
			"id":4305,
			"q":"What flow control algoruthm should be used?",
			"key":"SerialPortHandshake",
			"type":"choice",
			"choice":[
				{ "value":"None","a":"None","next":4306 },
				{ "value":"XOnXoff","a":"XON/XOFF","next":4306 },
				{ "value":"RequestToSend","a":"RTS/CTS","next":4306 },
				{ "value":"RequestToSendXOnXOff","a":"RTS/CTS & XON/XOFF","next":4306 }
			],
			"value":"None",
			"required": true
		},
		{
			"id":4306,
			"q":"What regular expression should be used?  A fault will occur whenever the regular expression matches.",
			"key":"SerialPortFaultRegex",
			"type":"string",
			"required": true
		},
		{
			"id":4400,
			"q":"What IP address should be used to listen for syslog messages?",
			"type":"ipv4",
			"key":"SyslogInterface",
			"value":"0.0.0.0",
			"next":4401,
			"required":true
		},
		{
			"id":4401,
			"q":"What port should be used to listen for syslog messages?",
			"key":"SyslogPort",
			"type":"range",
			"rangeMin":1,
			"rangeMax":65535,
			"value":514,
			"next":4402,
			"required": true
		},
		{
			"id":4402,
			"q":"What regular expression should be used?  A fault will occur whenever the regular expression matches.",
			"key":"SyslogFaultRegex",
			"type":"string",
			"required": true
		}
	],
	"monitors": [
		{
			"monitorClass":"PageHeap",
			"path": [1110],
			"map": [
				{ "key":"WinDbgExecutable", "param":"Executable" },
				{ "key":"WinDbgPath", "param":"WinDbgPath"  }
			],
			"description": "Enable page heap debugging options for an executable. "
		},
		{
			"monitorClass":"WindowsDebugger",
			"path": [1100],
			"map": [
				{ "key":"WinDbgExecutable",	"param":"Executable" },
				{ "key":"WinDbgArguments", "param":"Arguments" },
				{ "key":"WinDbgProcessName", "param":"ProcessName"  },
				{ "key":"WinDbgService", "param":"Service" },
				{ "key":"WinDbgPath", "param":"WinDbgPath" },
				{ "key":"WinDbgStart", "param":"StartMode" },
				{ "key":"WinDbgIgnoreFirstChanceGuardPage",	"param":"IgnoreFirstChanceGuardPage" }
			],
			"description": "Enable Windows debugging. "
		},
		{
			"monitorClass":"Ping",
			"path": [4100,4101,4102],
			"map": [
				{ "key":"PingHost","param":"Host" },
				{ "key":"PingFaultOnSuccess","param":"FaultOnSuccess" },
				{ "key":"PingRetryCount","param":"RetryCount" }
			],
			"description": "Validate that the target is still up or waiting for the target to restart. "
		},
		{
			"monitorClass":"LinuxDebugger",
			"path": [3104],
			"map": [
				{ "key":"LinuxDebugerExecutable","param":"Executable" },
				{ "key":"LinuxDebugerArguments","param":"Arguments" },
				{ "key":"LinuxDebugGdbPath","param":"GdbPath" },
				{ "key":"LinuxDebuggerStart","param":"StartMode" },
				{ "key":"LinuxDebugerFaultOnEarlyExit","param":"FaultOnEarlyExit" }
			],
			"description": "Use GDB to launch an executable, monitoring it for exceptions. "
		},
		{
			"monitorClass":"CrashReporter",
			"path": [4200],
			"map": [],
			"description": "Collect information from crashes detected by OS X System Crash Reporter. "
		},
		{
			"monitorClass":"Process",
			"path": [4200],
			"map": [
				{ "key":"ProcessExecutable","param":"Executable" },
				{ "key":"ProcessArguments","param":"Arguments" },
				{ "key":"ProcessStart","param":"StartMode" },
				{ "key":"ProcessFaultOnEarlyExit","param":"FaultOnEarlyExit" }
			],
			"description": "Collect information about processes starting and stopping. "
		},
		{
			"monitorClass":"SerialPort",
			"path": [4300],
			"map": [
				{ "key":"SerialPortPort","param":"Port" },
				{ "key":"SerialPortBaudRate","param":"BaudRate" },
				{ "key":"SerialPortDataBits","param":"DataBits" },
				{ "key":"SerialPortParity","param":"Parity" },
				{ "key":"SerialPortStopBits","param":"StopBits" },
				{ "key":"SerialPortHandshake","param":"Handshake" },
				{ "key":"SerialPortFaultRegex","param":"FaultRegex" }
			],
			"description": "Look for error messages via the serial port. "
		},
		{
			"monitorClass":"Syslog",
			"path": [4400],
			"map": [
				{ "key":"SyslogInterface","param":"Interface" },
				{ "key":"SyslogPort","param":"Port" },
				{ "key":"SyslogFaultRegex","param":"FaultRegex" }
			],
			"description": "Look for error messages via syslog. "
		}
	]

}
