{
	"state": [
    {"name":"OS", "value":"win"},
    {"name":"HostName", "value":"127.0.0.1"}
  ],
	"qa": [
		{
			"id": 0,
			"type": "intro",
			"qref":"partials/fault-intro.html",
			"next":1
		},
		{
			"id": 1,
			"q": "Do you want to perform fault detection from your local machine or a remote machine?",
			"type": "choice",
			"key":"IsLocal",
			"choice": [
				{ "value":true,	"a": "From local machine.",	"next":4 },
				{ "value":false, "a": "From remote machine.","next":2 }
			]
		},
		{
			"id":2,
			"q": "What is the hostname or IP address of the remote machine that will perform detection?",
			"type": "string",
			"key": "AgentUrl",
			"next": 3
		},
		{
			"id":3,
			"q":"What is the operating system of the remote machine that will perform detection?",
			"type":"choice",
			"key":"OS",
			"choice":[
				{ "value":"win", "a":"Windows", "next": 1000 },
				{ "value":"osx", "a":"Apple OS X", "next": 2000 },
				{ "value":"lin", "a":"Linux (Ubuntu, Redhat, SUSE, etc.)", "next": 3000 }
			],
			"next":4
		},
		{
			"id":4,
			"q":null,
			"type":"jump",
			"key":"OS",
			"choice":[
				{ "value":"win", "next":1000 },
				{ "value":"osx", "next":2000 },
				{ "value":"lin", "next":3000 }
				]
		},
		{
			"id": 1000,
			"q": "How would you like to detect a faulting condition in your target?",
			"type": "choice",
			"choice":[
				{ "a":"Detect a process or service has misbehaved. Misbehaving includes: early exit, crashes, and interesting exceptions.", "next":1100 },
				{ "a":"Detect availability of remote device.", "next":4100 }
			]
		},
		{
			"id": 1100,
			"q":"What type of process or service do you want to perform fault detection on?",
			"type":"choice",
			"choice":[
				{ "a":"User process started by command line.", "next":1110 },
				{ "a":"Windows service process.", "next":1120},
				{ "a":"Currently running process. Note: This should only be selected if the process cannot be started via the command line. Once the process crashes, fuzzing will be halted.", "next":1130 }
			]
		},
		{
			"id":1110,
			"q":"What is executable to run? This should include the full path. Peach includes macro defines for Peach working directory as well as the current working directory.",
			"type":"string",
			"required": false,
			"key":"WinDbgExecutable",
			"next":1111
		},
		{
			"id":1111,
			"q":"What are the arguments to the program? Macro defines are available, see expandable listing below.",
			"type":"string",
			"required": false,
			"key":"WinDbgArguments",
			"next":1140
		},
		{
			"id":1120,
			"q":"What is the name of the Windows Service? You can determine this name by XYZ.",
			"type":"string",
			"key":"WinDbgService",
			"next":1140
		},
		{
			"id":1130,
			"q":"What is the process name that you want to detect faults for? You can determine this by XYZ.",
			"type":"string",
			"key":"WinDbgProcessName",
			"next":1141
		},
		{
			"id":1140,
			"q":"When do you want to start the process/service?",
			"type":"choice",
			"key":"WinDbgStart",
			"choice":[
				{"value":"StartOnEachIteration","a":"Once per fuzzing run, and after a fault is detected? For network fuzzing, this is the most likely selection.", "next":1141},
				{"value":"RestartOnEachTest","a":"At the start of every iteration?", "next":1141},
				{"value":"StartOnCall", "a":"At the end of every iteration? For file fuzzing, this is the most likely selection.", "next":1141}
			]
		},
		{
			"id":1141,
			"q":"What is the path to Windows Debugging Tools? If Windows Debugging Tools are not installed, please install now using the Windows SDK installer. If you leave this value blank, Peach will try to detect where the Windows Debugging Tools are installed to.",
			"type":"string",
			"key":"WinDbgPath",
			"next":1142
		},
		{
			"id":1142,
			"q":"If the process/service exists early, should that be considered a fault?",
			"type":"choice",
			"key":"WinDbgFaultOnEarlyExit", 
			"choice":[
				{ "value":true,"a":"Yes, if my process exists early, record that as a fault. This is common for network fuzzing.", "next":1143 },
				{ "value":false, "a":"No, it's okay if my process/service exits early. This is common for file fuzzing.", "next":1143 }
			]
		},
		{
			"id":1143,
			"q":"Would you like to ignore first chance guardpage exceptions? If you are unsure than don't ignore these exceptions. If you are fuzzing Adobe Acrobat then select to ignore.",
			"type":"choice",
			"key":"WinDbgIgnoreFirstChanceGuardPage", 
			"choice":[
				{ "value":true,"a":"Yes, ignore them." },
				{ "value":false,"a":"No, do not ignore them." }
			]
		},
		{
			"id":2000,
			"q":null,
			"type":"jump",
			"key":"OS",
			"choice":[
				{ "key":"OS", "value":"osx", "next":4200 }
			]
		},
		{
			"id":3100,
			"q":"What is executable to run? This should include the full path. Peach includes macro defines for Peach working directory as well as the current working directory.",
			"type":"string",
			"key":"LinuxDebugerExecutable",
			"next":3101
		},
		{
			"id":3101,
			"q":"What are the arguments to the program? Macro defines are available, see expandable listing below.",
			"type":"string",
			"required": false,
			"key":"LinuxDebugerArguments",
			"next":3102
		},
		{
			"id":3102,
			"q":"When do you want to start the process?",
			"type":"choice",
			"key":"LinuxDebuggerStart",
			"choice":[
				{"value":"StartOnEachIteration","a":"Once per fuzzing run, and after a fault is detected? For network fuzzing, this is the most likely selection.", "next": 3103},
				{"value":"RestartOnEachTest", "a":"At the start of every iteration?", "next": 3103},
				{"value":"StartOnCall", "a":"At the end of every iteration? For file fuzzing, this is the most likely selection.", "next": 3103}
			]
		},
		{
			"id":3103,
			"q":"If the process exists early, should that be considered a fault?",
			"type":"choice",
			"key":"LinuxDebugerFaultOnEarlyExit",
			"choice":[
				{ "value":true,"a":"Yes, if my process exists early, record that as a fault. This is common for network fuzzing.", "next": 3104 },
				{ "value":false, "a":"No, it's okay if my process/service exits early. This is common for file fuzzing.", "next": 3104 }
			]
		},
		{
			"id":3104,
			"q":"What is the full path to the GDB executable? If left blank Peach will search the path for GDB.",
			"type":"string",
			"key":"LinuxDebugGdbPath"
		},
		{
			"id":4100,
			"q":"What is the hostname or IP address of the device to check for availability. This check will be performed using the ICMP PING packets. The device must be configured to respond to such packets. You can check this using the command line ping program.",
			"type":"string",
			"key":"PingHost",
			"next":4101
		},
		{
			"id":4101,
			"q":"Do you want to trigger a fault when the device is available, or not available?",
			"type":"choice",
			"key":"PingFaultOnSuccess", 
			"choice":[
				{"value":true, "a":"Fault when the device is available.", "next": 4102 },
				{"value":false, "a":"Fault when the device is not available.", "next": 4102 }
			]
		},
		{
			"id":4102,
			"q":"How many times should we try contacting the device to determine it's availability?",
			"key":"PingRetryCount",
			"type":"range",
			"rangeMin":1,
			"rangeMax":999999
		},
		{
			"id":4200,
			"q":"What is executable to run? This should include the full path. Peach includes macro defines for Peach working directory as well as the current working directory.",
			"type":"string",
			"key":"ProcessExecutable",
			"next":4201
		},
		{
			"id":4201,
			"q":"What are the arguments to the program? Macro defines are available, see expandable listing below.",
			"type":"string",
			"required": false,
			"key":"ProcessArguments",
			"next":4202
		},
		{
			"id":4202,
			"q":"When do you want to start the process?",
			"type":"choice",
			"key":"ProcessStart",
			"choice":[
				{"value":"StartOnEachIteration","a":"Once per fuzzing run, and after a fault is detected? For network fuzzing, this is the most likely selection.", "next": 4203},
				{"value":"RestartOnEachTest", "a":"At the start of every iteration?", "next": 4203},
				{"value":"StartOnCall", "a":"At the end of every iteration? For file fuzzing, this is the most likely selection.", "next": 4203}
			]
		},
		{
			"id":4203,
			"q":"If the process exists early, should that be considered a fault?",
			"type":"choice",
			"key":"ProcessFaultOnEarlyExit", 
			"choice":[
				{ "value":true,"a":"Yes, if my process exists early, record that as a fault. This is common for network fuzzing." },
				{ "value":false,"a":"No, it's okay if my process/service exits early. This is common for file fuzzing." }
			]
		}
	],
	"monitors": [
		{
			"monitorClass": "Agent",
			"path": [0],
			"map": [
				{"key":"AgentUrl", "param":"location", "optional":true }
			]
		},
		{
			"monitorClass":"PageHeap",
			"path": [1110],
			"map": [
				{ "key":"WinDbgExecutable", "param":"Executable", "optional":false },
				{ "key":"WinDbgPath", "param":"WinDbgPath", "optional":true  }
			]
		},
		{
			"monitorClass":"WindowsDebugger",
			"path": [1100],
			"map": [
				{ "key":"WinDbgExecutable",	"param":"Executable",					"optional":true },
				{ "key":"WinDbgArguments", "param":"Arguments",					"optional":true },
				{ "key":"WinDbgProcessName", "param":"ProcessName",					"optional":true  },
				{ "key":"WinDbgService", "param":"Service",						"optional":true },
				{ "key":"WinDbgPath", "param":"WinDbgPath",					"optional":true },
				{ "key":"WinDbgStartOnCall", "param":"StartOnCall",					"optional":true },
				{ "key":"WinDbgFaultOnEarlyExit", "param":"FaultOnEarlyExit",				"optional":true },
				{ "key":"WinDbgRestartOnEachTest", "param":"RestartOnEachTest",			"optional":true },
				{ "key":"WinDbgIgnoreFirstChanceGuardPage",	"param":"IgnoreFirstChanceGuardPage",	"optional":true }
			]
		},
		{
			"monitorClass":"Ping",
			"path": [4100,4101,4102],
			"map": [
				{ "key":"PingHost","param":"Host",				"optional":false },
				{ "key":"PingFaultOnSuccess","param":"FaultOnSuccess",	"optional":true },
				{ "key":"PingRetryCount","param":"RetryCount",		"optional":true }
			]
		},
		{
			"monitorClass":"LinuxDebugger",
			"path": [3104],
			"map": [
				{ "key":"Executable","param":"Executable",		"optional":false },
				{ "key":"Arguments","param":"Arguments",		"optional":true },
				{ "key":"LinuxDebugGdbPath","param":"GdbPath",		"optional":true },
				{ "key":"RestartOnEachTest","param":"RestartOnEachTest",		"optional":true },
				{ "key":"FaultOnEarlyExit","param":"FaultOnEarlyExit",		"optional":true },
				{ "key":"StartOnCall","param":"StartOnCall",		"optional":true }
			]
		},
		{
			"monitorClass":"CrashReporter",
			"path": [2000],
			"map": []
		},
		{
			"monitorClass":"Process",
			"path": [4200],
			"map": [
				{ "key":"ProcessExecutable","param":"Executable",		"optional":false },
				{ "key":"ProcessArguments","param":"Arguments",		"optional":true },
				{ "key":"ProcessRestartOnEachTest","param":"RestartOnEachTest",		"optional":true },
				{ "key":"ProcessFaultOnEarlyExit","param":"FaultOnEarlyExit",		"optional":true },
				{ "key":"ProcessStartOnCall",	"param":"StartOnCall",		"optional":true }
			]
		}
	]

}
