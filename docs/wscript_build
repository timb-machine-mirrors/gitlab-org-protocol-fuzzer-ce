#!/usr/bin/env python
from waflib.Task import Task
from waflib.Errors import WafError
import re

# The following 2 entires generate the Peach Pro doc using outline of v3Q4 update
# Commnented out while I work on User Guide structuring.

book = bld(
	features = 'asciidoc',
	source = 'src.pro/book.adoc',
	images = 'src.pro/images',
	cover = 'src.pro/Professional_Cover.pdf',
	name = 'Peach_Professional.pdf',
)

bld(
	features = 'webhelp',
	source = 'src.pro/book.adoc',
	images = 'src.pro/images',
	name = 'webhelp',
)

# The following 2 entires generate the Peach Pro User Guide doc using (new in 2015)
book = bld(
	features = 'asciidoc',
	source = 'src.pro/UserGuide.adoc',
	images = 'src.pro/images',
	cover = 'src.pro/Professional_Cover.pdf',
	name = 'Peach_Pro_User_Guide.pdf',
)

bld(
	features = 'webhelp',
	source = 'src.pro/UserGuide.adoc',
	images = 'src.pro/images',
	name = 'webhelpUserGuide',
)

bld(
	features = 'doxygen',
	doxyfile = 'apidocs/apidocs.conf',
	name = 'apidocs',
)

class join_usage(Task):
	re_data = re.compile('^include::(.*_DataSheet.adoc)', re.M)
	re_desc = re.compile('^:Description: (.*)', re.M)

	def run(self):
		lines = [ self.inputs[0].read() ]

		for f in self.inputs[1:]:
			try:
				inc = f.parent.find_or_declare('%s' % self.re_data.search(f.read()).group(1))
			except AttributeError, e:
				raise WafError("Missing datasheet include in '%s'" % f.abspath(), e)

			try:
				datasheet = inc.read()
			except IOError, e:
				raise WafError("Error opening datasheet '%s' included from '%s'" % (inc.abspath(), f.abspath()), e)

			try:
				desc = self.re_desc.search(datasheet).group(1)
			except AttributeError, e:
				raise WafError("Missing :Description: in datasheet '%s'" % inc.abspath(), e)

			lines.append( '<<<\n== %s\ninclude::%s[]\n' % (desc, f.path_from(self.outputs[0].parent)) )

		self.outputs[0].write( '\n'.join(lines) )

# The interpolated adoc file containing includes to all usages
library = bld.path.find_or_declare('library_joined.adoc')

# The adoc file to append included usages to
srcs = [ bld.path.find_or_declare('src.pro/library.adoc') ]

# The list of all usage files to include
srcs.extend( bld.path.find_dir('../pits/pro').ant_glob('**/*_Usage.adoc') )

pits = bld(
	features = 'asciidoc',
	name = 'Pit_Library.pdf',
	cover = 'src.pro/library_cover.pdf',
	source = library,
)

pits.create_task('join_usage', srcs, library)

srcs_trial = [
	bld.path.find_or_declare('src.pro/library.adoc'),
	bld.path.find_dir('../pits/pro/Image').find_or_declare('Png_Usage.adoc'),
	bld.path.find_dir('../pits/pro/Net').find_or_declare('SNMP_Usage.adoc'),
]

library_trial = bld.path.find_or_declare('library_trial_joined.adoc')

pits_trial = bld(
	features = 'asciidoc',
	name = 'Pit_Library_Trial.pdf',
	cover = 'src.pro/library_cover.pdf',
	source = library_trial,
)

pits_trial.create_task('join_usage', srcs_trial, library_trial)
