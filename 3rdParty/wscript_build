#!/usr/bin/env python

mapping = {
	'System.Data.SQLite.x86' : 'win_x86',
	'System.Data.SQLite.x64' : 'win_x64',
}

excludes = {
	# Microsoft scripting assemblies are included in IronPython
	'IronRuby' : '**/Microsoft.*.dll'
}

bld.read_nuget('packages.config', excl=excludes, mapping=mapping)

# Be.HexBox is not nugetable yet
bld.read_csshlib('Be.Windows.Forms.HexBox.dll', paths=['Be.HexEditor.150/bin'])

# SuperSocket, SuperWebSocket and SocketHttpListener nuget packages
# are for .NET 4.5 so we need to build them from source to target .NET 4.0

subdirs = [
	'pin',
	'Renci.SshNet',
	'TotalPhase/aardvark',
	'TotalPhase/komodo',
	'Managed.AndroidDebugBridge',
	'VMware-VIX-1.13.0-1295980',
	'SuperSocket',
	'SuperWebSocket',
	'SocketHttpListener/SocketHttpListener',
	'BouncyCastle/crypto',
	'BouncyCastle/crypto/test',
	'sqlite-3.8.11.1',
	'Portable.Licensing',
]

bld.recurse(subdirs)

if bld.env.CS_NAME == 'csc':
	# Allow for compilation of all c# on windows
	bld.read_csshlib('Mono.Posix.dll', paths=['Mono.2.10.9'])
else:
	bld.read_csshlib('System.Data.SQLite.dll', paths=['System.Data.SQLite.Mono.1.0.98.1'])

if bld.env.BASENAME == 'osx':
	bld(
		name='CrashWrangler',
		install_path = '${BINDIR}',
		install_644 = bld.path.ant_glob('CrashWrangler/**/*'),
	)


nunit_tools = bld.path.find_node('NUnit.ConsoleRunner.3.2.0/tools')

bld(
	name='nunit-console',
	features = 'peach',
	install_path = '${BINDIR}',
	install_644 = {
		nunit_tools : nunit_tools.ant_glob('**/*'),
	}
)

if bld.env.REFERENCE_ASSEMBLIES_FACADES:
	refs = [
		'System.Runtime.dll',
		'System.Threading.Tasks.dll',
	]

	for x in refs:
		bld.read_csshlib(x, paths=[bld.env.REFERENCE_ASSEMBLIES_FACADES])
