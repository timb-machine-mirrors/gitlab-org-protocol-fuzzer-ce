<?xml version="1.0" encoding="utf-8"?>
<Peach xmlns="http://peachfuzzer.com/2012/Peach" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xsi:schemaLocation="http://peachfuzzer.com/2012/Peach ../peach.xsd"
			 author="Deja Vu Security, LLC" description="Transport Control Protocol PIT StateModels" version="0.0.2">
  <!-- Copyright (c) Deja Vu Security, LLC 2013 -->
	
	<Include ns="TCP" src="file:##Path##/_Common/Models/Net/TCP_Data.xml"/>
	<Include ns="TCPv4" src="file:##Path##/_Common/Models/Net/TCPv4_Data.xml"/>
	<PythonPath path="##Path##/_Common/Models/Net/"/>
	<Import import="TCP"/>

	<!-- Implements: RFC 793 (http://tools.ietf.org/html/rfc793) -->
	<!-- Currenlty supports fuzzing a listener, not acting as a listener -->
	
	
	<StateModel name="Listener" initialState="SendSyn">

		<State name="SendSyn" >

			<!-- http://tools.ietf.org/html/rfc793#page-30 -->
			<!-- Does not support sync connections or half-open recovery -->
			<Action type="output"
							onStart="TCP.init_seq(self)"
							onComplete="TCP.set_next_seq(self)">
				<Data ref="TCP:SYN"/>
				<DataModel name="Packet" ref="TCPv4:Packet"/>
			</Action>
			<Action name="Read" type="changeState" ref="SynSent" />
		</State>

		<State name="SynSent">
			<Action name="GetPacket" type="input"
							onComplete="TCP.store_next_acknum(self)">
				<DataModel name="Packet" ref="TCPv4:InIPv4Packet"/>
			</Action>
			<Action name="GoToSend"
							type="changeState" ref="SynRecieved"
							when="TCP.get_if_ack_for_me(self) and bool(int(self.parent.actions[0].dataModel.find('SYN').InternalValue))"/>
			<Action name="GoToSend"
							type="changeState" ref="Established"
							when="TCP.get_if_ack_for_me(self) and not bool(int(self.parent.actions[0].dataModel.find('SYN').InternalValue))"/>
			<Action name="ReadMore" type="changeState" ref="SynSent" />
		</State>
		
		<State name="SynRecieved" >
			<Action name="SendAck" type="output"
							onStart="TCP.sync_from_store(self)" >
				<Data ref="TCP:ACK"/>
				<DataModel name="Packet" ref="TCPv4:Packet"/>
			</Action>
			<Action type="changeState" ref="Established"/>
		</State>

		<State name="Established" >
			<Action type="changeState" ref="WaitServerClose"/>
			<!-- <Action type="changeState" ref="SendTestPayload"/> -->
			<!-- <Action type="changeState" ref="ImmediateClose"/> -->
		</State>

		<State name="WaitServerClose">
			<Action name="GetPacket" type="input" 
							onComplete="TCP.store_next_acknum(self)">
				<DataModel name="Packet" ref="TCPv4:InIPv4Packet"/>
			</Action>
			<Action name="GoToSendTestPayload"
							type="changeState" ref="SendTestPayloadToClosedServer"
							when="TCP.get_if_ack_for_me(self) and bool(int(self.parent.actions[0].dataModel.find('FIN').InternalValue))"/>
			<Action  name="ReadMore" type="changeState" ref="WaitServerClose" />
		</State>

		<State name="SendTestPayloadToClosedServer" >
			<Action type="output"
							onStart="TCP.sync_from_store(self)"
							onComplete="TCP.set_next_seq(self)">
				<Data ref="TCP:PSHACK"/>
				<DataModel name="PSHPacket" ref="TCPv4:PacketWithData"/>
			</Action>
			<Action name="GoToClose" type="changeState" ref="SyncClose" />
		</State>

		<State name="SendTestPayload" >
			<Action type="output"
							onStart="TCP.sync_from_store(self)"
							onComplete="TCP.set_next_seq(self)">
				<Data ref="TCP:PSHACK"/>
				<DataModel name="PSHPacket" ref="TCPv4:PacketWithData"/>
			</Action>
			<Action name="Read" type="changeState" ref="WaitForAck" />
		</State>
		
		<State name="WaitForAck">
			<Action name="GetPacket" type="input" >
							<!-- onComplete="TCP.store_next_acknum(self)"> -->
				<DataModel name="Packet" ref="TCPv4:InIPv4Packet"/>
			</Action>
			<Action name="GoToClose"
							type="changeState" ref="BeginClose"
							when="TCP.get_if_ack_for_me(self) and not bool(int(self.parent.actions[0].dataModel.find('FIN').InternalValue))"/>
			<Action name="GoToSendFinalAck"
							type="changeState" ref="SendFinalAck"
							when="TCP.get_if_ack_for_me(self) and bool(int(self.parent.actions[0].dataModel.find('FIN').InternalValue))"/>
			<Action  name="ReadMore" type="changeState" ref="WaitForAck" />
		</State>

		<!-- http://tools.ietf.org/html/rfc793#section-3.5 -->
		<State name="BeginClose" >
			<Action type="changeState" ref="Close"/>
		</State>

		<State name="SyncClose">
			<Action name="Close" type="output"
							onStart="TCP.sync_from_store(self)"
							onComplete="TCP.set_next_seq(self)">
				<Data ref="TCP:FINACK"/>
				<DataModel name="Packet" ref="TCPv4:Packet"/>
			</Action>
		</State>

		<State name="ImmediateClose">
			<Action name="Close" type="output"
							onStart="TCP.sync_from_store(self)"
							onComplete="TCP.set_next_seq(self)">
				<Data ref="TCP:FINACK"/>
				<DataModel name="Packet" ref="TCPv4:Packet"/>
			</Action>
			<Action name="GoToWaitForAck" type="changeState" ref="WaitForAck"/>
		</State>
		
		<State name="Close">
			<Action name="Close" type="output"
							onStart="TCP.sync_from_store(self)"
							onComplete="TCP.set_next_seq(self)">
				<Data ref="TCP:FINACK"/>
				<DataModel name="Packet" ref="TCPv4:Packet"/>
			</Action>
			<Action type="changeState" ref="WaitingForFinAck"/>
		</State>

		<State name="WaitingForFinAck">
			<Action name="GetPacket" type="input"
							onComplete="TCP.store_next_acknum(self)">
				<DataModel name="Packet" ref="TCPv4:InIPv4Packet"/>
			</Action>
			<Action name="GoToSend"
							type="changeState" ref="SendFinalFinAck"
							when="TCP.get_if_ack_for_me(self) and bool(int(self.parent.actions[0].dataModel.find('FIN').InternalValue))"/>
			<Action  name="ReadMore" type="changeState" ref="WaitingForFinAck" />
		</State>
		
		<State name="SendFinalFinAck">
			<Action name="Close" type="output"
							onStart="TCP.sync_from_store(self)">
				<Data ref="TCP:FINACK"/>
				<DataModel name="FINACKPacket" ref="TCPv4:Packet"/>
			</Action>
		</State>

		<State name="SendFinalAck">
			<Action name="Close" type="output"
							onStart="TCP.sync_from_store(self)">
				<Data ref="TCP:ACK"/>
				<DataModel name="ACKPacket" ref="TCPv4:Packet"/>
			</Action>
		</State>

		<State name="Recovery">
			<Action name="Close" type="output"
							onStart="TCP.sync_from_store(self)">
				<Data ref="TCP:RST"/>
				<DataModel name="RSTPacket" ref="TCPv4:Packet"/>
			</Action>
			<Action name="TryAgain" type="changeState" ref="SendSyn"/>
		</State>
		
	</StateModel>
</Peach>
<!--END-->
