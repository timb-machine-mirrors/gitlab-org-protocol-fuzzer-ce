<?xml version="1.0" encoding="utf-8"?>
<Peach xmlns="http://peachfuzzer.com/2012/Peach" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://peachfuzzer.com/2012/Peach /peach/peach.xsd"
       author="Deja Vu Security, LLC" description="Dynamic Host Configuration Protocol v6 PIT StateModels" version="0.0.2">
	<!-- Copyright (c) Deja Vu Security, LLC 2013 -->
		
	<!-- Implements: RFC3315 [Dynamic Host Configuration Protocol for IPv6 (DHCPv6)](http://tools.ietf.org/html/rfc3315) -->
	<!-- Implementation notes: Supports the minimum necessary for server side of 1.3 "Client-server Exchanges Involving Four Messages" -->
	<!-- Implementation notes: Ported from v2.3/ipv6/dhcpv6.xml -->
		
	<Include ns="DHCP" src="file:##Path##/_Common/Models/Net/DHCPv6_Data.xml"/>
	<PythonPath path="##Path##/_Common/Models/Net/"/>
	<Import import="DHCPv6"/>

	<StateModel name="Server" initialState="Listening">
	<!-- <StateModel name="Server" initialState="Testing"> -->
		
		<!-- "The client sends a Solicit message to the All_DHCP_Relay_Agents_and_Servers address to find available DHCP servers." -->
		<State name="Listening">
			<Action type="input" name="Listen">
				<DataModel name="DhcpRequest" ref="DHCP:Packet"/>
			</Action>
			<!-- Fix this on the python side -->
			<Action type="changeState" ref="Advertising"
							when="DHCPv6.is_solicit(self)" />
			<Action type="changeState" ref="Reply"
							when="DHCPv6.is_request(self)" />
		</State>
		
		<!-- Any server that can meet the client's requirements responds with an Advertise message. -->
		<State name="Advertising" onStart="DHCPv6.set_client_id(self)">
			<Action type="slurp" valueXpath="//DhcpRequest//XID" setXpath="//DhcpAdvertise//XID"/>
			<Action type="slurp" valueXpath="//DhcpRequest//ClientIdentifier" setXpath="//DhcpAdvertise//ClientIdentifier"/>
			<Action type="output" name="SendAdvertise">
				<DataModel name="DhcpAdvertise" ref="DHCP:Packet"/>
				<Data name="DataSet">
					<Field name="MsgType" value="2"/>
					<Field name="Option[0].OptionChoice.ClientIdentifier.Duid.DuidChoice.EnterpriseNumber" value=""/>
					<Field name="Option[1].OptionChoice.ServerIdentifier.Option" value="2"/>
					<Field name="Option[1].OptionChoice.ServerIdentifier.Duid.DuidChoice.EnterpriseNumber.Identifier"
								 valueType="hex" value="506561636879204b65656e21"/> <!-- Peachy Keen! -->
					<Field name="Option[2].OptionChoice.StatusCode" value="" />
					<Field name="Option[2].OptionChoice.IdentityAssociationForNonTemporary.Data.IaOptions[0].IaOptionChoice.IaAddress" value="" />
				</Data>
			</Action>
			<Action type="changeState" ref="Listening"/>
		</State>

		<State name="Reply">
			<Action type="slurp" valueXpath="//DhcpRequest//XID" setXpath="//DhcpReply//XID"/>
			<Action type="output">
				<DataModel ref="DHCP:Packet" name="DhcpReply"/>
				<Data name="DataSet">
					<Field name="MsgType" value="7"/>
					<Field	name="Option[0].OptionChoice.ClientIdentifier.Duid.DuidChoice.EnterpriseNumber"
									value=""/>
					<Field name="Option[1].OptionChoice.ServerIdentifier.Option" value="2"/>
					<Field name="Option[1].OptionChoice.ServerIdentifier.Duid.DuidChoice.EnterpriseNumber.Identifier"
								 			 valueType="hex" value="506561636879204b65656e21"/> <!-- Peachy Keen! -->
					<Field name="Option[2].OptionChoice.IdentityAssociationForNonTemporary.Data.IaOptions[0].IaOptionChoice.IaAddress" value="" />
					<Field name="Option[3].OptionChoice.StatusCode" value="" />
				</Data>
			</Action>
		</State>

		<State name="Testing">
			<Action type="output">
				<DataModel ref="DHCP:Packet" name="test"/>
				<Data name="DataSet">
				</Data>
			</Action>
			<Action type="changeState" ref="Advertising"/>
		</State>
		<!-- Don't absolutely need to confirm, this can be added later for state verification -->
	</StateModel>

</Peach>
<!-- end -->
