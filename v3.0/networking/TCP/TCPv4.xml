<?xml version="1.0" encoding="utf-8"?>
<Peach xmlns="http://peachfuzzer.com/2012/Peach" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xsi:schemaLocation="http://peachfuzzer.com/2012/Peach ../peach.xsd"
			 author="Deja Vu Security, LLC" description="Transport Control Protocol PIT" version="0.0.2">

	<!-- This pit uses TCP in a way the OS is not aware of. In order to use -->
	<!-- this pit it's necessary to block RST outgoing on the target port so -->
	<!-- the OS doesn't interfere with target communication. -->

	<Include ns="TCP" src="file:##Path##/CommonHeaders/TCPHeader.xml"/>
	<PythonPath path="##Path##/CommonHeaders/"/>

	<Import import="TCP"/>
	
	<!-- for debugging -->
	<Import import="code"/>

	<Agent name="RemoteAgent" location="tcp://##RemoteAgentIP##:9001">
		<Monitor class="Process">
			<Param name="Executable" value="##tsharkBin##" />
			<Param name="Arguments" value="-i ##tsharkInterface##" />
			<Param name="FaultOnEarlyExit" value="true" />
		</Monitor>
		<Monitor class="Pcap">
			<Param name="Device" value="##Interface##" />
		</Monitor>
	</Agent>

	<StateModel name="TheState" initialState="SendSyn">

		<State name="SendSyn" >
			<Action type="output"
							onStart="TCP.init_seq(self)"
							onComplete="TCP.inc_stored_val(self, 'SequenceNumber')">
				<Data ref="TCP:SYN"/>
				<DataModel name="SYNPacket" ref="TCP:Packet"/>
			</Action>
			<Action name="Read" type="changeState" ref="SynSent" />
		</State>

		<State name="SynSent">
			<Action name="GetPacket" type="input"
							onComplete="TCP.process_sequence(self)">
				<DataModel name="Packet" ref="TCP:InIPv4Packet"/>
			</Action>
			<Action name="ChangeToSend"
							type="changeState" ref="SynRecieved"
							when="TCP.chk_if_ack_for_me(self)"/>
			<Action name="ReadMore" type="changeState" ref="SynSent" />
		</State>
		
		<State name="SynRecieved" >
			<Action name="SendAck" type="output"
							onStart="TCP.set_defaults_from_store(self, 'SequenceNumber', 'AcknowledgmentNumber')" >
				<Data ref="TCP:ACK"/>
				<DataModel name="ACK" ref="TCP:Packet"/>
			</Action>
			<Action type="changeState" ref="Established"/>
		</State>

		<State name="Established" >
			<!-- <Action type="changeState" ref="SendTestPayload"/> -->
			<Action type="changeState" ref="BeginClose"/>
		</State>

		<!-- <State name="SendTestPayload" > -->
		<!-- 	<Action type="output" -->
		<!-- 					onStart="TCP.set_defaults_from_store(self, 'SequenceNumber', 'AcknowledgmentNumber')"  -->
		<!-- 					onComplete="TCP.inc_stored_val(self, 'SequenceNumber', (int(self.dataModel.find('TcpPayload').CalcLengthBits())/8))"> -->
		<!-- 		<Data ref="TCP:PSHACK"/> -->
		<!-- 		<DataModel name="PSHACKPacket" ref="TCP:PacketWithData"/> -->
		<!-- 	</Action> -->
		<!-- 	<Action name="Read" type="changeState" ref="WaitForAck" /> -->
		<!-- </State> -->
		
		<!-- <State name="WaitForAck"> -->
		<!-- 	<Action name="GetPacket" type="input" -->
		<!-- 					onComplete="TCP.process_sequence(self)"> -->
		<!-- 		<DataModel name="Packet" ref="TCP:InIPv4Packet"/> -->
		<!-- 	</Action> -->
		<!-- 	<Action name="ChangeToSend" -->
		<!-- 					type="changeState" ref="BeginClose" -->
		<!-- 					when="TCP.chk_if_ack_for_me(self) and bool(int(self.parent.actions[0].dataModel.find('FIN').InternalValue))"/> -->
		<!-- 	<Action  name="ReadMore" type="changeState" ref="WaitForAck" /> -->
		<!-- </State> -->
		

		<State name="BeginClose" >
			<Action type="changeState" ref="SimultaneousClose"/>
		</State>
		

		<State name="SimultaneousClose">
			<Action name="Close" type="output"
							onStart="TCP.set_defaults_from_store(self, 'SequenceNumber', 'AcknowledgmentNumber')"
							onComplete="TCP.inc_stored_val(self, 'SequenceNumber')">
				<Data ref="TCP:FINACK"/>
				<DataModel name="FINACK" ref="TCP:Packet"/>
			</Action>
			<Action type="changeState" ref="WaitingForFinAck"/>
		</State>

		<State name="WaitingForFinAck">
			<Action name="GetPacket" type="input"
							onComplete="TCP.process_sequence(self)">
				<DataModel name="Packet" ref="TCP:InIPv4Packet"/>
			</Action>
			<Action name="ChangeToSend"
							type="changeState" ref="SendFinalFinAck"
							when="TCP.chk_if_ack_for_me(self) and bool(int(self.parent.actions[0].dataModel.find('FIN').InternalValue))"/>
			<Action  name="ReadMore" type="changeState" ref="WaitingForFinAck" />
		</State>
		
		<State name="SendFinalFinAck">
			<Action name="Close" type="output"
							onStart="TCP.set_defaults_from_store(self, 'SequenceNumber', 'AcknowledgmentNumber')"
							onComplete="TCP.inc_stored_val(self, 'SequenceNumber')">
				<Data ref="TCP:FINACK"/>
				<DataModel name="FINACK" ref="TCP:Packet"/>
			</Action>
		</State>
	</StateModel>

	<Test name="Default">
		<!-- <Agent ref="RemoteAgent"/> -->
		<StateModel ref="TheState"/>
		<Publisher class="RawV4">
			<Param name="Host" value="##TargetIP##"/>
			<Param name="Interface" value="##SourceIP##"/>
			<Param name="Protocol" value="6"/>
		</Publisher>

		<Strategy class="##Strategy##"/>
		<Logger class="logger.Filesystem">
			<Param name="Path" value="##LoggerPath##" />
		</Logger>
	</Test>
</Peach>
<!-- end -->
