<?xml version="1.0" encoding="utf-8"?>
<Peach xmlns="http://peachfuzzer.com/2012/Peach" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xsi:schemaLocation="http://peachfuzzer.com/2012/Peach ../peach.xsd"
			 author="Deja Vu Security, LLC" description="Transport Control Protocol PIT" version="0.0.2">

	<!-- This pit uses TCP in a way the OS is not aware of. In order to use -->
	<!-- this pit it's necessary to block RST outgoing on the target port so -->
	<!-- the OS doesn't interfere with target communication. -->

	<Include ns="TCP" src="file:##Path##/CommonHeaders/TCPHeader.xml"/>
	<PythonPath path="##Path##/CommonHeaders/"/>

	<Import import="TCP"/>
	
	<!-- for debugging -->
	<Import import="code"/>

	<Agent name="RemoteAgent" location="tcp://##RemoteAgentIP##:9001">
		<Monitor class="Process">
			<Param name="Executable" value="##tsharkBin##" />
			<Param name="Arguments" value="-i ##tsharkInterface##" />
			<Param name="FaultOnEarlyExit" value="true" />
		</Monitor>
		<Monitor class="Pcap">
			<Param name="Device" value="##Interface##" />
		</Monitor>
	</Agent>

	<StateModel name="TheState" initialState="Initial">

		<State name="Initial" >
			<Action type="output" 
							onStart="TCP.init_seq(self)"
							onComplete="TCP.set_state(self, 'SYN SENT') and TCP.inc_stored_val(self, 'SequenceNumber')">
				<Data ref="TCP:SYN"/>
				<DataModel name="SYNPacket" ref="TCP:Packet"/>
			</Action>
			<Action type="changeState" ref="Read"/>
		</State>
		
		<State name="Read">
			<Action name="GetPacket" type="input" 
							onComplete="TCP.set_to_store(self, AcknowledgmentNumber=int(self.dataModel.find('SequenceNumber').InternalValue.ToString())+(len(self.dataModel.find('TcpPayload').InternalValue.ToString()) or 1))">
				<DataModel name="Packet" ref="TCP:InIPv4Packet"/>
			</Action>
			<Action type="changeState" ref="SetSynRecvd" 
							when="TCP.chk_if_ack_for_me(self) and (TCP.get_state(self) == 'SYN SENT')"/>
			<Action type="changeState" ref="SetFinished" 
							when="TCP.chk_if_ack_for_me(self) and (TCP.get_state(self) == 'CLOSE')"/>
			<Action type="changeState" ref="Read" />
		</State>

		<State name="SetSynRecvd">
			<Action type="changeState" ref="Acknowledge" 
							when="TCP.set_state(self, 'SYN RCVD')"/>
		</State>

		<State name="SetFinished">
			<Action type="changeState" ref="Acknowledge" 
							when="TCP.set_state(self, 'CLOSE')"/>
		</State>

		<State name="Acknowledge">
			<!-- <Action type="changeState" ref="Acknowledge" when="code.InteractiveConsole(locals=globals()).interact()"/> -->
			
			<Action name="SendAck" type="output" 
							onStart="TCP.set_defaults_from_store(self, 'SequenceNumber', 'AcknowledgmentNumber')" >
				<!-- onComplete="TCP.inc_stored_vals(self, 'SequenceNumber', 'AcknowledgmentNumber')" > -->
				<Data ref="TCP:ACK"/>
				<DataModel name="ACK" ref="TCP:Packet"/>
			</Action>
			<Action type="changeState" ref="SetEstablished" when="TCP.get_state(self) == 'SYN RCVD'"/>
			<Action type="changeState" ref="ExitState" when="TCP.get_state(self) == 'CLOSE'"/>
		</State>

		<State name="SetEstablished">
			<Action type="changeState" ref="SendFinal" 
							when="TCP.set_state(self, 'ESTAB')"/>
		</State>

		<State name="ExitState" />
		
		<State name="SendFinal">
			<Action name="Close" type="output"
							onStart="TCP.set_defaults_from_store(self, 'SequenceNumber', 'AcknowledgmentNumber')"
							onComplete="TCP.set_state(self, 'CLOSE') and TCP.inc_stored_val(self, 'SequenceNumber')">
							<!-- onStart="TCP.set_defaults_from_store(self, 'SequenceNumber')"  -->
				<Data ref="TCP:FINACK"/>
				<!-- <Data ref="TCP:FIN"/> -->
				<DataModel name="FINACK" ref="TCP:Packet"/>
				<!-- <DataModel name="FIN" ref="TCP:Packet"/> -->
			</Action>
			<Action type="changeState" ref="Read"/>
		</State>

		
	</StateModel>

	<Test name="Default">
		<!-- <Agent ref="RemoteAgent"/> -->
		<StateModel ref="TheState"/>
		<Publisher class="RawV4">
			<Param name="Host" value="##TargetIP##"/>
			<Param name="Interface" value="##SourceIP##"/>
			<Param name="Protocol" value="6"/>
		</Publisher>

		<Strategy class="##Strategy##"/>
		<Logger class="logger.Filesystem">
			<Param name="Path" value="##LoggerPath##" />
		</Logger>
	</Test>
</Peach>
<!-- end -->
