<HTML>
<HEAD>

<TITLE>The Embedded Bitmap Location Table</TITLE>

<LINK REL=STYLESHEET HREF="otspec.css" TYPE="text/css"></HEAD>

<BODY BGCOLOR=#FFFFFF LINK=#000090 VLINK=#AA00CC TOPMARGIN=0 LEFTMARGIN=0 STYLE="background: #FFFFFF">

		
		
		
		
		
		
		
		
		
		
		

		
	
<!--TOOLBAR_START--><!--TOOLBAR_EXEMPT--><!--TOOLBAR_END--><P><BR>


<P>

<CENTER><P>

<TABLE WIDTH=580 CELLSPACING=0 CELLPADDING=0 BORDER=0>

<TR>
<TD HEIGHT=1 WIDTH=20><IMG SRC="pixel.gif" WIDTH=20 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=60><IMG SRC="pixel.gif" WIDTH=60 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=480><IMG SRC="pixel.gif" WIDTH=480 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=20><IMG SRC="pixel.gif" WIDTH=20 HEIGHT=1 ALT=""></TD>
</TR>
<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=5><IMG SRC="toprule.gif" WIDTH=580 HEIGHT=5></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD WIDTH=560 COLSPAN=3 VALIGN=TOP><FONT FACE="Verdana, Arial, Helvetica" SIZE=1 CLASS=detail>
	<A HREF="http://www.microsoft.com/typography/default.asp">Microsoft Typography</A>
	 | <A HREF="http://www.microsoft.com/typography/creators.htm">Developer...</A>
	 | <A HREF="default.htm">OpenType specification</A>
	 | <A HREF="otff.htm#otttables">OpenType tables</A>
	 | The EBLC table
</FONT></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=10><IMG SRC="midrule.gif" WIDTH=580 HEIGHT=10 ALT=""></TD>
</TR>


<TR>
<TD WIDTH=20></TD>
<TD WIDTH=60 VALIGN=TOP></TD>
<TD WIDTH=480 VALIGN=TOP>
<P><BR>
<FONT FACE="Verdana, Arial, Helvetica" SIZE=5 CLASS=heading>EBLC - Embedded Bitmap Location
Table</FONT>

<P>
Three tables are used to embed bitmaps
in OpenType<FONT COLOR="#999999" STYLE="font-size: 7pt; color:#999999"><SUP>TM</SUP></FONT> fonts. They are the 'EBLC' table for embedded bitmap
locators, the 'EBDT' table for embedded bitmap data, and the 'EBSC'
table for embedded bitmap scaling information. OpenType embedded
bitmaps are called 'sbits' (for &quot;scaler bitmaps&quot;). A
set of bitmaps for a face at a given size is called a strike.
<P>
The 'EBLC' table identifies the sizes and glyph ranges of the
sbits, and keeps offsets to glyph bitmap data in indexSubTables.
The 'EBDT' table then stores the glyph bitmap data, also in a
number of different possible formats. Glyph metrics information
may be stored in either the 'EBLC' or 'EBDT' table, depending
upon the indexSubTable and glyph bitmap formats. The 'EBSC' table
identifies sizes that will be handled by scaling up or scaling
down other sbit sizes.
<P>
The 'EBLC' table uses the same format as the Apple Apple Advanced Typography (AAT)
'bloc' table.
<P>
The 'EBLC' table begins with a header containing the table version
and number of strikes. An OpenType font may have one or more strikes
embedded in the 'EBDT' table.

<P><BR><B>eblcHeader</B><P>
<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=30% BGCOLOR="#C0C0C0">Name</TD>
<TD CLASS=tab WIDTH=50% BGCOLOR="#C0C0C0">Description</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>FIXED</TD>
<TD CLASS=tab VALIGN=TOP>version</TD>
<TD CLASS=tab VALIGN=TOP>initially defined as 0x00020000</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>ULONG</TD>
<TD CLASS=tab VALIGN=TOP>numSizes</TD>
<TD CLASS=tab VALIGN=TOP>Number of bitmapSizeTables</TD></TR>
</TABLE>
 <P>
<P>
The eblcHeader is followed immediately by
the bitmapSizeTable array(s). The numSizes in the eblcHeader indicates
the number of bitmapSizeTables in the array. Each strike is defined
by one bitmapSizeTable.

<P><BR><B>bitmapSizeTable</B><P>

<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=30% BGCOLOR="#C0C0C0">Name</TD>
<TD CLASS=tab WIDTH=50% BGCOLOR="#C0C0C0">Description</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>ULONG</TD>
<TD CLASS=tab VALIGN=TOP>indexSubTableArrayOffset</TD>
<TD CLASS=tab VALIGN=TOP>offset to index subtable from beginning of EBLC.</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>ULONG</TD>
<TD CLASS=tab VALIGN=TOP>indexTablesSize</TD>
<TD CLASS=tab VALIGN=TOP>number of bytes in corresponding index subtables and array</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>ULONG</TD>
<TD CLASS=tab VALIGN=TOP>numberOfIndexSubTables</TD>
<TD CLASS=tab VALIGN=TOP>an index subtable for each range or format change</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>ULONG</TD>
<TD CLASS=tab VALIGN=TOP>colorRef</TD>
<TD CLASS=tab VALIGN=TOP>not used; set to 0.</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>sbitLineMetrics</TD>
<TD CLASS=tab VALIGN=TOP>hori</TD>
<TD CLASS=tab VALIGN=TOP>line metrics for text rendered horizontally</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>sbitLineMetrics</TD>
<TD CLASS=tab VALIGN=TOP>vert</TD>
<TD CLASS=tab VALIGN=TOP>line metrics for text rendered vertically</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>USHORT</TD>
<TD CLASS=tab VALIGN=TOP>startGlyphIndex</TD>
<TD CLASS=tab VALIGN=TOP>lowest glyph index for this size</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>USHORT</TD>
<TD CLASS=tab VALIGN=TOP>endGlyphIndex</TD>
<TD CLASS=tab VALIGN=TOP>highest glyph index for this size</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>BYTE</TD>
<TD CLASS=tab VALIGN=TOP>ppemX</TD>
<TD CLASS=tab VALIGN=TOP>horizontal pixels per Em</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>BYTE</TD>
<TD CLASS=tab VALIGN=TOP>ppemY</TD>
<TD CLASS=tab VALIGN=TOP>vertical pixels per Em</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>BYTE</TD>
<TD CLASS=tab VALIGN=TOP>bitDepth</TD>
<TD CLASS=tab VALIGN=TOP>the Microsoft rasterizer v.1.7 or greater supports the following bitDepth values, as described below: 1, 2, 4, and 8.</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>flags</TD>
<TD CLASS=tab VALIGN=TOP>vertical or horizontal (see bitmapFlags)</TD>
</TR>
</TABLE> <P>
<P>
The indexSubTableArrayOffset is the offset
from the beginning of the 'EBLC' table to the indexSubTableArray.
Each strike has one of these arrays to support various formats
and discontiguous ranges of bitmaps. The indexTablesSize is the
total number of bytes in the indexSubTableArray and the associated
indexSubTables. The numberOfIndexSubTables is a count of the indexSubTables
for this strike.
<P>
The horizontal and vertical line metrics contain the ascender,
descender, linegap, and advance information for the strike. The
line metrics format is described in the following table:

<P><BR><B>sbitLineMetrics</B><P>
<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=80% BGCOLOR="#C0C0C0">Name</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>ascender</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>descender</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>BYTE</TD>
<TD CLASS=tab VALIGN=TOP>widthMax</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>caretSlopeNumerator</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>caretSlopeDenominator</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>caretOffset</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>minOriginSB</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>minAdvanceSB</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>maxBeforeBL</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>minAfterBL</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>pad1</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>pad2</TD></TR>
</TABLE> <P>
<P>
The caret slope determines the angle at which
the caret is drawn, and the offset is the number of pixels (+
or -) to move the caret. This is a signed char since we are dealing
with integer metrics. The minOriginSB, minAdvanceSB , maxBeforeBL,
and minAfterBL are described in the diagrams below. The main need
for these numbers is for scalers that may need to pre-allocate
memory and/or need more metric information to position glyphs.
All of the line metrics are one byte in length. The line metrics
are not used directly by the rasterizer, but are available to
clients who want to parse the 'EBLC' table.
<P>
The startGlyphIndex and endGlyphIndex describe the minimum and
maximum glyph codes in the strike, but a strike does not necessarily
contain bitmaps for all glyph codes in this range. The indexSubTables
determine which glyphs are actually present in the 'EBDT' table.
<P>
The ppemX and ppemY fields describe the size of the strike in
pixels per Em. The ppem measurement is equivalent to point size
on a 72 dots per inch device. Typically, ppemX will be equal to
ppemY for devices with 'square pixels'. To accommodate devices
with rectangular pixels, and to allow for bitmaps with other aspect
ratios, ppemX and ppemY may differ.
<P>
The bitDepth field is used to specify the number of levels of gray used in the embedded bitmaps. The Microsoft rasterizer v.1.7 or greater support the following values.
<P><BR><B>bitDepth</B><P>
<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Value</TD>
<TD CLASS=tab WIDTH=80% BGCOLOR="#C0C0C0">Description</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>1</TD>
<TD CLASS=tab VALIGN=TOP>black/white</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>2</TD>
<TD CLASS=tab VALIGN=TOP>4 levels of gray</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>4</TD>
<TD CLASS=tab VALIGN=TOP>16 levels of gray</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>8</TD>
<TD CLASS=tab VALIGN=TOP>256 levels of gray</TD></TR>
</TABLE> <P>
The 'flags' byte contains two bits to indicate the direction of
small glyph metrics: horizontal or vertical.  The remaining bits
are reserved.

<P><BR><B>Bitmap Flags</B><P>
<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=30% BGCOLOR="#C0C0C0">Name</TD>
<TD CLASS=tab WIDTH=50% BGCOLOR="#C0C0C0">Description</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>0x01</TD>
<TD CLASS=tab VALIGN=TOP>Horizontal</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>0x02</TD>
<TD CLASS=tab VALIGN=TOP>Vertical</TD></TR>
</TABLE>
<P>
The colorRef and bitDepth fields are reserved
for future enhancements. For monochrome bitmaps they should have
the values colorRef=0 and bitDepth=1.

<P>
<BR>
<I>Horizontal Text</I>
<P>
<IMG align=center  ALT="DIAGRAM" SRC="img00283.gif">
<P>
<BR>
<I>Vertical Text</I>
<P>
<IMG align=center ALT="DIAGRAM" SRC="img00284.gif">
<P>
<BR>
Associated with the image data for every glyph in a strike is
a set of glyph metrics. These glyph metrics describe bounding
box height and width, as well as side bearing and advance width
information. The glyph metrics can be found in one of two places.
For ranges of glyphs (not necessarily the whole strike) whose
metrics may be different for each glyph, the glyph metrics are
stored along with the glyph image data in the 'EBDT' table. Details
of how this is done is described in the 'EBDT' section of this
document. For ranges of glyphs whose metrics are identical for
every glyph, we save significant space by storing a single copy
of the glyph metrics in the indexSubTable in the 'EBLC'.
<P>
There are also two different formats for glyph metrics: big glyph
metrics and small glyph metrics. Big glyph metrics define metrics
information for both horizontal and vertical layouts. This is
important in fonts (such as Kanji) where both types of layout
may be used. Small glyph metrics define metrics information for
one layout direction only. Which direction applies, horizontal
or vertical, is determined by the 'flags' field in the bitmapSizeTable.

<P><BR><B>bigGlyphMetrics</B><P>
<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=80% BGCOLOR="#C0C0C0">Name</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>BYTE</TD>
<TD CLASS=tab VALIGN=TOP>height</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>BYTE</TD>
<TD CLASS=tab VALIGN=TOP>width</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>horiBearingX</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>horiBearingY</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>BYTE</TD>
<TD CLASS=tab VALIGN=TOP>horiAdvance</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>vertBearingX</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>vertBearingY</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>BYTE</TD>
<TD CLASS=tab VALIGN=TOP>vertAdvance</TD></TR>
</TABLE>  

<P><BR><B>smallGlyphMetrics</B><P>
<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=80% BGCOLOR="#C0C0C0">Name</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>BYTE</TD>
<TD CLASS=tab VALIGN=TOP>height</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>BYTE</TD>
<TD CLASS=tab VALIGN=TOP>width</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>BearingX</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>CHAR</TD>
<TD CLASS=tab VALIGN=TOP>BearingY</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>BYTE</TD>
<TD CLASS=tab VALIGN=TOP>Advance</TD></TR>
</TABLE> <P>
<P>
The following diagram illustrates the meaning
of the glyph metrics.<BR>

<P>
<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0><TR><TD>
<IMG WIDTH=438 HEIGHT=224 ALT="DIAGRAM" SRC="IMG00285.GIF"><BR>
</TABLE>

<BR>

<P>
The bitmapSizeTable for each strike contains
the offset to an array of indexSubTableArray elements. Each element
describes a glyph code range and an offset to the indexSubTable
for that range. This allows a strike to contain multiple glyph
code ranges and to be represented in multiple index formats if
desirable.

<P><BR><B>indexSubTableArray</B><P>

<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=30% BGCOLOR="#C0C0C0">Name</TD>
<TD CLASS=tab WIDTH=50% BGCOLOR="#C0C0C0">Description</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>USHORT</TD>
<TD CLASS=tab VALIGN=TOP>firstGlyphIndex</TD>
<TD CLASS=tab VALIGN=TOP>first glyph code of this range</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>USHORT</TD>
<TD CLASS=tab VALIGN=TOP>lastGlyphIndex</TD>
<TD CLASS=tab VALIGN=TOP>last glyph code of this range (inclusive)</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>ULONG</TD>
<TD CLASS=tab VALIGN=TOP>additionalOffset<br>ToIndexSubtable</TD>
<TD CLASS=tab VALIGN=TOP>add to indexSubTableArrayOffset to get offset from beginning of 'EBLC'</TR>
</TABLE> <P>
<P>
After determining the strike, the rasterizer
searches this array for the range containing the given glyph code.
When the range is found, the additionalOffsetToIndexSubtable is
added to the indexSubTableArrayOffset to get the offset of the
indexSubTable in the 'EBLC'.
<P>
The first indexSubTableArray is located after the last bitmapSizeSubTable
entry. Then the indexSubTables for the strike follow. Another
indexSubTableArray (if more than one strike) and its indexSubTables
are next. The 'EBLC' continues with an array and indexSubTables
for each strike.
<P>
We now have the offset to the indexSubTable. All indexSubTable
formats begin with an indexSubHeader which identifies the indexSubTable
format, the format of the 'EBDT' image data, and the offset from
the beginning of the 'EBDT' table to the beginning of the image
data for this range.

<P><BR><B>indexSubHeader</B><P>

<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=30% BGCOLOR="#C0C0C0">Name</TD>
<TD CLASS=tab WIDTH=50% BGCOLOR="#C0C0C0">Description</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>USHORT</TD>
<TD CLASS=tab VALIGN=TOP>indexFormat</TD>
<TD CLASS=tab VALIGN=TOP>format of this indexSubTable</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>USHORT</TD>
<TD CLASS=tab VALIGN=TOP>imageFormat</TD>
<TD CLASS=tab VALIGN=TOP>format of 'EBDT' image data</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>ULONG</TD>
<TD CLASS=tab VALIGN=TOP>imageDataOffset</TD>
<TD CLASS=tab VALIGN=TOP>offset to image data in 'EBDT' table</TD></TR>
</TABLE> <P>

<P>
There are currently five different formats
used for the indexSubTable, depending upon the size and type of
bitmap data in the glyph code range. Apple 'bloc' tables support
only formats 1 through 3.
<P>
The choice of which indexSubTable format to use is up to the font
manufacturer, but should be made with the aim of minimizing the
size of the font file. Ranges of glyphs with variable metrics
- that is, where glyphs may differ from each other in bounding
box height, width, side bearings or advance - must use format
1, 3 or 4. Ranges of glyphs with constant metrics can save space
by using format 2 or 5, which keep a single copy of the metrics
information in the indexSubTable rather than a copy per glyph
in the 'EBDT' table. In some monospaced fonts it makes sense to
store extra white space around some of the glyphs to keep all
metrics identical, thus permitting the use of format 2 or 5.
<P>
Structures for each indexSubTable format are listed below.

<P><BR><B>indexSubTable1: variable metrics glyphs with 4 byte offsets</B><P>

<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=30% BGCOLOR="#C0C0C0">Name</TD>
<TD CLASS=tab WIDTH=50% BGCOLOR="#C0C0C0">Description</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>indexSubHeader</TD>
<TD CLASS=tab VALIGN=TOP>header</TD>
<TD CLASS=tab VALIGN=TOP>header info</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>ULONG</TD>
<TD CLASS=tab VALIGN=TOP>offsetArray[]</TD>
<TD CLASS=tab VALIGN=TOP>offsetArray[glyphIndex]+<BR>imageDataOffset=glyphData 
<BR>sizeOfArray=
<BR>(lastGlyph-firstGlyph+1)+1+1 
<BR>pad if needed</TD></TR>
</TABLE> <P>

<P><BR><B>indexSubTable2: all glyphs have identical metrics</B><P>

<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=30% BGCOLOR="#C0C0C0">Name</TD>
<TD CLASS=tab WIDTH=50% BGCOLOR="#C0C0C0">Description</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>indexSubHeader</TD>
<TD CLASS=tab VALIGN=TOP>header</TD>
<TD CLASS=tab VALIGN=TOP>header info</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>ULONG</TD>
<TD CLASS=tab VALIGN=TOP>imageSize</TD>
<TD CLASS=tab VALIGN=TOP>all the glyphs are of the same size</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>bigGlyphMetrics</TD>
<TD CLASS=tab VALIGN=TOP>bigMetrics</TD>
<TD CLASS=tab VALIGN=TOP>all glyphs have the same metrics; glyph data may be compressed, byte-aligned, or bit-aligned</TD></TR>
</TABLE> <P>

<P><BR><B>indexSubTable3: variable metrics glyphs with 2 byte offsets</B><P>
<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=30% BGCOLOR="#C0C0C0">Name</TD>
<TD CLASS=tab WIDTH=50% BGCOLOR="#C0C0C0">Description</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>indexSubHeader</TD>
<TD CLASS=tab VALIGN=TOP>header</TD>
<TD CLASS=tab VALIGN=TOP>header info</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>USHORT</TD>
<TD CLASS=tab VALIGN=TOP>offsetArray[]</TD>
<TD CLASS=tab VALIGN=TOP>offsetArray[glyphIndex]<BR>+imageDataOffset=
glyphData<BR>
sizeOfArray=<BR>(lastGlyph-firstGlyph+1)+1+1 pad if needed
</TR>
</TABLE> <P>

<P><BR><B>indexSubTable4: variable metrics glyphs with sparse glyph codes</B><P>

<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=30% BGCOLOR="#C0C0C0">Name</TD>
<TD CLASS=tab WIDTH=50% BGCOLOR="#C0C0C0">Description</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>indexSubHeader</TD>
<TD CLASS=tab VALIGN=TOP>header</TD>
<TD CLASS=tab VALIGN=TOP>header info</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>ULONG</TD>
<TD CLASS=tab VALIGN=TOP>numGlyphs</TD>
<TD CLASS=tab VALIGN=TOP>array length</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>codeOffsetPair</TD>
<TD CLASS=tab VALIGN=TOP>glyphArray[]</TD>
<TD CLASS=tab VALIGN=TOP>one per glyph; sizeOfArray=numGlyphs+1</TD></TR>
</TABLE> <P>
<PRE>
codeOffsetPair:
used by indexSubTable4
</PRE>

<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=30% BGCOLOR="#C0C0C0">Name</TD>
<TD CLASS=tab WIDTH=50% BGCOLOR="#C0C0C0">Description</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>USHORT</TD>
<TD CLASS=tab VALIGN=TOP>glyphCode</TD>
<TD CLASS=tab VALIGN=TOP>code of glyph present</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>USHORT</TD>
<TD CLASS=tab VALIGN=TOP>offset</TD>
<TD CLASS=tab VALIGN=TOP>location in EBDT</TD></TR>
</TABLE> <P>

indexSubTable5: constant metrics glyphs with sparse glyph codes
<P>
<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Type</TD>
<TD CLASS=tab WIDTH=30% BGCOLOR="#C0C0C0">Name</TD>
<TD CLASS=tab WIDTH=50% BGCOLOR="#C0C0C0">Description</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>indexSubHeader</TD>
<TD CLASS=tab VALIGN=TOP>header</TD>
<TD CLASS=tab VALIGN=TOP>header info</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>ULONG</TD>
<TD CLASS=tab VALIGN=TOP>imageSize</TD>
<TD CLASS=tab VALIGN=TOP>all glyphs have the same data size</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>bigGlyphMetrics</TD>
<TD CLASS=tab VALIGN=TOP>bigMetrics</TD>
<TD CLASS=tab VALIGN=TOP>all glyphs have the same metrics</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>ULONG</TD>
<TD CLASS=tab VALIGN=TOP>numGlyphs</TD>
<TD CLASS=tab VALIGN=TOP>array length</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>USHORT</TD>
<TD CLASS=tab VALIGN=TOP>glyphCodeArray[]</TD>
<TD CLASS=tab VALIGN=TOP>one per glyph, sorted by glyph code; sizeOfArray=numGlyphs</TD></TR>
</TABLE> <P>
<P>
The size of the 'EBDT' image data can be calculated
from the indexSubTable information. For the constant metrics formats
(2 and 5) the image data size is constant, and is given in the
imageSize field. For the variable metrics formats (1, 3, and 4)
image data must be stored contiguously and in glyph code order,
so the image data size may be calculated by subtracting the offset
for the current glyph from the offset of the next glyph. Because
of this, it is necessary to store one extra element in the offsetArray
pointing just past the end of the range's image data. This will
allow the correct calculation of the image data size for the last
glyph in the range.
<P>
Contiguous, or nearly contiguous, ranges of glyph codes are handled
best by formats 1, 2, and 3 which store an offset for every glyph
code in the range. Very sparse ranges of glyph codes should use
format 4 or 5 which explicitly call out the glyph codes represented
in the range. A small number of missing glyphs can be efficiently
represented in formats 1 or 3 by having the offset for the missing
glyph be followed by the same offset for the next glyph, thus
indicating a data size of zero.
<P>
The only difference between formats 1 and 3 is the size of the
offsetArray elements: format 1 uses ULONG's while format 3 uses
USHORT's. Therefore format 1 can cover a greater range (&gt; 64k
bytes) while format 3 saves more space in the 'EBLC' table. Since
the offsetArray elements are added to the imageDataOffset base
address in the indexSubHeader, a very large set of glyph bitmap
data could be addressed by splitting it into multiple ranges,
each less than 64k bytes in size, allowing the use of the more
efficient format 3.
<P>
The 'EBLC' table specification requires double word (ULONG) alignment
for all subtables. This occurs naturally for indexSubTable formats
1, 2, and 4, but may not for formats 3 and 5, since they include
arrays of type USHORT. When there is an odd number of elements
in these arrays it is necessary to add an extra padding element
to maintain proper alignment.

<FONT FACE="Verdana, Arial, Helvetica" SIZE=1><P CLASS=detail><BR><BR>
	this page was last updated 27 March 1998<BR>
	&copy; 1998 Microsoft Corporation. All rights reserved. <A HREF="http://www.microsoft.com/Misc/cpyright.htm">Terms of use</A>.<BR>
	comments to the MST group: 
	<A HREF="/typography/about.htm">how to contact us</A>.
	<P>&nbsp;
</FONT>
</TD>
<TD WIDTH=20></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD COLSPAN=2 WIDTH=540></TD>
<TD WIDTH=20></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=10><IMG SRC="midrule.gif" WIDTH=580 HEIGHT=10 ALT=""></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD WIDTH=560 COLSPAN=3 VALIGN=TOP><FONT FACE="Verdana, Arial, Helvetica" SIZE=1 CLASS=detail>
	<A HREF="http://www.microsoft.com/typography/default.asp">Microsoft Typography</A>
	 | <A HREF="http://www.microsoft.com/typography/creators.htm">Developer...</A>
	 | <A HREF="default.htm">OpenType specification</A>
	 | <A HREF="otff.htm#otttables">OpenType tables</A>
	 | The EBLC table
</FONT></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=20><IMG SRC="baserule.gif" WIDTH=580 HEIGHT=20></TD>
</TR>
</TABLE>

</CENTER>
</BODY>
</HTML>





