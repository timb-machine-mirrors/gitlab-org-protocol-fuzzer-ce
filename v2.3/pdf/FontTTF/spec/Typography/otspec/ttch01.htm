<HTML>
<HEAD>
<TITLE>TrueType Fundamentals</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<LINK REL=STYLESHEET HREF="otspec.css" TYPE="text/css"></HEAD>
<BODY BGCOLOR="#FFFFFF" BOTTOMMARGIN="20" TOPMARGIN="0" LEFTMARGIN="0">


		
		
		
		
		
		
		
		
		
		
		

		
	
<!--TOOLBAR_START--><!--TOOLBAR_EXEMPT--><!--TOOLBAR_END--><P><BR>

<CENTER><P>

<TABLE WIDTH=580 CELLSPACING=0 CELLPADDING=0 BORDER=0>

<TR>
<TD HEIGHT=1 WIDTH=20><IMG SRC="pixel.gif" WIDTH=20 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=60><IMG SRC="pixel.gif" WIDTH=60 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=480><IMG SRC="pixel.gif" WIDTH=480 HEIGHT=1 ALT=""></TD>
<TD HEIGHT=1 WIDTH=20><IMG SRC="pixel.gif" WIDTH=20 HEIGHT=1 ALT=""></TD>
</TR>
<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=5><IMG SRC="toprule.gif" WIDTH=580 HEIGHT=5></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD WIDTH=560 COLSPAN=3 VALIGN=TOP><FONT FACE="Verdana, Arial, Helvetica" SIZE=1 CLASS=detail>
	<A HREF="http://www.microsoft.com/typography/default.asp">Microsoft Typography</A>
	 | <A HREF="http://www.microsoft.com/typography/creators.htm">Developer...</A>
	 | <A HREF="default.htm">OpenType specification</A>
	 | TrueType fundamentals
</FONT></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=10><IMG SRC="midrule.gif" WIDTH=580 HEIGHT=10 ALT=""></TD>
</TR>


<TR>
<TD WIDTH=20></TD>
<TD WIDTH=60 VALIGN=TOP></TD>
<TD WIDTH=480 VALIGN=TOP>
<P><BR>
<FONT FACE="Verdana, Arial, Helvetica" SIZE=5 CLASS=heading>TrueType fundamentals</FONT>
<P>
OpenType fonts are an extension of the TrueType Font File format.
<P>
This chapter introduces the basic concepts needed to create and instruct a TrueType font, or an OpenType font that contains TrueType outline data. It begins with an overview of the steps involved in taking a design from paper to the creation of a bitmap that can be sent to an output device and follows with a closer look at each of the steps in the process. 

<P><BR><B>From design to font file</B>
<P>
 A TrueType font can originate as a new design
drawn on paper or created on a computer screen. TrueType fonts
can also be obtained by converting fonts from other formats. Whatever
the case, it is necessary to create a TrueType font file that,
among other things, describes each glyph in the font as an outline
in the TrueType format.  
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460>
<TR>
<TD><IMG  ALT="DIAGRAM" SRC="IMG00288.GIF"><BR>
</TD></TR>
</TABLE>

<P><BR><B>From Font File to Paper</B>
<P>
This section describes the process that allows glyphs from a TrueType font file to be displayed on raster devices. 
<P>
First, the outline stored in the font file isscaled to the requested size. Once scaled, the points that make up the outline are no longer recorded in the FUnits used to describe the original outline, but have become device-specific pixel coordinates. 
<P>
Next, the instructions associated with this glyph are carried
out by the interpreter. The result of carrying out the instructions
is a grid-fitted outline for the requested glyph. This outline
is then scan converted to produce a bitmap that can be rendered
on the target device.
<P>
<IMG SRC="Ball.GIF" WIDTH=467 HEIGHT=424 ALT="diagram">
<P>
<OL>
<LI>Digitize outline with FUnit coordinates in TrueType font file
<LI>Scaler converts FUnits to pixel coordinates and scales outline to size requested by application
<LI>Outline "sized" to new grid
<LI>Scaled outline with pixel coordinates
<LI>Interpreter executes instructions associated with glyph &quot;B&quot; and gridfits
<LI>Grid-fitted outline
<LI>Grid fitted outline
<LI>Scan converter decides which pixels to turn on
<LI>Bitmap is rendered on raster device
</OL>

<P><BR><B>Digitizing a Design</B>
<P>
This section describes the coordinate system used to establish the locations of the points that define a glyph outline. It also documents the placement of glyphs with respect to the coordinate axes. 

<P><BR><I>Outlines</I>
<P>
In a TrueType font, glyph shapes are described
by their outlines. A glyph outline consists of a series of contours.
A simple glyph may have only one contour. More complex glyphs
can have two or more contours. Composite glyphs can be constructed
by combining two or more simpler glyphs. Certain control characters
that have no visible manifestation will map to the glyph with
no contours.
 
<P>
<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460>
<TR>
<TD align=center><IMG WIDTH=100 HEIGHT=157 ALT="DIAGRAM" SRC="IMG00290.GIF"><IMG WIDTH=46 HEIGHT=161 ALT="DIAGRAM" SRC="IMG00291.GIF"><IMG WIDTH=149 HEIGHT=157 ALT="DIAGRAM" SRC="IMG00292.GIF"></TD></TR>
</TABLE>
<P CLASS=caption>Figure 1-1 Glyphs with one, two, three contours respectively

<P>
Contours are composed of straight lines and curves. Curves are defined by a series of points that describe second order Bezier-splines. The TrueType Bezier&#173;spline format uses two types of points to define curves, those that are <I>on</I> the curve and those that are <I>off</I> the curve. Any combination of off and on curve points is acceptable when defining a curve.
Straight lines are defined by two consecutive on curve points.
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460><TR><TD align=center>
<IMG WIDTH=195 HEIGHT=246 ALT="DIAGRAM" SRC="IMG00293.GIF"></TD></TR>
</TABLE>
<P CLASS=caption>Figure 1-2 A glyph description consisting of a series of on and off curve points

<P>
The points that make up a curve must be numbered in consecutive
order. It makes a difference whether the order is increasing or
decreasing in determining the fill pattern of the shapes that
make up the glyph. The direction of the curves has to be such
that, if the curve is followed in the direction of increasing
point numbers, the black space (the filled area) will always be
to the right.
 
<P><BR>
<I>FUnits and the em square</I>
<P>
In a TrueType font file point locations are
described in font units, or FUnits. An FUnit is the smallest measurable
unit in the em square, an imaginary square that is used to size
and align glyphs. The dimensions of the em square typically are
those of the full body height of a font plus some extra spacing
to prevent lines of text from colliding when typeset without extra
leading.
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460><TR><TD align=center>
<IMG  WIDTH=353 HEIGHT=180 ALT="DIAGRAM" SRC="IMG00294.GIF"></TD></TR>
</TABLE>

<P>
While in the days of metal type, glyphs could not extend beyond
the em square, digital typefaces are not so constrained. The em
square may be made large enough to completely contain all glyphs,
including accented glyphs. Or, if it proves convenient, portions
of glyphs may extend outside the em square. TrueType fonts can
handle either approach so the choice is that of the font manufacturer. Figure
1-3 A character that extends outside of the em square
<P>
<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460><TR><TD align=center>
<IMG  WIDTH=128 HEIGHT=131 ALT="DIAGRAM" SRC="IMG00295.GIF"></TD></TR>
</TABLE>
<P>
The em square defines a two-dimensional coordinate
grid whose <I>x</I>-axis describes movement in a horizontal direction
and whose <I>y</I>-axis describes movement in a vertical direction.
This is discussed in more detail in the following section.  

<P><BR>
<I> FUnits and the grid</I>
<P>
A key decision in digitizing a font is determining
the resolution at which the points that make up glyph outlines
will be described. The points represent locations in a grid whose
smallest addressable unit is known as an FUnit or font Unit. The
grid is a two-dimensional coordinate system whose <I>x</I>-axis
describes movement in a horizontal direction and whose <I>y</I>-axis
describes movement in a vertical direction. The grid origin has
the coordinates (0,0). The grid is not an infinite plane. Each
point must be within the range -16384 and +16383 FUnits. Depending
upon the resolution chosen, the range of addressable grid locations
will be smaller.  
<P>
The choice of the granularity of the coordinate grid-that is,
number of units per em (upem)-is made by the font manufacturer.
Outline scaling will be fastest if units per em is chosen to be
a power of 2, such as 2048. 
<P>
<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460><TR><TD align=center>
<IMG  WIDTH=336 HEIGHT=299 ALT="DIAGRAM" SRC="IMG00296.GIF"></TD></TR>
</TABLE>
<P CLASS=caption>Figure 1-4  The coordinate system 
<P>
The origin of the em square need not have
any consistent relationship to the glyph outlines. In practice,
however, applications depend upon the existence of some convention
for the placement of glyphs for a given font. For Roman fonts,
which are intended to be laid out horizontally, a <I>y</I>-coordinate
value of 0 typically is assumed to correspond to the baseline
of the font.  No particular meaning is assigned to an <I>x</I>&#173;coordinate
of 0 but manufacturers may improve the performance of applications
by choosing a standard meaning for the <I>x</I>&#173;origin.  
<P>
For example, you might place a glyph so that
its aesthetic center is at the <I>x</I>&#173;coordinate value
of 0. That is, a set of glyphs so designed when placed in a column
such that their <I>x</I>&#173;coordinate values of 0 are coincident
will appear to be nicely centered. This option would be used for
Kanji or any fonts that are typeset vertically.  Another alternative
is to place each glyph so that its leftmost extreme outline point
has an <I>x</I>-value equal to the left-side-bearing of the glyph.
Fonts created in this way may allow some applications to print
more quickly to PostScript printers.
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460><TR><TD align=center>
<IMG  WIDTH=406 HEIGHT=250 ALT="DIAGRAM" SRC="IMG00297.GIF"></TD></TR>
</TABLE>
<P CLASS=caption>Figure 1-5  Two possible
choices for the glyph origin in a Roman font. In the first case
(left) the left side bearing is <I>x</I>-zero. In the second (right),
the aesthetic center of the character is <I>x</I>-zero 

<P>
Non-Roman fonts may wish to use other conventions
for the meaning of the <I>x</I>&#173;origin and <I>y</I>&#173;origin.
For best results with high-lighting and carets, the body of the
character should be roughly centered within the advance width.
For example, a symmetrical character would have equal left and
right side bearings. 
<P>
The granularity of the em square is determined by the number of
FUnits per em, or more simply units per em . The em square as
divided into FUnits defines a coordinate system with one unit
equaling an FUnit. All points defined in this coordinate system
must have integral locations. The greater the number of units
per em, the greater the precision available in addressing locations
within the em square. 
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460> <TR><TD align=center>
<IMG WIDTH=217 HEIGHT=197 ALT="DIAGRAM" SRC="IMG00298.GIF">
<IMG WIDTH=197 HEIGHT=197 ALT="DIAGRAM" SRC="IMG00299.GIF">
</TD></TR>
</TABLE>
<P CLASS=caption>Figure 1-6 Two em squares, 8 units per em (left), 16 units per em (right) 
 
<P>
FUnits are relative units because they vary
in size as the size of the em square changes. The number of units
per em remains constant for a given font regardless of the point
size. The number of points per em, however, will vary with the
point size of a glyph. An em square is exactly 9 points high when
a glyph is displayed at 9 points, exactly 10 points high when
the font is displayed at 10 point, and so on. Since the number
of units per em does not vary with the point size at which the
font is displayed, the absolute size of an FUnit varies as the
point size varies. 
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460><TR><TD align=center>
<IMG  WIDTH=358 HEIGHT=207 ALT="DIAGRAM" SRC="IMG00300.GIF"><BR></TD></TR>
</TABLE>
<P CLASS=caption>
Figure 1-7 72 point M and 127 point M and their
em squares. Upem equals 8 in both cases.

<P>
Because FUnits are relative to the em square,
a given location on a glyph will have the same coordinate location
in FUnits regardless of the point size at which the font is rendered.
This is convenient because it makes it possible to instruct outline
points once considering only the original outline and have the
changes apply to the glyph at whatever size and resolution it
is ultimately rendered. 

<P><BR>
<B>Scaling a glyph</B>
<P>
This section describes how glyph outlines
are scaled from the master size stored in the font file to the
size requested by an application.   

<P><BR>
<I>Device space</I>
<P>
Whatever the resolution of the em square used
to define a glyph outline, before that glyph can be displayed
it must be scaled to reflect the size, transformation and the
characteristics of the output device on which it is to be displayed.
The scaled outline must describe the character outline in units
that reflect an absolute rather than relative system of measurement.
In this case the points that make up a glyph outline are described
in terms of pixels.  
<P>
Intuitively, pixels are the actual output bits that will appear
on screen or printer. To allow for greater precision in managing
outlines, TrueType describes pixel coordinates to the nearest
sixty-fourth of a pixel.
 
<P><BR>
<I>Converting FUnits to pixels</I>
<P>
Values in the em square are converted to values
in the pixel coordinate system by multiplying them by a scale.
This scale is:  
<P>
pointSize * resolution / ( 72 points per inch * units_per_em )
<P>
where pointSize is the size at which the glyph
is to be displayed, and resolution is the resolution of the output
device. The 72 in the denominator reflects the number of points
per inch. 
<P>
For example, assume that a glyph feature is
550 FUnits in length on a 72 dpi screen at 18 point. There are
2048 units per em. The following calculation reveals that the
feature is 4.83 pixels long. 
<P>
550 *  18 * 72 / ( 72 * 2048 ) = 4.83 

<P><BR>
<I>Display device characteristics</I>
<P>
The resolution of any particular display device
is specified by the number of dots or pixels per inch (dpi) that
are displayed. For example, a VGA under Windows is treated
as a 96 dpi device, and most laser printers have a resolution
of 300 dpi. Some devices, such as an EGA, have different resolution
in the horizontal and vertical directions (i.e. non-square pixels);
in the case of the EGA this resolution is 96 x 72. In such cases,
horizontal dots per inch must be distinguished from vertical dots
per inch.  
<P>
The number of pixels per em is dependent on the resolution of
the output device. An 18 point character will have 18 pixels per
em on a 72 dpi device. Change the resolution to 300 dpi and it
has 75 pixels per em, or change to 1200 dpi and it has 300 pixels
per em.
<P>
<IMG SRC="img00302b.gif" WIDTH=480 HEIGHT=284 ALT="diagram">
<P CLASS=caption>Figure 1-8 18 point figure 8 at 72 dpi, 300 dpi and 1200 dpi 
<P>
Displaying type on a particular device at
a specific point size yields an effective resolution measured
in pixels per em (ppem). The formula for calculating pixels per
em is: 
<P>
ppem = pointSize * dpi / 72
<P>
= (pixels per inch) * (inches per pica point) * (pica points
per em)<P>
= dpi * 1 / 72 * pointSize
<P>
On a 300 dpi laser printer, a 12 point glyph would have 12*300/72
or 50 ppem. On a typesetter with 2400 dpi, it would have 12*2400/72
or 400 ppem. On a VGA, a 12 point glyph would have 12*96/72 or
16 ppem. Similarly, the ppem for a 12 point character on a 72
dpi device would be 12*72/72, or 12. This last calculation points
to a useful rule of thumb: on any 72 dpi device, points and pixels
per em are equal. Note, however, that in traditional typography
an inch contains 72.2752 points (rather than 72); that is, one
point equals .013836 inches.
<P>
If you know the ppem, the formula to convert between FUnits and
pixel space coordinates is:
<P>
pixel_coordinate = em_coordinate * ppem /upem
<P>
An em_coordinate position of (1024, 0) would yield a device_pixels
coordinate of (6, 0), given  2048 units per em and 12 pixels per
em. 

<P><BR>
<B>Grid-fitting a glyph outline</B>
<P>
The fundamental task of instructing a glyph is one of identifying the critical characteristics of the original design and using instructions to ensure that those characteristics will be preserved when the glyph is rendered at different sizes on different devices. Consistent stem weights, consistent color, even spacing, and the elimination of pixel dropouts are common goals.
<P>
To accomplish these goals, it is necessary to ensure that the
correct pixels are turned on when a glyph is rasterized. It is
the pixels that are turned on that create the bitmap image of
the glyph. Since it is the shape of the glyph outline that determines
which pixels will make up the bitmap image of that character at
a given size, it is sometimes necessary to change or distort the
original outline description to produce a high quality image.
This distortion of the outline is known as grid-fitting. 
<P>
The figure below illustrates how grid-fitting a character distorts
the outline found in the original design.  
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460><TR><TD align=center>
<IMG WIDTH=276 HEIGHT=142 ALT="DIAGRAM" SRC="IMG00304.GIF"></TD></TR>
</TABLE>
<P CLASS=caption>Figure 1-9 12 point outlines ungrid-fitted (left) and grid-fitted (right)

<P>
As the illustration above suggests, the grid-fitting
employed in TrueType goes well beyond aligning a glyph's left
side bearing to the pixel grid. This sophisticated grid-fitting
is guided by instructions. The beneficial effects of grid-fitting
are illustrated in the next figure.<P>Figure 1-10 12 point outlines
and bitmap ungrid-fitted (left) and <BR>
grid-fitted (right) 
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460> <TR><TD align=center>
<IMG  WIDTH=284 HEIGHT=153 ALT="DIAGRAM" SRC="IMG00305.GIF"><BR></TD></TR>
</TABLE>

<P>
Grid-fitting is the process of stretching
the outline of a glyph according to the instructions associated
with it. Once a glyph is grid-fitted, the point numbers will be
unchanged but the actual location of that point in the coordinate
grid may have shifted. That is, the coordinates for a given point
number will, very likely, have changed after a glyph is grid-fitted.
 
<P><BR>
<I>What are instructions?</I>
<P>
The TrueType instruction set provides a large
number of commands designed to allow designers to specify how
character features should be rendered. Instructions are the mechanism
by which the design of a character is preserved when it is scaled.
In other words, instructions control the way in which a glyph
outline will be grid-fitted for a particular size or device.  
<P>
Instructing a font will reshape the outline for a given glyph
at a specific size on a given target device in such a way that
the correct pixels are included within its outline. Reshaping
the outline means moving outline points. Points that have been
acted upon by an instruction are said to have been touched. Note
that a point need not actually be moved to be touched. It must
simply be acted upon by an instruction. (See MDAP, chapter 3.)
<P>
TrueType fonts can be used with or without instructions. Uninstructed
fonts will generally produce good quality results at sufficiently
high resolutions and point sizes. The range of sizes over which
an uninstructed font will produce good quality results depends
not only on the output device resolution and point size of the
character but also on the particular font design.  The intended
use of the font can also be a factor in determining whether or
not a particular font should be instructed. For most fonts, if
legibility of small point sizes on low resolution devices is important,
adding instructions will be critical.
<P>
Instructing a font is a process that involves analyzing the key
elements of a glyph's design and using the TrueType instruction
set to ensure that they are preserved. The instructions are flexible
enough to allow characteristics that are roughly the same to be
&quot;homogenized&quot; at small sizes while allowing the full
flavor of the original design to emerge at sizes where there are
sufficiently many pixels. 
<P>
How does the TrueType interpreter know the manner in which an
outline should be distorted to produce a desirable result? This
information is contained in instructions attached to each character
in the font. Instructions specify aspects of a character's design
that are to be preserved as it is scaled. For example, using instructions
it is possible to control the height of an individual character
or of all the characters in a font.  You can also preserve the
relationship between design elements within a character thereby
ensuring, for example, that the widths of the three vertical stems
in the lower case m will not differ dramatically at small sizes.
<P>
The following figure illustrates how changing a glyph's outline
at a specific size will yield a superior result. They show that
an  uninstructed  9 point Arial lowercase m suffers the loss of
a stem due to chance effects in the relationship of stems to pixel
centers. In the second glyph, instructions have aligned the stems
to the grid so that the glyph suffers no similar loss.

<P>
<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460> <TR><TD align=center>
<IMG  WIDTH=206 HEIGHT=266 ALT="DIAGRAM" SRC="IMG00306.GIF"><IMG  WIDTH=202 HEIGHT=266 ALT="DIAGRAM" SRC="IMG00307.GIF"><BR></TD></TR>
</TABLE>
<P CLASS=caption>
Figure 1-11 9 point Arial m-uninstructed (left), instructed (right)

<P>
<BR>
<I>The TrueType interpreter</I>
<P>
This section describes the actions of the
TrueType interpreter. It is the interpreter, as the name suggests,
that &quot;interprets&quot; or carries out the instructions.  
<P>
More concretely, the interpreter processes a stream or sequence
of instructions. Typically these instructions take their arguments
from the interpreter stack and place their results on that stack.
The only exceptions are a small number of instructions that are
used to push data onto the interpreter stack. These instructions
take their arguments from the instruction stream.
<P>
All of the interpreter's actions are carried on in the context
of the Graphics State, a set of variables whose values guide the
actions of the interpreter and determine the exact effect of a
particular instruction. 
<P>
The interpreter's actions can be summarized as follows:
<P>
<OL>
<LI>The interpreter fetches an instruction
from the instruction stream, an ordered sequence of instruction
opcodes and data. Opcodes are 1-byte in size. Data can consist
of a single byte or two bytes (a word).  If an instruction takes
words from the instruction stream it will create those words by
putting together two bytes. The high byte appears first in the
instruction stream and the low byte appears second. 
<P> 
The following instruction stream is depicted as it will be
shown in the examples that follow.  Note that the pointer indicates
the next instruction to be executed.
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=440> <TR><TD align=center>
<IMG  WIDTH=173 HEIGHT=293 ALT="DIAGRAM" SRC="IMG00308.GIF"></TD></TR>
</TABLE>
<P>
<LI>The instruction is executed  
<P>
<UL>
<LI>If it is a push instruction it will
take its arguments from the instruction stream. 
<LI>Any other instruction will pop any data it needs from the stack.
A pop is illustrated below.
<P>
<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=400> <TR><TD align=center>
  <IMG  WIDTH=124 HEIGHT=76 ALT="DIAGRAM" SRC="IMG00309.GIF"></TD></TR>
</TABLE>

<P>
<LI>Any data the instruction produces is pushed onto the interpreter stack. A push is illustrated below. 
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=400> <TR><TD align=center>
  <IMG  WIDTH=124 HEIGHT=82 ALT="DIAGRAM" SRC="IMG00310.GIF"></TD></TR>
</TABLE>
 
<P>
As the previous discussion indicates,
the interpreter stack is a LIFO or last in first out data structure.
An instruction takes any data it needs from the last item placed
on the stack. The action of removing the top item from the stack
is commonly termed a <I>pop</I>. When an instruction produces
some result it <I>pushes</I> that result to the top of the stack
where it is potential input to the next instruction. 
<P>
The instruction set includes a full range of operators for manipulating
the stack including operators for pushing items onto the stack,
popping items from the stack, clearing the stack, duplicating
stack elements and so forth. 
<P>
<LI>The effect of execution depends on the values of the variables
that make up the Graphics State. 
<P>
<LI>The instruction may modify one or more Graphics State variables.
In the illustration shown, the Graphics State variable rp0 is
updated using a value taken from the interpreter stack.
</UL>
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=420> <TR><TD align=center>
<IMG  WIDTH=372 HEIGHT=86 ALT="DIAGRAM" SRC="IMG00311.GIF"></TD></TR>
</TABLE>
<P>
<LI>The process is repeated until there
are no further instructions to be executed. 
</OL>

<P><BR><I>Using instructions</I>
<P>
 Instructions can appear in a number of places
in the font file tables that make up a TrueType font. They can
appear as part of the Font Program, the CVT Program, or as glyph
data. Instructions appearing in the first two apply to the font
as a whole. Those found in glyph data ('glyf') apply to individual
glyphs within a font. 

<P><BR>
<I>The Font Program</I>
<P>
 The Font Program consists of a set of instructions
that is executed once, the first time a font is accessed by an
application. It is used to create function definitions (FDEFs)
and instruction definitions (IDEFs). Functions and instructions
defined in the Font Program can be used elsewhere in the font
file. 

<P><BR>
<I>The CVT Program</I>
<P>
 The CVT Program is a sequence of TrueType
instructions executed every time the point size or transformation
change. It is used to make font wide changes rather than to manage
individual glyphs. The CVT Program is used to establish the values
in the Control Value Table.  
<P>
The  purpose of the Control Value Table or CVT is to simplify
the task of maintaining consistency when instructing a font. It
is a numbered list of values that can be referenced by either
of two indirect instructions (MIRP and MIAP). CVT entries can
be used to store values that need to be the same across a number
of glyphs in a font. For example an instruction might refer to
a CVT entry whose purpose is to regularize stem weights across
a font. 
<P> 
<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Entry #</TD>
<TD CLASS=tab WIDTH=20% BGCOLOR="#C0C0C0">Value</TD>
<TD CLASS=tab WIDTH=60% BGCOLOR="#C0C0C0">Description</TD>
</TR>
<TR>
<TD CLASS=tab VALIGN=TOP>0</TD>
<TD CLASS=tab VALIGN=TOP>0</TD>
<TD CLASS=tab VALIGN=TOP>upper and lower case flat base(base line)</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>1</TD>
<TD CLASS=tab VALIGN=TOP>-39</TD>
<TD CLASS=tab VALIGN=TOP>upper case round base</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>2</TD>
<TD CLASS=tab VALIGN=TOP>-35</TD>
<TD CLASS=tab VALIGN=TOP>lower case round base</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>3</TD>
<TD CLASS=tab VALIGN=TOP>-33</TD>
<TD CLASS=tab VALIGN=TOP>figure round base</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>4</TD>
<TD CLASS=tab VALIGN=TOP>1082</TD>
<TD CLASS=tab VALIGN=TOP>x-height flat</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>5</TD>
<TD CLASS=tab VALIGN=TOP>1114</TD>
<TD CLASS=tab VALIGN=TOP>x-height round overlap</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>6</TD>
<TD CLASS=tab VALIGN=TOP>1493</TD>
<TD CLASS=tab VALIGN=TOP>flat cap</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>7</TD>
<TD CLASS=tab VALIGN=TOP>1522</TD>
<TD CLASS=tab VALIGN=TOP>round cap</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>8</TD>
<TD CLASS=tab VALIGN=TOP>1463</TD>
<TD CLASS=tab VALIGN=TOP>numbers flat</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>9</TD>
<TD CLASS=tab VALIGN=TOP>1491</TD>
<TD CLASS=tab VALIGN=TOP>numbers round top</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>10</TD>
<TD CLASS=tab VALIGN=TOP>1493</TD>
<TD CLASS=tab VALIGN=TOP>flat ascender</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>11</TD>
<TD CLASS=tab VALIGN=TOP>1514</TD>
<TD CLASS=tab VALIGN=TOP>round ascender</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>12</TD>
<TD CLASS=tab VALIGN=TOP>157</TD>
<TD CLASS=tab VALIGN=TOP>x stem weight</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>13</TD>
<TD CLASS=tab VALIGN=TOP>127</TD>
<TD CLASS=tab VALIGN=TOP>y stem weight</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>14</TD>
<TD CLASS=tab VALIGN=TOP>57</TD>
<TD CLASS=tab VALIGN=TOP>serif</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>15</TD>
<TD CLASS=tab VALIGN=TOP>83</TD>
<TD CLASS=tab VALIGN=TOP>space between the dot and the I</TD></TR>
</TABLE>
<P CLASS=caption>Figure 1-12  Some sample CVT entries<P>

<P>
Instructions that refer to values in the CVT
are called indirect instructions as opposed to the direct instructions
which take their values from the glyph outline. 
<P>
As part of the TrueType font file, the values
in the CVT are expressed in FUnits. When the outlines are converted
from FUnits to pixel units, values in the CVT are also converted. 
<P>
When writing to the CVT you may use a value that is in the glyph
coordinate system (using WCVTP) or you can use a value that is
in the original FUnits (using WCVTF). The interpreter will scale
all values appropriately. Values read from the CVT are always
in pixels (F26Dot6).
 
<P><BR>
<I>The Storage Area</I>
<P>
 The interpreter also maintains a Storage Area
consisting of a portion of memory that can be used for temporary
storage of data from the interpreter stack. Instructions exist
that make it possible to read the values of stored data and to
write new values to storage. Storage locations range from 0 to
n-1 where n is the value established in the maxStorage entry in
the maxProfile table of the font file. Values are 32 bit numbers
<P>
 
<TABLE WIDTH=230 BGCOLOR="#F0F0F0">
<TR>
<TD CLASS=tab WIDTH=40% BGCOLOR="#C0C0C0">Address</TD>
<TD CLASS=tab WIDTH=60% BGCOLOR="#C0C0C0">Value</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>0</TD>
<TD CLASS=tab VALIGN=TOP>343</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>1</TD>
<TD CLASS=tab VALIGN=TOP>241</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>2</TD>
<TD CLASS=tab VALIGN=TOP>-27</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>3</TD>
<TD CLASS=tab VALIGN=TOP>4654</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>4</TD>
<TD CLASS=tab VALIGN=TOP>125</TD></TR>
<TR>
<TD CLASS=tab VALIGN=TOP>5</TD>
<TD CLASS=tab VALIGN=TOP>11</TD></TR>
</TABLE>
<P CLASS=caption>Figure 1-13 Some storage area entries

<P><BR>
<I>The Graphics State</I>
<P>
The Graphics State consists of a table of variables and their
values. All instructions act within the context of the Graphics
State. Graphics State variables have default values as specified
in Appendix B, &quot;Graphics State Summary&quot;. Their values
can be determined or changed using instructions. 
<P>
The Graphics State establishes the context within which all glyphs
are interpreted. All Graphics State variables have a default value.
Some of these values can be changed in the CVT Program if desired.
Whatever the default value, it will be reestablished at the start
of interpretation of any glyph. In other words, the Graphics State
has no inter-glyph memory. Changing the value of a Graphics State
variable while processing an individual glyph will result in a
change that remains in effect only for that glyph. 

<P><BR>
<B>The scan converter</B>
<P>
The TrueType scan converter takes an outline
description of a glyph and produces a bitmap image for that glyph.
<P>
The TrueType scan converter offers two modes. In the first mode,
the scan converter uses a simple algorithm for determining which
pixels are part of that glyph. The rules can be stated as follows:

<DL>
<DT>Rule 1 
<DD><I>If a pixel's center falls within the glyph outline, that
pixel is turned on and becomes part of that glyph. </I>
<DT>Rule 2 
<DD><I>If a contour falls exactly on a pixel's center, that pixel
is turned on.</I>
</DL>
<P>
 A point is considered to be an interior point
of a glyph if it has a non-zero winding number. The winding number
is itself determined by drawing a ray from the point in question
toward infinity. (The direction in which the ray points in unimportant.)
Starting with a count of zero, we subtract one each time a glyph
contour crosses the ray from right to left or bottom to top. Such
a crossing is termed an on transition. We add one each time a
contour of the glyph crossed the ray from left to right or top
to bottom. Such a crossing is termed an off transition. If the
final count is non-zero, the point is an interior point.  
<P>
The direction of a contour can be determined by looking at the
point numbers. The direction is always from lower point number
toward higher point number. 
<P>
The illustration that follows demonstrates the use of winding
numbers in determining whether a point is inside a glyph. The
point p1 undergoes a sequence of four transitions (<I>on </I>transition,<I>
off </I>transition, <I>on </I>transition, <I>off </I>transition).
Since the sequence is even, the winding number is zero and the
point is not inside the glyph. The second point, p2, undergoes
an <I>off </I>transition followed by an <I>on </I>transition followed
by an <I>off </I>transition yielding a winding number of +1. The
point is in the interior of the glyph.  
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460> <TR><TD align=center>
<IMG  WIDTH=255 HEIGHT=217 ALT="DIAGRAM" SRC="IMG00312.GIF"></TD></TR>
</TABLE>
<P CLASS=caption>Figure 1-14 Determining the winding number of a point

<P><BR>
<I> What is a dropout?</I>
<P>
 A dropout occurs whenever there is a connected
region of a glyph interior that contains two black pixels that
cannot be connected by a straight line that only passes through
black pixels. 
<P>

<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0 width=460> <TR><TD align=center>
<IMG  WIDTH=268 HEIGHT=320 ALT="DIAGRAM" SRC="IMG00313.GIF"></TD></TR>
</TABLE>
<P CLASS=caption>Figure 1-15 The letter m with two dropouts 


<P><BR>
<I>Preventing dropouts</I>
<P>
The TrueType instructions are designed to
allow you to gridfit a glyph so that the desired pixels will be
turned on by the simple scan converter regardless of the point
size or the transformation used. It may prove difficult to foresee
all possible transformations that a glyph might undergo. It is
therefore difficult to instruct a glyph to ensure that the proper
grid-fitting distortion of the outline will take place for every
desired transformation. This problem is especially difficult for
very small numbers of pixels per em and for complex typefaces.
In these situations, some renditions of a glyph may contain dropouts. 
<P>
 It is possible to test for potential dropouts
by looking at an imaginary line segment connecting two adjacent
pixel centers. If this line segment is intersected by both an
on-Transition contour and an off-Transition contour, a potential
dropout condition exists. The potential dropout only becomes an
actual dropout if the two contour lines continue on in both directions
to cut other line segments between adjacent pixel centers. If
the two contours join together immediately after crossing a scan
line (forming a stub), a dropout does not occur, although a stem
of the glyph may become shorter than desired. 
<P>
To prevent dropouts, type manufacturers can choose to have the
scan converter use two additional rules:
<DL>
<DT> Rule 3 
<DD> <I>If a scan line between two adjacent pixel centers (either
vertical or horizontal)  is intersected by both an on-Transition
contour and an off-Transition contour and neither of the pixels
was already turned on by rules 1 and 2, turn on the left-most
pixel (horizontal scan line) or the bottom-most pixel (vertical
scan line) </I>
<DT>Rule 4
<DD> <I>Apply Rule 3 only if the two contours continue to intersect
other scan lines in both directions. That is do not turn on pixels
for 'stubs'. The scanline segments that form a square with the
intersected scan line segment are examined to verify that they
are intersected by two contours.  It is possible that these could
be different contours than the ones intersecting the dropout scan
line segment.  This is very unlikely but may have to be controlled
with grid-fitting in some exotic glyphs.</I>
</DL>
<P>
 The type manufacturer can choose to use the
simple scan converter employing rules 1 and 2 only or may optionally
invoke either rule 3 or rule 4. The decision about which scan
converter to use can be made on a font wide basis or a different
choice can be specified for each glyph. The selection made in
the preProgram will be the default for the entire font. A change
made to the default in the instructions for an individual glyph
will apply only to that glyph. 

<FONT FACE="Verdana, Arial, Helvetica" SIZE=1><P CLASS=detail><BR><BR>
	this page was last updated 16 November 1997<BR>
	&copy; 1997 Microsoft Corporation. All rights reserved. <A HREF="http://www.microsoft.com/Misc/cpyright.htm">Terms of use</A>.<BR>
	comments to the MST group: 
	<A HREF="/typography/about.htm">how to contact us</A>.
	<P>&nbsp;
</FONT>
</TD>
<TD WIDTH=20></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD COLSPAN=2 WIDTH=540></TD>
<TD WIDTH=20></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=10><IMG SRC="midrule.gif" WIDTH=580 HEIGHT=10 ALT=""></TD>
</TR>

<TR>
<TD WIDTH=20></TD>
<TD WIDTH=560 COLSPAN=3 VALIGN=TOP><FONT FACE="Verdana, Arial, Helvetica" SIZE=1 CLASS=detail>
	<A HREF="http://www.microsoft.com/typography/default.asp">Microsoft Typography</A>
	 | <A HREF="http://www.microsoft.com/typography/creators.htm">Developer...</A>
	 | <A HREF="default.htm">OpenType specification</A>
	 | TrueType fundamentals
</FONT></TD>
</TR>

<TR>
<TD COLSPAN=4 WIDTH=580 HEIGHT=20><IMG SRC="baserule.gif" WIDTH=580 HEIGHT=20></TD>
</TR>
</TABLE>

</CENTER>
</BODY>
</HTML>
