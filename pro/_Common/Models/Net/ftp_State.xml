<?xml version="1.0" encoding="utf-8"?>
<!--
PEACH PIT COPYRIGHT NOTICE AND LEGAL DISCLAIMER

COPYRIGHT
Copyright © 2011-2014 2014 Déjà vu Security, LLC.
All rights reserved.

Déjà vu Security is the sole proprietary owner of Peach Pits and related
definition files and documentation.

User may only use, copy, or modify Peach Pits and related definition files and
documentation for internal business purposes only, provided that this entire
notice and following disclaimer appear in all copies or modifications, and
subject to the following conditions:

(1) User maintains a current subscription to the Peach Pit library.
(2) User's use is restricted to commercially licensed version of Peach Fuzzer
    only. Running Peach Pits with the Peach Fuzzer Community edition or any
    other solution is strictly prohibited.
(3) The sale, transfer, or distribution of Peach Pits and related definition
    files and documentation, in any form, is not permitted, without Déjà vu
    Security's express permission.

Legal Disclaimer
PEACH PITS AND RELATED DEFINTIION FILES AND DOCUMENTATION ARE PROVIDED "AS IS",
DÉJÀ VU SECURITY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT
NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE. DÉJÀ VU SECURITY HAS NO OBLIGATION TO PROVIDE MAINTENANCE,
SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

IN NO EVENT SHALL DÉJÀ VU SECURITY BE LIABLE TO ANY PARTY FOR ANY DIRECT,
INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES (INCLUDING LOSS OF USE,
DATA, OR PROFITS), ARISING OUT OF ANY USE OF PEACH PITS AND RELATED
DOCUMENTATION, EVEN IF DÉJÀ VU SECURITY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
-->
<Peach xmlns="http://peachfuzzer.com/2012/Peach"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://peachfuzzer.com/2012/Peach peach.xsd"  
       author="Deja Vu Security, LLC"
 description="File Transfer Protocol PIT StateModels" version="0.0.2">

  <Include ns="FTP" src="file:##PitLibraryPath##/_Common/Models/Net/ftp_Data.xml"/>

  <!-- FTP Passive Mode-->
  <StateModel name="ClientPassive" initialState="InputUserName">
    <State name="InputUserName">
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerReadyForUser" />
      </Action>
      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:USER" />
      </Action>
      <Action type="changeState" ref="InputPasswd"/>
    </State>

    <State name="InputPasswd">
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerUserNeedsPass" />
      </Action>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:PASS" />
      </Action>

      <Action type="changeState" ref="TestConnection"/>
    </State>

    <State name="TestConnection">
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerLoggedIn" />
      </Action>

      <!-- finish consuming ServerLoggedIn if need be, see ftp_Data comment -->
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerLoggedInHeaderMessage" />
      </Action>

      <Action type="changeState" ref="EnterPassiveMode"/>
    </State>

    <State name="EnterPassiveMode">
      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:PasvRequest" />
      </Action>

      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:PassiveResponse"/>
      </Action>

      <Action type="changeState" ref="ListDir" onStart="setattr(self.parent.parent.parent.tests['Passive'].publishers[1],'Port',int(('0x'+''.join([hex(int(x)).split('0x')[1] for x in str(self.parent.parent.states['EnterPassiveMode'].actions[1].dataModel.find('Argument').DefaultValue).split(',')[4:]])),16))"/>
    </State>

    <State name="ListDir">
      <Action type="open" publisher="DataPublisher"/>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:LIST" />
      </Action>

      <Action type="input" publisher="DataPublisher">
        <DataModel ref="FTP:FTPDataCatch"/>
      </Action>

      <Action type="changeState" ref="MakeDir"/>
    </State>

    <State name="MakeDir">
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ResponseTemplate" />
      </Action>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:MKD" />
      </Action>

      <Action type="changeState" ref="DelDir"/>
    </State>

    <State name="DelDir">
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ResponseTemplate" />
      </Action>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:RMD" />
      </Action>

      <Action type="changeState" ref="Close"/>
    </State>

    <State name="Close">
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ResponseTemplate" />
      </Action>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:QUIT" />
      </Action>

      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ResponseTemplate" />
      </Action>
    </State>
  </StateModel>

  <!-- FTP Active Mode-->
  <StateModel name="ClientActive" initialState="InputUserName">
    <State name="InputUserName">
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerReadyForUser" />
      </Action>
      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:USER" />
      </Action>
      <Action type="changeState" ref="InputPasswd"/>
    </State>

    <State name="InputPasswd">
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerUserNeedsPass" />
      </Action>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:PASS" />
      </Action>

      <Action type="changeState" ref="TestConnection"/>
    </State>

    <State name="TestConnection">
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerLoggedIn" />
      </Action>

      <Action name="SystemType" type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:SYST"/>
      </Action>

      <Action name="SystemTypeResponse" type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ResponseTemplate"/>
      </Action>

      <Action type="changeState" ref="EnterActiveMode"/>
    </State>

    <State name="EnterActiveMode">

      <Action name="Port" type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:PortRequest" />
      </Action>

      <Action name="SystemTypeResponse" type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ResponseTemplate"/>
      </Action>

      <Action type="changeState" ref="ListDir"/>
    </State>

    <State name="ListDir">
      <Action type="open" publisher="DataListner"/>

      <Action name="List" type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:LIST" />
      </Action>

      <Action type="accept" publisher="DataListner"/>

      <Action name="ListResponse" type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ResponseTemplate"/>
      </Action>

      <Action name="DirectoryList" type="input" publisher="DataListner">
        <DataModel ref="FTP:FTPDataCatch"/>
      </Action>

      <Action name="TransferComplete" type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ResponseTemplate"/>
      </Action>

      <Action type="changeState" ref="MakeDir"/>
    </State>

    <State name="MakeDir">
      <Action name="MakeDir" type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:MKD" />
      </Action>

      <Action name="DirResponse" type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ResponseTemplate" />
      </Action>

      <Action type="changeState" ref="DelDir"/>
    </State>

    <State name="DelDir">
      <Action name="RemoveDir" type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:RMD" />
      </Action>

      <Action name="RemoveDirResponse" type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ResponseTemplate" />
      </Action>

      <Action type="changeState" ref="Close"/>
    </State>

    <State name="Close">
      <Action name="Quit" type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:QUIT" />
      </Action>

      <Action name="Goodbye" type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:ResponseTemplate" />
      </Action>
    </State>
  </StateModel>

  <!-- ################### Begin Active Mode Server State Model ################### -->
  <StateModel name="ServerActive" initialState="StartServer">
    <State name="StartServer">
      <Action type="open" publisher="CommandPublisher"/>
      <Action type="call" method="launchProgram" publisher="Peach.Agent"/>
      <Action type="accept" publisher="CommandPublisher"/>
      <Action name="Next" type="changeState" ref="PreAuth"/>
    </State>

    <State name="PreAuth">
      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerReadyForUser"/>
        <Data>
          <Field name="LineModes.OneLine.Explaination" value="Peach 3.0"/>
        </Data>
      </Action>

      <Action name="Read" type="input" publisher="CommandPublisher">
        <DataModel name="PreauthCommand">
          <Choice name="Command">
            <Block name="SYST" ref="FTP:SYST"/>
            <Block name="USER" ref="FTP:USER"/>
          </Choice>
        </DataModel>
      </Action>

      <Action  name="SYST" type="output" publisher="CommandPublisher" when="str(State.actions[1].dataModel.find('Command')) == 'SYST'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="215"/>
          <Field name="LineModes.OneLine.Explaination" value="UNIX Type: L8"/>
        </Data>
      </Action>

      <!-- Add PORT command here-->

      <Action type="changeState" ref="PreAuth" when="State.actions[1].dataModel.find('Command').SelectedElement.name == 'SYST'"/>

      <Action type="changeState" ref="InputPasswd" when="State.actions[1].dataModel.find('Command').SelectedElement.name == 'USER'"/>
    </State>

    <State name="InputPasswd">
      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerUserNeedsPass"/>
        <Data>
          <Field name="LineModes.OneLine.Explaination" value="Please specify the password"/>
        </Data>
      </Action>
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:PASS"/>
      </Action>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerLoggedIn"/>
      </Action>

      <Action type="changeState" ref="Ready"/>
    </State>

    <State name="Ready">
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:Request"/>
      </Action>

      <Action name="Done" type="changeState" ref="Done" when="StateModel.states['Ready'].actions[0].dataModel.find('EmptyPacket') != None"/>

      <Action  name="UNSU" type="output" publisher="CommandPublisher" when="StateModel.states['Ready'].actions[0].dataModel.find('Unsupported') != None">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="202"/>
          <Field name="LineModes.OneLine.Explaination" value="Command not implemented, superfluous at this site"/>
        </Data>
      </Action>

       <Action name="Unsupported" type="changeState" ref="Ready" when="StateModel.states['Ready'].actions[0].dataModel.find('Unsupported') != None"/>

      <!-- Begin command checks -->
      <Action  name="Noop" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'NOOP'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="200"/>
          <Field name="LineModes.OneLine.Explaination" value="NOOP ok."/>
        </Data>
      </Action>

      <Action  name="ACCT" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'ACCT'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="230"/>
          <Field name="LineModes.OneLine.Explaination" value="User logged in, proceed."/>
        </Data>
      </Action>

      <Action  name="ALLO" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'ALLO'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="200"/>
          <Field name="LineModes.OneLine.Explaination" value="ALLO ok"/>
        </Data>
      </Action>

      <Action  name="ABOR" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'ABOR'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="226"/>
          <Field name="LineModes.OneLine.Explaination" value="Closing data connection"/>
        </Data>
      </Action>

      <Action  name="MKD" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'MKD' or str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'XMKD'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="257"/>
          <Field name="LineModes.OneLine.Explaination" value="/home/peach/foobarbaz"/>
        </Data>
      </Action>

      <Action  name="RMD" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'RMD' or str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'XRMD'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="250"/>
          <Field name="LineModes.OneLine.Explaination" value="Remove directory operation successful."/>
        </Data>
      </Action>

      <Action  name="QUIT" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'QUIT'">
      	<DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="221"/>
          <Field name="LineModes.OneLine.Explaination" value="Goodbye."/>
        </Data>
      </Action>

      <Action  name="NLST" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'NLST'">
      	<DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="150"/>
          <Field name="LineModes.OneLine.Explaination" value="Here comes the directory listing."/>
        </Data>
      </Action>

      <Action  name="PWD" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'PWD' or str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'XPWD'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="257"/>
          <Field name="LineModes.OneLine.Explaination" value="/home/peach"/>
        </Data>
      </Action>

      <Action  name="RNFR" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'RNFR'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="350"/>
          <Field name="LineModes.OneLine.Explaination" value="Ready for RNTO"/>
        </Data>
      </Action>

      <Action  name="RNTO" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'RNTO'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="250"/>
          <Field name="LineModes.OneLine.Explaination" value="Rename successful"/>
        </Data>
      </Action>

      <Action  name="DELE" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'DELE'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="250"/>
          <Field name="LineModes.OneLine.Explaination" value="Delete operation successful."/>
        </Data>
      </Action>


      <Action  name="RETR" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'RETR'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="150"/>
          <Field name="LineModes.OneLine.Explaination" value="Opening BINARY mode data connection for file"/>
        </Data>
      </Action>

      <Action  name="STOR" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'STOR'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="150"/>
          <Field name="LineModes.OneLine.Explaination" value="ok to send data."/>
        </Data>
      </Action>

      <Action  name="PORT" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'PORT'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="200"/>
          <Field name="LineModes.OneLine.Explaination" value="PORT command secuessful"/>
        </Data>
      </Action>

      <!-- Change state to PortConnect-->
      <Action  name="ActiveMode" type="changeState" ref="PortConnect" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'PORT'" onStart="setattr(self.parent.parent.parent.tests['Server'].publishers[1],'Port',int(('0x'+''.join([hex(int(x)).split('0x')[1] for x in str(self.parent.parent.states['Ready'].actions[0].dataModel.find('Argument').DefaultValue).split(',')[4:]])),16))"/>

      <Action  name="TYPE" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'TYPE'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="200"/>
          <Field name="LineModes.OneLine.Explaination" value="Switching Modes"/>
        </Data>
      </Action>

      <Action  name="LIST" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'LIST'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="150"/>
          <Field name="LineModes.OneLine.Explaination" value="Here comes the directory listing"/>
        </Data>
      </Action>

      <Action  name="SYST" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'SYST'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="215"/>
          <Field name="LineModes.OneLine.Explaination" value="UNIX Type: L8"/>
        </Data>
      </Action>

      <Action  name="STAT" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'STAT'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="211"/>
          <Field name="LineModes.OneLine.Explaination" value="a.ftp.server FTP server status:
          Version 6.00
          Connected to a.ftp.server
          Logged in anonymously
          TYPE: ASCII, FORM: Nonprint; STRUcture: File; transfer MODE: Stream
          No data connection"/>
        </Data>
      </Action>

      <Action  name="CDUP" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'CDUP' or str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'XCUP'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="250"/>
          <Field name="LineModes.OneLine.Explaination" value="Directory successfully changed"/>
        </Data>
      </Action>

      <Action  name="CWD" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'CWD' or str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'XCWD'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="250"/>
          <Field name="LineModes.OneLine.Explaination" value="Directory successfully changed"/>
        </Data>
      </Action>

      <Action  name="STRU" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'STRU'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="500"/>
          <Field name="LineModes.OneLine.Explaination" value="Only binary is supported"/>
        </Data>
      </Action>

      <Action  name="MODE" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'MODE'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="500"/>
          <Field name="LineModes.OneLine.Explaination" value="Only binary is supported"/>
        </Data>
      </Action>

      <Action  name="USER" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'USER'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="331"/>
          <Field name="LineModes.OneLine.Explaination" value="Any password will do."/>
        </Data>
      </Action>

      <Action  name="PASS" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'PASS'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="230"/>
          <Field name="LineModes.OneLine.Explaination" value="Login successful"/>
        </Data>
      </Action>

      <Action  name="HELP" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'HELP'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="200"/>
          <Field name="LineModes.OneLine.Explaination" value="Help menu"/>
        </Data>
      </Action>

      <Action  name="SITE" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'SITE'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="200"/>
          <Field name="LineModes.OneLine.Explaination" value="No special commands here"/>
        </Data>
      </Action>

      <Action  name="PASV" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'PASV'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="500"/>
          <Field name="LineModes.OneLine.Explaination" value="Passive mode not supported for this test"/>
        </Data>
      </Action>

      <!-- End command checks -->

      <!-- Begin sub paths -->
      <Action name="GetFile" type="changeState" ref="GetFile" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'STOR'"/>
      <Action name="AppenFile" type="changeState" ref="GetFile" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'APPE'"/>
      <Action name="STOUFile" type="changeState" ref="GetFile" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'STOU'"/>
      <Action name="SendFile" type="changeState" ref="SendFile" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'RETR'"/>
      <Action name="SendDirectory" type="changeState" ref="SendDirectory" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'NLST'"/>
      <Action name="ListDirectory" type="changeState" ref="ListDir" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'LIST'"/>
      <Action name="Relogin" type="changeState" ref="InputUserName" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'USER'"/>
      <Action name="Relogin2" type="changeState" ref="InputUserName" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'REIN'"/>
      <Action name="Quit" type="changeState" ref="Done" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'QUIT'"/>
      <!-- End sub paths-->

      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <!-- Establishes connection to Client ftp data port which was provided from a PORT command -->
    <State name="PortConnect">
      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <State name="GetFile">
      <Action type="input" publisher="DataPublisher">
        <DataModel ref="FTP:FileData"/>
      </Action>

      <Action type="close" publisher="DataPublisher"/>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerDirectorySendOk"/>
        <Data>
          <Field name="LineModes.OneLine.Explaination" value="Transfer complete."/>
        </Data>
      </Action>

      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <State name="ListDir">
      <Action type="output" publisher="DataPublisher">
        <DataModel ref="FTP:DirectoryList"/>
      </Action>

      <Action type="close" publisher="DataPublisher"/>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerDirectorySendOk"/>
        <Data>
          <Field name="LineModes.OneLine.Explaination" value="Directory send OK."/>
        </Data>
      </Action>

      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <State name="SendFile">
      <Action type="output" publisher="DataPublisher">
        <DataModel ref="FTP:FileData"/>
      </Action>

      <Action type="close" publisher="DataPublisher"/>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerDirectorySendOk"/>
        <Data>
          <Field name="LineModes.OneLine.Explaination" value="Transfer complete."/>
        </Data>
      </Action>

      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <State name="SendDirectory">
      <Action type="output" publisher="DataPublisher">
        <DataModel ref="FTP:DirectoryData"/>
      </Action>

      <Action type="close" publisher="DataPublisher"/>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerDirectorySendOk"/>
        <Data>
          <Field name="LineModes.OneLine.Explaination" value="Directory Send OK."/>
        </Data>
      </Action>

      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <State name="Done">
      <Action type="call" method="exitProgram" publisher="Peach.Agent"/>
    </State>
  </StateModel>

  <!-- ################### Begin Passive Mode Server State Model ################### -->
  <StateModel name="ServerPassive" initialState="StartServer">
    <State name="StartServer">
      <Action type="open" publisher="CommandPublisher"/>
      <Action type="call" method="launchProgram" publisher="Peach.Agent"/>
      <Action type="accept" publisher="CommandPublisher"/>
      <Action name="Next" type="changeState" ref="PreAuth"/>
    </State>

    <State name="PreAuth">
      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerReadyForUser"/>
        <Data>
          <Field name="LineModes.OneLine.Explaination" value="Peach 3.0"/>
        </Data>
      </Action>

      <Action name="Read" type="input" publisher="CommandPublisher">
        <DataModel name="PreauthCommand">
          <Choice name="Command">
            <Block name="SYST" ref="FTP:SYST"/>
            <Block name="USER" ref="FTP:USER"/>
          </Choice>
        </DataModel>
      </Action>

      <Action  name="SYST" type="output" publisher="CommandPublisher" when="str(State.actions[1].dataModel.find('Command')) == 'SYST'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="215"/>
          <Field name="LineModes.OneLine.Explaination" value="UNIX Type: L8"/>
        </Data>
      </Action>

      <!-- Add PORT command here-->

      <Action type="changeState" ref="PreAuth" when="State.actions[1].dataModel.find('Command').SelectedElement.name == 'SYST'"/>

      <Action type="changeState" ref="InputPasswd" when="State.actions[1].dataModel.find('Command').SelectedElement.name == 'USER'"/>
    </State>

    <State name="InputPasswd">
      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerUserNeedsPass"/>
        <Data>
          <Field name="LineModes.OneLine.Explaination" value="Please specify the password"/>
        </Data>
      </Action>
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:PASS"/>
      </Action>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerLoggedIn"/>
      </Action>

      <Action type="changeState" ref="Ready"/>
    </State>

    <State name="Ready">
      <Action type="input" publisher="CommandPublisher">
        <DataModel ref="FTP:Request"/>
      </Action>

      <Action name="Done" type="changeState" ref="Done" when="StateModel.states['Ready'].actions[0].dataModel.find('EmptyPacket') != None"/>

      <Action  name="UNSU" type="output" publisher="CommandPublisher" when="StateModel.states['Ready'].actions[0].dataModel.find('Unsupported') != None">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="202"/>
          <Field name="LineModes.OneLine.Explaination" value="Command not implemented, superfluous at this site"/>
        </Data>
      </Action>

       <Action name="Unsupported" type="changeState" ref="Ready" when="StateModel.states['Ready'].actions[0].dataModel.find('Unsupported') != None"/>

      <!-- Begin command checks -->
      <Action  name="Noop" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'NOOP'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="200"/>
          <Field name="LineModes.OneLine.Explaination" value="NOOP ok."/>
        </Data>
      </Action>

      <Action  name="ACCT" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'ACCT'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="230"/>
          <Field name="LineModes.OneLine.Explaination" value="User logged in, proceed."/>
        </Data>
      </Action>

      <Action  name="ALLO" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'ALLO'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="200"/>
          <Field name="LineModes.OneLine.Explaination" value="ALLO ok"/>
        </Data>
      </Action>

      <Action  name="ABOR" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'ABOR'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="226"/>
          <Field name="LineModes.OneLine.Explaination" value="Closing data connection"/>
        </Data>
      </Action>

      <Action  name="MKD" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'MKD' or str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'XMKD'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="257"/>
          <Field name="LineModes.OneLine.Explaination" value="/home/peach/foobarbaz"/>
        </Data>
      </Action>

      <Action  name="RMD" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'RMD' or str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'XRMD'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="250"/>
          <Field name="LineModes.OneLine.Explaination" value="Remove directory operation successful."/>
        </Data>
      </Action>

      <Action  name="QUIT" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'QUIT'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="221"/>
          <Field name="LineModes.OneLine.Explaination" value="Goodbye."/>
        </Data>
      </Action>

      <Action  name="NLST" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'NLST'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="150"/>
          <Field name="LineModes.OneLine.Explaination" value="Here comes the directory listing."/>
        </Data>
      </Action>

      <Action  name="PWD" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'PWD' or str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'XPWD'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="257"/>
          <Field name="LineModes.OneLine.Explaination" value="/home/peach"/>
        </Data>
      </Action>

      <Action  name="RNFR" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'RNFR'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="350"/>
          <Field name="LineModes.OneLine.Explaination" value="Ready for RNTO"/>
        </Data>
      </Action>

      <Action  name="RNTO" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'RNTO'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="250"/>
          <Field name="LineModes.OneLine.Explaination" value="Rename successful"/>
        </Data>
      </Action>

      <Action  name="DELE" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'DELE'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="250"/>
          <Field name="LineModes.OneLine.Explaination" value="Delete operation successful."/>
        </Data>
      </Action>


      <Action  name="RETR" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'RETR'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="150"/>
          <Field name="LineModes.OneLine.Explaination" value="Opening BINARY mode data connection for file"/>
        </Data>
      </Action>

      <Action  name="STOR" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'STOR'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="150"/>
          <Field name="LineModes.OneLine.Explaination" value="ok to send data."/>
        </Data>
      </Action>

      <Action  name="PORT" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'PORT'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="500"/>
          <Field name="LineModes.OneLine.Explaination" value="PORT command no supported via this test"/>
        </Data>
      </Action>

      <Action  name="TYPE" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'TYPE'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="200"/>
          <Field name="LineModes.OneLine.Explaination" value="Switching Modes"/>
        </Data>
      </Action>

      <Action  name="LIST" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'LIST'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="150"/>
          <Field name="LineModes.OneLine.Explaination" value="Here comes the directory listing"/>
        </Data>
      </Action>

      <Action  name="SYST" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'SYST'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="215"/>
          <Field name="LineModes.OneLine.Explaination" value="UNIX Type: L8"/>
        </Data>
      </Action>

      <Action  name="STAT" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'STAT'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="211"/>
          <Field name="LineModes.OneLine.Explaination" value="a.ftp.server FTP server status:
          Version 6.00
          Connected to a.ftp.server
          Logged in anonymously
          TYPE: ASCII, FORM: Nonprint; STRUcture: File; transfer MODE: Stream
          No data connection"/>
        </Data>
      </Action>

      <Action  name="CDUP" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'CDUP' or str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'XCUP'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="250"/>
          <Field name="LineModes.OneLine.Explaination" value="Directory successfully changed"/>
        </Data>
      </Action>

      <Action  name="STRU" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'STRU'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="500"/>
          <Field name="LineModes.OneLine.Explaination" value="Only binary is supported"/>
        </Data>
      </Action>

      <Action  name="MODE" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'MODE'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="500"/>
          <Field name="LineModes.OneLine.Explaination" value="Only binary is supported"/>
        </Data>
      </Action>

      <Action  name="CWD" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'CWD' or str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'XCWD'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="250"/>
          <Field name="LineModes.OneLine.Explaination" value="Directory successfully changed"/>
        </Data>
      </Action>

      <Action  name="USER" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'USER'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="331"/>
          <Field name="LineModes.OneLine.Explaination" value="Any password will do."/>
        </Data>
      </Action>

      <Action  name="PASS" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'PASS'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="230"/>
          <Field name="LineModes.OneLine.Explaination" value="Login successful"/>
        </Data>
      </Action>

      <Action  name="HELP" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'HELP'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="200"/>
          <Field name="LineModes.OneLine.Explaination" value="Help menu"/>
        </Data>
      </Action>

      <Action  name="SITE" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'SITE'">
        <DataModel ref="FTP:ResponseTemplate"/>
        <Data>
          <Field name="Status" value="200"/>
          <Field name="LineModes.OneLine.Explaination" value="No special commands here"/>
        </Data>
      </Action>

      <!-- Change state to PassiveAccept -->
      <Action  name="PasiveMode" type="changeState" ref="PassiveAccept" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'PASV'"/>

      <!-- End command checks -->

      <!-- Begin sub paths -->
      <Action name="GetFile" type="changeState" ref="GetFile" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'STOR'"/>
      <Action name="AppenFile" type="changeState" ref="GetFile" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'APPE'"/>
      <Action name="STOUFile" type="changeState" ref="GetFile" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'STOU'"/>
      <Action name="SendFile" type="changeState" ref="SendFile" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'RETR'"/>
      <Action name="SendDirectory" type="changeState" ref="SendDirectory" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'NLST'"/>
      <Action name="ListDirectory" type="changeState" ref="ListDir" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'LIST'"/>
      <Action name="Relogin" type="changeState" ref="InputUserName" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'USER'"/>
      <Action name="Relogin2" type="changeState" ref="InputUserName" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'REIN'"/>
      <Action name="Quit" type="changeState" ref="Done" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'QUIT'"/>
      <!-- End sub paths-->

      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <!-- Establishes connection to Client ftp data port which was provided from a PORT command -->
    <State name="PortConnect">
      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <!-- Accepts a connection on the port sent back from Peach -->
    <State name="PassiveAccept">
      <Action type="open" publisher="DataPublisher"/>

      <Action  name="PASV" type="output" publisher="CommandPublisher" when="str(StateModel.states['Ready'].actions[0].dataModel.find('Command').DefaultValue) == 'PASV'">
        <DataModel ref="FTP:PassiveResponse"/>
      </Action>

      <Action type="accept" publisher="DataPublisher"/>

      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <State name="GetFile">
      <Action type="input" publisher="DataPublisher">
        <DataModel ref="FTP:FileData"/>
      </Action>

      <Action type="close" publisher="DataPublisher"/>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerDirectorySendOk"/>
        <Data>
          <Field name="LineModes.OneLine.Explaination" value="Transfer complete."/>
        </Data>
      </Action>

      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <State name="ListDir">
      <Action type="output" publisher="DataPublisher">
        <DataModel ref="FTP:DirectoryList"/>
      </Action>

      <Action type="close" publisher="DataPublisher"/>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerDirectorySendOk"/>
        <Data>
          <Field name="LineModes.OneLine.Explaination" value="Directory send OK."/>
        </Data>
      </Action>

      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <State name="SendFile">
      <Action type="output" publisher="DataPublisher">
        <DataModel ref="FTP:FileData"/>
      </Action>

      <Action type="close" publisher="DataPublisher"/>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerDirectorySendOk"/>
        <Data>
          <Field name="LineModes.OneLine.Explaination" value="Transfer complete."/>
        </Data>
      </Action>

      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <State name="SendDirectory">
      <Action type="output" publisher="DataPublisher">
        <DataModel ref="FTP:DirectoryData"/>
      </Action>

      <Action type="close" publisher="DataPublisher"/>

      <Action type="output" publisher="CommandPublisher">
        <DataModel ref="FTP:ServerDirectorySendOk"/>
        <Data>
          <Field name="LineModes.OneLine.Explaination" value="Directory Send OK."/>
        </Data>
      </Action>

      <Action name="ReadNext" type="changeState" ref="Ready"/>
    </State>

    <State name="Done">
      <Action type="call" method="exitProgram" publisher="Peach.Agent"/>
    </State>
  </StateModel>
</Peach>
