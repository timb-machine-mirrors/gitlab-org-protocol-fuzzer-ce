<?xml version="1.0" encoding="utf-8"?>
<!--
PEACH PIT COPYRIGHT NOTICE AND LEGAL DISCLAIMER

COPYRIGHT
Copyright © 2011-2014 2014 Déjà vu Security, LLC.
All rights reserved.

Déjà vu Security is the sole proprietary owner of Peach Pits and related
definition files and documentation.

User may only use, copy, or modify Peach Pits and related definition files and
documentation for internal business purposes only, provided that this entire
notice and following disclaimer appear in all copies or modifications, and
subject to the following conditions:

(1) User maintains a current subscription to the Peach Pit library.
(2) User's use is restricted to commercially licensed version of Peach Fuzzer
    only. Running Peach Pits with the Peach Fuzzer Community edition or any
    other solution is strictly prohibited.
(3) The sale, transfer, or distribution of Peach Pits and related definition
    files and documentation, in any form, is not permitted, without Déjà vu
    Security's express permission.

Legal Disclaimer
PEACH PITS AND RELATED DEFINTIION FILES AND DOCUMENTATION ARE PROVIDED "AS IS",
DÉJÀ VU SECURITY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT
NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE. DÉJÀ VU SECURITY HAS NO OBLIGATION TO PROVIDE MAINTENANCE,
SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

IN NO EVENT SHALL DÉJÀ VU SECURITY BE LIABLE TO ANY PARTY FOR ANY DIRECT,
INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES (INCLUDING LOSS OF USE,
DATA, OR PROFITS), ARISING OUT OF ANY USE OF PEACH PITS AND RELATED
DOCUMENTATION, EVEN IF DÉJÀ VU SECURITY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
-->
<Peach xmlns="http://peachfuzzer.com/2012/Peach"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://peachfuzzer.com/2012/Peach peach.xsd"  
       author="Deja Vu Security, LLC"
 description="Dynamic Host Configuration Protocol v6 PIT StateModels" version="0.0.2">

	<!-- Implements: RFC3315 [Dynamic Host Configuration Protocol for IPv6 (DHCPv6)](http://tools.ietf.org/html/rfc3315) -->
	<!-- Implementation notes: Supports the minimum necessary for server side of 1.3 "Client-server Exchanges Involving Four Messages" -->
	<!-- Implementation notes: Ported from v2.3/ipv6/dhcpv6.xml -->

	<Include ns="DHCPv6" src="file:##PitLibraryPath##/_Common/Models/Net/DHCPv6_Data.xml"/>
	<PythonPath path="##PitLibraryPath##/_Common/Models/Net/"/>
	<Import import="DHCPv6"/>

	<StateModel name="Server" initialState="Listening">
		<!-- Supports: -->
		<!-- SOLICIT (1) -> ADVERTISE (2) -->
		<!-- REQUEST (3) -> REPLY (7) -->

		<!-- Needs: -->
		<!-- all other client requests -->

		<!-- Does not support Rapid Commit (22.14) -->

		<!-- "The client sends a Solicit message to the All_DHCP_Relay_Agents_and_Servers address to find available DHCP servers." -->
		<State name="Listening">
      <Action type="call" method="StartIterationEvent" publisher="Peach.Agent" />


			<Action type="input" name="Listen" publisher="LisentenPublisher">
				<DataModel name="DhcpRequest" ref="DHCPv6:Packet"/>
			</Action>
			<Action type="getProperty" property="LastRecvAddr" publisher="LisentenPublisher">
				<DataModel name="LastSendIP"/> <!-- Needed for ip address storage -->
			</Action>
			<Action name="GoToQuit" type="changeState" ref="Quit"
							when="DHCPv6.too_many_tries(self, ##MaxTries##)"/>
			<Action name="GoToListen" type="changeState" ref="Listening"
							when="DHCPv6.not_from_target(self,'##TargetIPv6##')"/>
			<!-- !!TODO!! -->
			<!-- The system could enter through multiple states here. These need to be handled. -->
			<Action name="GoTodvert" type="changeState" ref="Advertising"
							when="DHCPv6.is_solicit(self)" />
			<Action name="GoToReply" type="changeState" ref="Reply"
							when="DHCPv6.is_request(self)" />
		</State>

		<!-- "Any server that can meet the client's requirements responds with an Advertise message." -->
		<!-- 17.2.2. Creation and Transmission of Advertise Messages -->
		<State name="Advertising">
			<!-- The server sets the "msg-type" field to ADVERTISE and copies the -->
			<!-- contents of the transaction-id field from the Solicit message -->
			<!-- received from the client to the Advertise message. -->
			<Action type="slurp" valueXpath="//Listen//XID" setXpath="//DhcpAdvertise//XID"/>
			<!-- The server ... copies the Client Identifier from the Solicit -->
			<!-- message into the Advertise message. -->
			<Action type="slurp" valueXpath="//Listen//LinkLayerAddressPlusTime/Address"
							setXpath="//SendAdvertise//ClientIdentifier//LinkLayerAddressPlusTime/Address"/>
			<Action type="slurp" valueXpath="//Listen//LinkLayerAddressPlusTime/Time"
							setXpath="//SendAdvertise//ClientIdentifier//LinkLayerAddressPlusTime/Time"/>
			<Action type="slurp" valueXpath="//Listen//IdentityAssociationForNonTemporary//IAID"
							setXpath="//SendAdvertise//IdentityAssociationForNonTemporary//IAID"/>
			<Action type="output" name="SendAdvertise" publisher="SendPublisher">
				<!-- !!TODO!! -->
				<!-- If the client has included an Option Request option in the -->
				<!-- Solicit message, the server includes options in the Advertise -->
				<!-- message containing configuration parameters for all of the -->
				<!-- options identified in the Option Request option that the -->
				<!-- server has been configured to return to the client. -->
				<DataModel name="DhcpAdvertise" ref="DHCPv6:Packet"/>
				<Data name="DataSet">
					<Field name="MsgType" value="2"/>
					<!-- The server ... copies the Client Identifier from the Solicit -->
					<!-- message into the Advertise message. -->
					<Field name="Option[0].OptionChoice.ClientIdentifier.Duid.DuidChoice.LinkLayerAddressPlusTime" value=""/>
					<Field name="Option[1].OptionChoice.ServerIdentifier.Duid.DuidChoice.LinkLayerAddressPlusTime" value=""/>
					<Field name="Option[2].OptionChoice.IdentityAssociationForNonTemporary.Data.IaOptions[0].IaOptionChoice.IaAddress" value="" />
					<!-- <Field name="Option[2].OptionChoice.IdentityAssociationForNonTemporary.Data.IaOptions[0].IaOptionChoice.IaPrefix" value="" /> -->
				</Data>
			</Action>
			<Action type="changeState" ref="Listening"/>
		</State>

		<State name="Reply">
			<!-- 15.10. Reply Message -->
			<Action type="slurp" valueXpath="//Listen//XID" setXpath="//DhcpReply//XID"/>
			<Action type="slurp" valueXpath="//SendAdvertise//ClientIdentifier//LinkLayerAddressPlusTime/Address"
							setXpath="//Reply//ClientIdentifier//LinkLayerAddressPlusTime/Address"/>
			<Action type="slurp" valueXpath="//SendAdvertise//ClientIdentifier//LinkLayerAddressPlusTime/Time"
							setXpath="//Reply//ClientIdentifier//LinkLayerAddressPlusTime/Time"/>

			<Action type="slurp" valueXpath="//Listening//ServerIdentifier//LinkLayerAddressPlusTime/Time"
							setXpath="//Reply//ServerIdentifier//LinkLayerAddressPlusTime/Time"/>

			<Action type="output" name="Reply" publisher="SendPublisher">
				<DataModel ref="DHCPv6:Packet" name="DhcpReply"/>
				<Data name="DataSet">
					<Field name="MsgType" value="7"/>
					<Field name="Option[0].OptionChoice.ServerIdentifier.Duid.DuidChoice.LinkLayerAddressPlusTime" value=""/>
					<Field name="Option[1].OptionChoice.ClientIdentifier.Duid.DuidChoice.LinkLayerAddressPlusTime" value=""/>
					<Field name="Option[2].OptionChoice.IdentityAssociationForNonTemporary.Data.IaOptions[0].IaOptionChoice.IaAddress" value="" />
				</Data>
			</Action>
      
      <Action type="call" method="ExitIterationEvent" publisher="Peach.Agent" />

		</State>

		<State name="Quit">
			<!-- This is a state that exists to exit after a given number of unmatched packets -->
      <Action type="call" method="ExitIterationEvent" publisher="Peach.Agent" />

		</State>
	</StateModel>

	<StateModel name="Client" initialState="Initial">
		<State name="Initial">
      <Action type="call" method="StartIterationEvent" publisher="Peach.Agent" />

			<Action name="Solicit" type="output">
				<DataModel ref="DHCPv6:Solicit"/>
			</Action>

			<Action name="Advertise" type="input">
				<DataModel ref="DHCPv6:Packet"/>
			</Action>

			<Action type="slurp" valueXpath="//Advertise//IPv6Address" setXpath="//Request//IPv6Address"/>
			<Action type="slurp" valueXpath="//Advertise//T1" setXpath="//Request//T1"/>
			<Action type="slurp" valueXpath="//Advertise//T2" setXpath="//Request//T2"/>
			<Action type="slurp" valueXpath="//Advertise//PreferredLifetime" setXpath="//Request//PreferredLifetime"/>
			<Action type="slurp" valueXpath="//Advertise//ValidLifetime" setXpath="//Request//ValidLifetime"/>
			<Action type="slurp" valueXpath="//Advertise//ServerIdentifier//Time" setXpath="//Request//ServerIdentifier//DuidTime"/>

			<Action name="Request" type="output">
				<DataModel ref="DHCPv6:Request"/>
			</Action>

			<Action name="Reply" type="input">
				<DataModel ref="DHCPv6:Packet"/>
			</Action>
      <Action type="call" method="ExitIterationEvent" publisher="Peach.Agent" />

		</State>
	</StateModel>
</Peach>
<!-- end -->
