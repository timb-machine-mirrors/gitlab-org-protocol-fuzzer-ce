<?xml version="1.0" encoding="utf-8"?>
<Peach xmlns="http://peachfuzzer.com/2012/Peach" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://peachfuzzer.com/2012/Peach /peach/peach.xsd"
       author="Deja Vu Security, LLC" description="Dynamic Host Configuration Protocol v6 PIT StateModels" version="0.0.2">
	<!-- Copyright (c) Deja Vu Security, LLC 2013 -->

	<!-- Implements: RFC3315 [Dynamic Host Configuration Protocol for IPv6 (DHCPv6)](http://tools.ietf.org/html/rfc3315) -->
	<!-- Implementation notes: Supports the minimum necessary for server side of 1.3 "Client-server Exchanges Involving Four Messages" -->
	<!-- Implementation notes: Ported from v2.3/ipv6/dhcpv6.xml -->

	<Include ns="DHCP" src="file:##Path##/_Common/Models/Net/DHCPv6_Data.xml"/>
	<PythonPath path="##Path##/_Common/Models/Net/"/>
	<Import import="DHCPv6"/>



	<StateModel name="Server" initialState="Listening">
		<!-- Supports: -->
		<!-- SOLICIT (1) -> ADVERTISE (2) -->
		<!-- REQUEST (3) -> REPLY (7) -->

		<!-- Needs: -->
		<!-- all other client requests -->

		<!-- Does not support Rapid Commit (22.14) -->

		<!-- "The client sends a Solicit message to the All_DHCP_Relay_Agents_and_Servers address to find available DHCP servers." -->
		<State name="Listening">

			<Action type="input" name="Listen" publisher="LisentenPublisher">
				<DataModel name="DhcpRequest" ref="DHCP:Packet"/>
			</Action>
			<Action type="getProperty" property="LastRecvAddr" publisher="LisentenPublisher">
				<DataModel name="LastSendIP"/> <!-- Needed for ip address storage -->
			</Action>
			<Action name="GoToQuit" type="changeState" ref="Quit"
							when="DHCPv6.too_many_tries(self, ##MaxTries##)"/>
			<Action name="GoToListen" type="changeState" ref="Listening"
							when="DHCPv6.not_from_target(self,'##TargetIPv6##')"/>
			<!-- !!TODO!! -->
			<!-- The system could enter through multiple states here. These need to be handled. -->
			<Action name="GoTodvert" type="changeState" ref="Advertising"
							when="DHCPv6.is_solicit(self)" />
			<Action name="GoToReply" type="changeState" ref="Reply"
							when="DHCPv6.is_request(self)" />
		</State>

		<!-- "Any server that can meet the client's requirements responds with an Advertise message." -->
		<!-- 17.2.2. Creation and Transmission of Advertise Messages -->
		<State name="Advertising">
			<!-- The server sets the "msg-type" field to ADVERTISE and copies the -->
			<!-- contents of the transaction-id field from the Solicit message -->
			<!-- received from the client to the Advertise message. -->
			<Action type="slurp" valueXpath="//Listen//XID" setXpath="//DhcpAdvertise//XID"/>
			<!-- The server ... copies the Client Identifier from the Solicit -->
			<!-- message into the Advertise message. -->
			<Action type="slurp" valueXpath="//Listen//LinkLayerAddressPlusTime/Address"
							setXpath="//SendAdvertise//ClientIdentifier//LinkLayerAddressPlusTime/Address"/>
			<Action type="slurp" valueXpath="//Listen//LinkLayerAddressPlusTime/Time"
							setXpath="//SendAdvertise//ClientIdentifier//LinkLayerAddressPlusTime/Time"/>
			<Action type="slurp" valueXpath="//Listen//IdentityAssociationForNonTemporary//IAID"
							setXpath="//SendAdvertise//IdentityAssociationForNonTemporary//IAID"/>
			<Action type="output" name="SendAdvertise" publisher="SendPublisher">
				<!-- !!TODO!! -->
				<!-- If the client has included an Option Request option in the -->
				<!-- Solicit message, the server includes options in the Advertise -->
				<!-- message containing configuration parameters for all of the -->
				<!-- options identified in the Option Request option that the -->
				<!-- server has been configured to return to the client. -->
				<DataModel name="DhcpAdvertise" ref="DHCP:Packet"/>
				<Data name="DataSet">
					<Field name="MsgType" value="2"/>
					<!-- The server ... copies the Client Identifier from the Solicit -->
					<!-- message into the Advertise message. -->
					<Field name="Option[0].OptionChoice.ClientIdentifier.Duid.DuidChoice.LinkLayerAddressPlusTime" value=""/>
					<Field name="Option[1].OptionChoice.ServerIdentifier.Duid.DuidChoice.LinkLayerAddressPlusTime" value=""/>
					<Field name="Option[2].OptionChoice.IdentityAssociationForNonTemporary.Data.IaOptions[0].IaOptionChoice.IaAddress" value="" />
					<!-- <Field name="Option[2].OptionChoice.IdentityAssociationForNonTemporary.Data.IaOptions[0].IaOptionChoice.IaPrefix" value="" /> -->
				</Data>
			</Action>
			<Action type="changeState" ref="Listening"/>
		</State>

		<State name="Reply">
			<!-- 15.10. Reply Message -->
			<Action type="slurp" valueXpath="//Listen//XID" setXpath="//DhcpReply//XID"/>
			<Action type="slurp" valueXpath="//SendAdvertise//ClientIdentifier//LinkLayerAddressPlusTime/Address"
							setXpath="//Reply//ClientIdentifier//LinkLayerAddressPlusTime/Address"/>
			<Action type="slurp" valueXpath="//SendAdvertise//ClientIdentifier//LinkLayerAddressPlusTime/Time"
							setXpath="//Reply//ClientIdentifier//LinkLayerAddressPlusTime/Time"/>

			<Action type="slurp" valueXpath="//Listening//ServerIdentifier//LinkLayerAddressPlusTime/Time"
							setXpath="//Reply//ServerIdentifier//LinkLayerAddressPlusTime/Time"/>

			<Action type="output" name="Reply" publisher="SendPublisher">
				<DataModel ref="DHCP:Packet" name="DhcpReply"/>
				<Data name="DataSet">
					<Field name="MsgType" value="7"/>
					<Field name="Option[0].OptionChoice.ServerIdentifier.Duid.DuidChoice.LinkLayerAddressPlusTime" value=""/>
					<Field name="Option[1].OptionChoice.ClientIdentifier.Duid.DuidChoice.LinkLayerAddressPlusTime" value=""/>
					<Field name="Option[2].OptionChoice.IdentityAssociationForNonTemporary.Data.IaOptions[0].IaOptionChoice.IaAddress" value="" />
				</Data>
			</Action>
		</State>

		<State name="Quit">
			<!-- This is a state that exists to exit after a given number of unmatched packets -->
		</State>


	</StateModel>



</Peach>
<!-- end -->
