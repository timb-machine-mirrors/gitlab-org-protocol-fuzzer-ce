<?xml version="1.0" encoding="utf-8"?>
<!--
PEACH PIT COPYRIGHT NOTICE AND LEGAL DISCLAIMER

COPYRIGHT
Copyright © 2011-2014 2014 Déjà vu Security, LLC.
All rights reserved.

Déjà vu Security is the sole proprietary owner of Peach Pits and related
definition files and documentation.

User may only use, copy, or modify Peach Pits and related definition files and
documentation for internal business purposes only, provided that this entire
notice and following disclaimer appear in all copies or modifications, and
subject to the following conditions:

(1) User maintains a current subscription to the Peach Pit library.
(2) User's use is restricted to commercially licensed version of Peach Fuzzer
    only. Running Peach Pits with the Peach Fuzzer Community edition or any
    other solution is strictly prohibited.
(3) The sale, transfer, or distribution of Peach Pits and related definition
    files and documentation, in any form, is not permitted, without Déjà vu
    Security's express permission.

Legal Disclaimer
PEACH PITS AND RELATED DEFINTIION FILES AND DOCUMENTATION ARE PROVIDED "AS IS",
DÉJÀ VU SECURITY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT
NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE. DÉJÀ VU SECURITY HAS NO OBLIGATION TO PROVIDE MAINTENANCE,
SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

IN NO EVENT SHALL DÉJÀ VU SECURITY BE LIABLE TO ANY PARTY FOR ANY DIRECT,
INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES (INCLUDING LOSS OF USE,
DATA, OR PROFITS), ARISING OUT OF ANY USE OF PEACH PITS AND RELATED
DOCUMENTATION, EVEN IF DÉJÀ VU SECURITY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
-->
<Peach xmlns="http://peachfuzzer.com/2012/Peach"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://peachfuzzer.com/2012/Peach peach.xsd"  
       author="Deja Vu Security, LLC"
 description="Telnet Command Protocol PIT StateModels" version="0.0.2">

	<Include ns="TELNET" src="file:##PitLibraryPath##/_Common/Models/Net/TELNET_Data.xml"/>
	<PythonPath path="##PitLibraryPath##/_Common/Models/Net/"/>
	<Import import="TELNET"/>

	<StateModel name="Server" initialState="StartServer">
		<State name="StartServer">
      <Action type="start" publisher="TcpHandler"/>

      <Action type="call" method="launchProgram" publisher="Peach.Agent"/>

      <Action type="accept" publisher="TcpHandler"/>

			<Action name="Next" type="changeState" ref="ServerListen"/>
    </State>

		<State name="ServerListen">
			<Action name="TelnetReceive" type="input" publisher="TcpHandler">
				<DataModel ref="TELNET:TelnetSingleOptionCrack"/>
			</Action>

			<!--Switches state to SendNeg Opts when no more bytes are left to read-->
			<Action name="Done" type="changeState" ref="SendPrompt" when="StateModel.states['ServerListen'].actions[0].dataModel.find('EmptyPacket') != None"/>

			<!--Skips send of reply if Sub Options i sent-->
			<Action name="NoReplyNegOption" type="changeState" ref="ServerListen" when="StateModel.states['ServerListen'].actions[0].dataModel.find('command') == None or int(StateModel.states['ServerListen'].actions[0].dataModel.find('command').DefaultValue) == 0xfa"/>

			<Action name="OptionSlurp" type="slurp" valueXpath="//ServerListen//TelnetReceive//optionIds" setXpath="//ServerListen//TelnetRespond//optionIds"/>
			<Action name="CommandSlurp" type="slurp" valueXpath="//ServerListen//TelnetReceive//command" setXpath="//ServerListen//TelnetRespond//command"/>

			<Action name="TelnetRespond" type="output" publisher="TcpHandler" onStart="TELNET.process_server_output(self)">
				<DataModel ref="TELNET:TelnetClientReply"/>
			</Action>

			<Action name="TelnetSendTermSpeedNeg" type="output" publisher="TcpHandler" when="TELNET.value_needs_reply(self)">
				<DataModel ref="TELNET:SendTermSpeedInit"/>
			</Action>

			<Action name="TelnetSendNewEnvirNeg" type="output" publisher="TcpHandler" when="TELNET.value_needs_reply(self)">
				<DataModel ref="TELNET:SendNewEnvirOptInit"/>
			</Action>

			<Action name="TelnetSendTermTypeNeg" type="output" publisher="TcpHandler" when="TELNET.value_needs_reply(self)">
				<DataModel ref="TELNET:SendTermTypeInit"/>
			</Action>

			<Action name="Next" type="changeState" ref="ServerListen"/>
		</State>

		<State name="SendPrompt">
			<Action name="TelnetSendTermTypeNeg" type="output" publisher="TcpHandler">
				<DataModel ref="TELNET:SendPrompt"/>
			</Action>

			<Action name="TelnetReceive" type="input" publisher="TcpHandler">
				<DataModel ref="TELNET:TelnetSingleOptionCrack"/>
			</Action>

			<Action name="Next" type="changeState" ref="ReadData"/>
		</State>

		<State name="ReadData">
			<Action name="TelnetReceive" type="input" publisher="TcpHandler">
				<DataModel ref="TELNET:TelnetSingleOptionCrack"/>
			</Action>

			<Action name="Done" type="changeState" ref="Done" when="StateModel.states['ReadData'].actions[0].dataModel.find('EmptyPacket') != None"/>

			<Action name="TelnetSendTermTypeNeg" type="output" publisher="TcpHandler">
				<DataModel ref="TELNET:SendPrompt"/>
			</Action>

			<Action name="Next" type="changeState" ref="Done"/>
		</State>

		<State name="Done">
			<Action type="close" publisher="TcpHandler"/>
			<Action type="call" method="exitProgram" publisher="Peach.Agent"/>
		</State>
	</StateModel>

	<!-- Telnet Client State Model -->
  <StateModel name="Client" initialState="Initial">
		<State name="Initial">
			<Action name="TelnetSendConnect" type="output" publisher="TcpHandler" onStart="TELNET.process_client_output(self)">
        <DataModel ref="TELNET:TelnetConnect"/>
      </Action>

			<Action name="NextPacket" type="changeState" ref="ReadInput"/>
		</State>

		<State name="ReadInput">
			<Action name="TelnetReceive" type="input" publisher="TcpHandler">
				<DataModel ref="TELNET:TelnetSingleOptionCrack"/>
			</Action>

			<!--Switches state to SendNeg Opts when no more bytes are left to read-->
			<Action name="Done" type="changeState" ref="SendNegOpts" when="StateModel.states['ReadInput'].actions[0].dataModel.find('EmptyPacket') != None"/>

			<!--Skips send of reply when server sends go ahead for Sub Options-->
			<Action name="NoReplyNegOption" type="changeState" ref="ReadInput" when="StateModel.states['ReadInput'].actions[0].dataModel.find('command') == None or int(StateModel.states['ReadInput'].actions[0].dataModel.find('command').DefaultValue) == 0xfa"/>

			<Action name="OptionSlurp" type="slurp" valueXpath="//ReadInput//TelnetReceive//optionIds" setXpath="//TelnetRespond//optionIds"/>
			<Action name="CommandSlurp" type="slurp" valueXpath="//ReadInput//TelnetReceive//command" setXpath="//TelnetRespond//command"/>

			<!--Skips send of reply if the option is one that the client initiated-->
			<Action name="SkipSend" type="changeState" ref="ReadInput" when="TELNET.is_client_sent_option(self)"/>

			<Action name="TelnetRespond" type="output" publisher="TcpHandler" onStart="TELNET.set_client_opposite(self)">
				<DataModel ref="TELNET:TelnetClientReply"/>
			</Action>

			<Action name="NextPacket" type="changeState" ref="ReadInput"/>
		</State>

		<State name="SendNegOpts">
			<Action name="TelnetSendWindowNeg" type="output" publisher="TcpHandler">
				<DataModel ref="TELNET:SendWindowNegtiate"/>
			</Action>

			<Action name="TelnetSendTermSpeedNeg" type="output" publisher="TcpHandler">
				<DataModel ref="TELNET:SendTermSpeed"/>
			</Action>

			<Action name="TelnetSendNewEnvirNeg" type="output" publisher="TcpHandler">
				<DataModel ref="TELNET:SendNewEnvirOpt"/>
			</Action>

			<Action name="TelnetSendTermTypeNeg" type="output" publisher="TcpHandler">
				<DataModel ref="TELNET:SendTermType"/>
			</Action>

			<!--Rests the data store and changes state to GetConsole-->
			<Action name="Login" type="changeState" ref="GetConsole" when="TELNET.clear_store(self)"/>
		</State>

		<State name="GetConsole">
			<Action name="TelnetReceive" type="input" publisher="TcpHandler">
				<DataModel ref="TELNET:TelnetSingleOptionCrack"/>
			</Action>

			<!--Changes state to SenPayload when data is received that isn't an opcode-->
			<Action name="GetPrompt" type="changeState" ref="SendPayload" when="StateModel.states['GetConsole'].actions[0].dataModel.find('ReadOne') != None"/>

			<!--Switches state to Done Opts when no more bytes are left to read. Ends Iteration-->
			<Action name="Done" type="changeState" ref="Done" when="StateModel.states['GetConsole'].actions[0].dataModel.find('EmptyPacket') != None"/>

			<Action name="OptionSlurp" type="slurp" valueXpath="//GetConsole//TelnetReceive//optionIds" setXpath="//GetConsole//TelnetRespond//optionIds"/>
			<Action name="CommandSlurp" type="slurp" valueXpath="//GetConsole//TelnetReceive//command" setXpath="//GetConsole//TelnetRespond//command"/>

			<!--Skips send of reply if the option is one that the client initiated-->
			<Action name="SkipSend" type="changeState" ref="GetConsole" when="TELNET.is_client_sent_option(self)"/>

			<Action name="TelnetRespond" type="output" publisher="TcpHandler" onStart="TELNET.store_and_set_opposite(self)">
				<DataModel ref="TELNET:TelnetClientReply"/>
			</Action>

			<!--Loops back to the GetConsole to read more data-->
			<Action name="GetConsoleLoop" type="changeState" ref="GetConsole"/>
		</State>

		<State name="SendPayload">
			<Action name="TelnetSendUserName" type="output" publisher="TcpHandler">
				<DataModel ref="TELNET:SendUsername"/>
			</Action>

			<Action name="TelnetReceivePassword" type="input" publisher="TcpHandler">
				<DataModel ref="TELNET:TelnetSingleOptionCrack"/>
			</Action>

			<Action name="TelnetSendPassword" type="output" publisher="TcpHandler">
				<DataModel ref="TELNET:SendPassword"/>
			</Action>

			<Action name="TelnetReceiveConf" type="input" publisher="TcpHandler">
				<DataModel ref="TELNET:TelnetSingleOptionCrack"/>
			</Action>

			<Action name="TelnetSendPayload" type="output" publisher="TcpHandler">
				<DataModel ref="TELNET:TelnetSendPayload"/>
			</Action>

			<Action name="TelnetReceive" type="input" publisher="TcpHandler">
				<DataModel ref="TELNET:TelnetSingleOptionCrack"/>
			</Action>

			<Action name="TelnetSendPayload2" type="output" publisher="TcpHandler">
				<DataModel ref="TELNET:TelnetSendPayload2"/>
			</Action>

			<Action name="TelnetReceive2" type="input" publisher="TcpHandler">
				<DataModel ref="TELNET:TelnetSingleOptionCrack"/>
			</Action>

			<Action name="TelnetSendPayload3" type="output" publisher="TcpHandler">
				<DataModel ref="TELNET:TelnetSendPayload3"/>
			</Action>
		</State>

		<!--Empty state that ends the iteration-->
		<State name="Done"/>
	</StateModel>
</Peach>
<!--END-->
