#!/usr/bin/env python

import os
from waflib import Errors

deps = [
	'NLog.dll',
	'PacketDotNet.dll',
	'Peach.Core.dll',
	'Peach.Pro.dll',
	'Peach.Pro.WebApi.dll',
	'Peach.Pro.WebApi2.dll',
	'SharpPcap.dll',
	'System.dll',
	'System.Core.dll',
	'System.Xml.dll',
]

top = bld.path.parent.parent

def glob_from(*parts):
	path = os.path.join(*parts)
	return (
		top.find_or_declare(path),
		top.ant_glob(os.path.join(path, '**'))
	)

python_stdlib = glob_from('3rdParty', 'IronPython.StdLib.2.7.4', 'content')

netfx = ''
if Utils.unversioned_sys_platform() != 'win32':
	netfx = 'mono '

makexsd = '%sPeach.exe --makexsd' % netfx

app = bld(
	features = 'cs',
	use = deps,
	source = bld.path.ant_glob('**/*.cs'),
	name = 'Peach.exe',
#	mkbundle = True,
	ver_product = 'Peach Fuzzing Platfom',
	install_644 = {
		python_stdlib[0] : python_stdlib[1],
	},
	ide_content = bld.path.ant_glob('samples/**/*'),
	ide_custom_commands = [
		dict(type='AfterBuild', command=makexsd, workingdir='${TargetDir}'),
	]
)

def run_makexsd(ctx):
	ret = ctx.exec_command(makexsd, cwd=bld.env.BINDIR, env={'TERM': 'xterm'})
	if ret:
		raise Errors.WafError('makexsd returned %s' % str(ret))

if bld.is_install:
	bld.add_post_fun(run_makexsd)

# samples folder is installed to output dir by ../SDK/wscript_build

if bld.env.MCS and bld.env.DEST_OS != 'win32':
	app.install_755 = 'peach'

common = [
	# Peach
	'Peach.exe',
	'Peach.Pro.Web',

	# Peach Platform Suppoort
	'Peach.Pro.OS.Windows.dll',
	'Peach.Pro.OS.Linux.dll',
	'Peach.Pro.OS.OSX.dll',

	# Include sample programs so sample pits work
	'SimpleHttpServer',
	'CrashableServer',
	'CrashingFileConsumer',
	'CrashingProgram',
	'ComTest',

	# Common side-process helpers
	'PeachTrampoline.exe',

	# Linux side-process helpers
	'PeachLinuxCrashHandler.exe',

	# Windows side-process helpers
	'Peach.Pro.ComContainer.exe',
	'Peach.Pro.WindowsDebugInstance.exe',

	'CrashWrangler',
]

peach_pro = common + [
	'peach-sdk',

	# Helper Programs
	'PeachValidator.exe',
	'PeachMinset.exe',
	'PeachSampleNinja.exe',

	# Basic Block Pin Tool
	'pin',               # Pin Binaries
	'bblocks',
	'bblocks32',
	'bblocks64',
]

internal = common + [
	# Internal pit testing tools
	'nunit-console',
	'nunit-tools',
	'pitc.exe',
	'PitTester.exe',
	'PeachWorker.exe',
	'PeachService.exe',
	'Peach.Core.Test.dll',
	'Peach.Pro.Test.dll',
	'Peach.Pro.Test.OS.Linux.dll',
	'Peach.Pro.Test.OS.OSX.dll',
	'Peach.Pro.Test.OS.Windows.dll',
	'Peach.Pro.Test.WebApi.dll',
	'UseAfterFree',
	'CrashTest',
	'CrashTestDummy.exe',
]

bld(
	features = 'zip',
	name = '-'.join([ 'peach-pro', bld.env.BUILDTAG, bld.variant ]),
	use = peach_pro,
)

internal_variant = bld.variant \
	.replace('debug', 'internal') \
	.replace('release', 'internal')

bld(
	features = 'zip',
	name = '-'.join([ 'peach-pro', bld.env.BUILDTAG, internal_variant ]),
	use = internal,
)
